<?xml version="1.0" encoding="utf-8"?>
<s:Scroller xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" 
		 xmlns:categorylist="org.mxhero.console.commons.component.categorylist.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.HRule;
			import mx.controls.SWFLoader;
			import mx.events.ResizeEvent;
			
			[Bindable]
			public var model:CategoryListPM= new CategoryListPM();
			
			private var _categoryList:Object;

			public function get clickHandler():Function{
				return model.clickHandler;
			}
	
			public function set clickHandler(value:Function):void{
				model.clickHandler=value;
			}
			
			[Bindable]
			public function get defaultTitle():String{
				return model.defaultTitle;
			}
			
			public function set defaultTitle(value:String):void{
				model.defaultTitle=value;
				invalidateDisplayList();
			}
			
			[Bindable]
			public function get defaultDescription():String{
				return model.defaultDescription;
			}
			
			public function set defaultDescription(value:String):void{
				model.defaultDescription=value;
			}
			
			[Bindable]
			public function get columnsWidth():Number{
				return model.columnsWidth;
			}
			
			public function get titleLabelFunction():Function{
				return this.model.titleLabelFunction;
			}
			
			public function set titleLabelFunction(value:Function):void{
				if(value!=null){
					this.model.titleLabelFunction=value;
				}
			}
			
			public function set columnsWidth(value:Number):void{
				model.columnsWidth = value;
			}
			
			[Bindable]
			public function get categoryList():Object
			{
				return _categoryList;
			}

			public function set categoryList(value:Object):void
			{
				_categoryList = value;
				loadAllCategoriesImages();
			}

			private function initCategories(event:*=null):void{
				var hrule:HRule;
				innerGroup.removeAllElements();
				model.categoriesUI.removeAll();
				
				if(_categoryList!=null){
					for each(var category:Object in _categoryList){
						var newCategoryRow:CategoryRow= new CategoryRow();
						newCategoryRow.model=model;
						newCategoryRow.category=category;
						innerGroup.addElement(newCategoryRow);
						model.categoriesUI.addItem(newCategoryRow.categoryContainer);
						hrule = new HRule();
						hrule.percentWidth=100;
						hrule.height=1;
						innerGroup.addElement(hrule);
					}
				}
				innerGroup.removeElementAt(innerGroup.numElements-1);
				
				invalidateDisplayList();
			}
			
			
			private function loadAllCategoriesImages():void{
				for each(var category:Object in _categoryList){
					if(category.iconsrc is String){
						var loader:SWFLoader = new SWFLoader();
						loader.load(category.iconsrc);
						loader.addEventListener(Event.COMPLETE,initCategories);
					}
				}
				initCategories();
			}
			
			
			public function get orderChilds():Boolean
			{
				return model.orderChilds;
			}

			public function set orderChilds(value:Boolean):void
			{
				model.orderChilds = value;
			}

		]]>
	</fx:Script>

	<s:Group id="groupContainer" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="10" paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10"/>
		</s:layout>
		<categorylist:CategoryListTitle width="100%" model="{this.model}"/>
		<s:Group id="innerGroup" width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout gap="10" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0"/>
			</s:layout>
		</s:Group>
	</s:Group>
</s:Scroller>
