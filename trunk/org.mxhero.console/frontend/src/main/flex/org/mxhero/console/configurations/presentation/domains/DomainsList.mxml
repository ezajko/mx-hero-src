<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:parsley="http://www.spicefactory.org/parsley" 
		 xmlns:component="org.mxhero.console.commons.component.*" xmlns:component1="org.mxhero.console.commons.feature.component.*">
	<fx:Declarations>
		<parsley:Configure/>
		
		<mx:DateFormatter id="creationDateFormatter" 
						  formatString="DD-MM-YYYY JJ:NN"/>

	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.events.DataGridEvent;
			import mx.events.ListEvent;
			import mx.utils.ObjectUtil;
			
			import org.mxhero.console.commons.infrastructure.parser.StringUtils;
			import org.mxhero.console.commons.resources.ImageResources;
			import org.mxhero.console.configurations.application.resources.DomainsShowProperties;

			[Inject]
			[Bindable]
			public var model:DomainsViewPM;
			
			protected function dateLabelFunction(item:Object,column:GridColumn):String{
				return creationDateFormatter.format(item.creationDate);
			}

			protected function updatedDateLabelFunction(item:Object,column:GridColumn):String{
				return creationDateFormatter.format(item.updatedDate);
			}
			
			protected function filterBtt_clickHandler(event:MouseEvent):void
			{
				model.filterDomains(domainTI.text,1);
			}

			protected function clearBtt_clickHandler(event:MouseEvent):void
			{
				domainTI.text="";
				model.filterDomains(domainTI.text,1);
			}
	
			protected function newDomainLink_clickHandler(event:MouseEvent):void
			{
				model.newDomain(this);
			}
			
			public function nullLastCompareFunction(item1:Object, item2:Object):int
			{
				if(item1.owner==null && item2.owner==null){
					return 0;
				}
				if(item1.owner==null){
					return 1;
				}
				if(item2.owner==null){
					return -1;
				}
				return ObjectUtil.stringCompare(item1.owner.email.toString(),item2.owner.email.toString());
			}


			public function datagrid1_itemDoubleClickHandler(event:ListEvent=null):void
			{
				model.editDomain(this);
			}
			
			protected function aliaseslabelFunction(item:Object, column:GridColumn):String{
				var label:String="";
				if(item.aliases!=null){
					for each (var alias:Object in item.aliases){
						var domainAlias:String = alias as String;
						label=label+domainAlias+'\n';
					}
					label=StringUtils.trimRight(label);
				}
				return label;
			}

			protected function prevButton_clickHandler(event:MouseEvent):void
			{
				model.filterDomains(domainTI.text,model.domains.actualPage-1);
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				model.filterDomains(domainTI.text,model.domains.actualPage+1);
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:HorizontalLayout paddingLeft="8" paddingTop="8" paddingRight="8" paddingBottom="8" gap="20"/>
	</s:layout>
	<s:BorderContainer backgroundAlpha="1.0" 
					   contentBackgroundAlpha="1.0" 
					   dropShadowVisible="true" 
					   borderStyle="solid" borderColor="#000000" contentBackgroundColor="#7C7B7B" backgroundColor="#696969">
		<s:layout>
			<s:VerticalLayout gap="20"/>
		</s:layout>
		<s:HGroup width="100%" paddingTop="10" horizontalAlign="center" 
				  paddingLeft="4" paddingRight="4">
			<s:BorderContainer
				minHeight="0"
				minWidth="0"
				styleName="action"
				width="100%">
				<s:layout>
					<s:VerticalLayout paddingBottom="2" paddingTop="2"/>
				</s:layout>
			<mx:LinkButton id="newDomainLink"
						label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.ADD_NEW_DOMAIN_LABEL)}" 
						icon="{ImageResources.ADD_ICO}"
						styleName="action"
						click="newDomainLink_clickHandler(event)"/>
			</s:BorderContainer>
		</s:HGroup>
	
		<s:Form defaultButton="{filterBtt}">
			<s:layout>
				<s:FormLayout gap="10" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="0" />
			</s:layout>
			<s:FormHeading label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FILTER_TITLE)}"/>
			<s:Label 
				fontWeight="bold"
				text="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FILTER_DOMAIN_LABEL)}"/>
			<s:TextInput id="domainTI" width="100%"/>
			<s:Spacer height="5"/>
			<s:HGroup width="100%">
				<s:Button id="clearBtt" label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FILTER_BUTTON_CLEAR_LABEL)}" 
						  click="clearBtt_clickHandler(event)"
						  buttonMode="true"/>	
				<s:Spacer width="100%"/>
				<s:Button id="filterBtt" label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FILTER_BUTTON_LABEL)}" 
						  click="filterBtt_clickHandler(event)"
						  buttonMode="true"/>
			</s:HGroup>			
		</s:Form>		
	</s:BorderContainer>


	<s:Panel width="100%" 
			 height="100%"
			 minWidth="600"
			 skinClass="org.mxhero.console.commons.skin.TitleLessPanel"
			 cornerRadius="0">

	<s:DataGrid dataProvider="{model.domains.elements}" 
				 width="100%" 
				 height="100%"
				 selectedItem="@{model.selectDomain}"
				 variableRowHeight="true"
				 mouseChildren="true">
		<s:columns>
			<s:ArrayList>
			<s:GridColumn headerText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_DOMAIN_LABEL)}" 
							   minWidth="140">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer width="100%">
							<s:layout>
								<s:HorizontalLayout horizontalAlign="left" verticalAlign="middle" />
							</s:layout>
							<fx:Declarations>
								<mx:Glow id="glowOn"
										 alphaFrom="{minAlpha}"
										 alphaTo="{maxAlpha}"
										 blurXFrom="{minGlow}"
										 blurXTo="{maxGlow}"
										 blurYFrom="{minGlow}"
										 blurYTo="{maxGlow}"
										 color="{glowColor}"
										 duration="{duration}"/>
								
								<mx:Glow id="glowOff" 
										 alphaFrom="{maxAlpha}"
										 alphaTo="{minAlpha}"
										 blurXFrom="{maxGlow}"
										 blurXTo="{minGlow}"
										 blurYFrom="{maxGlow}"
										 blurYTo="{minGlow}"
										 color="{glowColor}"
										 duration="{duration}"/>
							</fx:Declarations>
							<fx:Script>
								<![CDATA[
									import org.mxhero.console.configurations.application.resources.DomainsShowProperties;
									
									[Bindable]
									public var glowColor:Number=0xFFFFFF;
									
									[Bindable]
									public var minGlow:Number=1.0;
									
									[Bindable]
									public var maxGlow:Number=10.0;
									
									[Bindable]
									public var minAlpha:Number=0.0;
									
									[Bindable]
									public var maxAlpha:Number=0.5;
									
									[Bindable]
									public var duration:Number=300;
									
									private var lastColor:*;
									
									private function onRollOverHandler():void{
										lastColor=childLabel.getStyle("color");
										childLabel.setStyle("color",glowColor);
									}
									
									private function onRollOutHandler():void{
										childLabel.setStyle("color",lastColor);
									}
									
								]]>
							</fx:Script>
							
							<s:Label id="childLabel"
									 styleName="domainList"
									 text="{data.domain}"
									 rollOver="{onRollOverHandler();}"
									 rollOut="{onRollOutHandler();}"
									 buttonMode="true"
									 mouseEnabled="true"
									 click="{outerDocument.model.enterDomain()}"
									 rollOverEffect="{glowOn}"
									 toolTip="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_CREATED_ENTER_LABEL)}"
									 rollOutEffect="{glowOff}"/>

						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn dataField="owner.email" 
							   headerText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_OWNER_LABEL)}" 
							   minWidth="100"
							   sortCompareFunction="{nullLastCompareFunction}"/>
			<s:GridColumn dataField="server" 
							   headerText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_SERVER_LABEL)}" 
							   minWidth="100"/>
			<s:GridColumn dataField="aliases" 
							   headerText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_ALIASES_LABEL)}" 
							   labelFunction="{aliaseslabelFunction}"
							   minWidth="100"/>
			<s:GridColumn dataField="updatedDate" 
							   headerText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_UPDATED_LABEL)}" 
							   labelFunction="updatedDateLabelFunction"
							   width="130" resizable="false"/>
			<s:GridColumn dataField="creationDate" 
							   headerText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_CREATED_LABEL)}"
							   labelFunction="dateLabelFunction"
							   width="130" resizable="false"/>
			<s:GridColumn  width="72" sortable="false" resizable="false">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer width="100%">
							<s:layout>
								<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
							</s:layout>
							<fx:Script>
								<![CDATA[
									import org.mxhero.console.commons.resources.ImageResources;
									import org.mxhero.console.configurations.application.resources.DomainsShowProperties;

								]]>
							</fx:Script>
							<component1:GlowButton maxGlow="10.0" 
												  click="{outerDocument.model.editDomain(outerDocument)}"
												  source="{ImageResources.EDIT_ICO}" toolTip="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_CREATED_EDIT_LABEL)}"/>
							<component1:GlowButton maxGlow="10.0" 
												  click="{outerDocument.model.removeDomain()}"
												  source="{ImageResources.DELETE_ICO}" toolTip="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.COLUMN_CREATED_REMOVE_LABEL)}"/>						
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
		<s:controlBarContent>
			
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.DOMAINS_TOTAL)+' '+model.domains.totalElements}"/>
				<s:Spacer width="100%"/>
				<component1:GlowButton id="prevButton"
										maxGlow="10.0" 
									   source="{ImageResources.LEFT_ICO}"
									   enabled="{model.domains.hasPrev()}"
									   click="prevButton_clickHandler(event)"
									   />
				<s:Label text="{(model.domains.totalElements==0)?0:(model.domains.actualPage)}"/>
				<s:Label text="{'/'}"/>
				<s:Label text="{(model.domains.totalElements==0)?0:(model.domains.totalPages)}"/>
				<component1:GlowButton id="nextButton"
										maxGlow="10.0" 
									   source="{ImageResources.RIGHT_ICO}"
									   enabled="{model.domains.hasNext()}"
									   click="nextButton_clickHandler(event)"/>
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>
</s:Group>
