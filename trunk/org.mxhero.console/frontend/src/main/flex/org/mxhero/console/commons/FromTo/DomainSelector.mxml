<?xml version="1.0" encoding="utf-8"?>
<!--
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  gap="20" 
		  xmlns:FromTo="org.mxhero.console.commons.FromTo.*" 
		  xmlns:element="org.mxhero.console.commons.FromTo.element.*"
		  currentStateChange="{notifyChange()}" 
		  xmlns:component="org.mxhero.console.commons.component.*"
		  verticalAlign="middle"
		  creationComplete="creationCompleteHandler(event)" xmlns:component1="org.mxhero.console.commons.feature.component.*">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import org.mxhero.console.features.application.resources.FeaturesImages;
			import org.mxhero.console.features.application.resources.RuleViewProperties;
			import org.mxhero.console.frontend.domain.FeatureRuleDirection;
			
			public var checkRestrictionFunction:Function;
			
			[Bindable]
			public var changeAccountFunction:Function;
			
			[Bindable]
			public var changeDomainFunction:Function;
			
			[Bindable]
			public var forceManaged:Boolean=false;
			
			[Bindable]
			public var isClickEnabled:Boolean=true;
			
			[Bindable]
			public var direction:FeatureRuleDirection;

			[Bindable]
			private var effectsEnabled:Boolean = true;
			
			private var _isRestricted:Boolean=false;
					
			public function chechRestriction():void{
				if(checkRestrictionFunction!=null){
					checkRestrictionFunction();
				}
			}
			
			protected function clickHandler(fromState:String):void
			{
				if(isClickEnabled){
					if(currentState==fromState){
						currentState="all";
					} else {
						currentState=fromState;
					}
				}
			}
			
			[Bindable(event="stateChanged")]
			public function get isDomainManaged():Boolean
			{
				if(forceManaged){
					return true;
				}
				if(currentState=="all" || currentState=="anyone"){
					return false;
				} else if (currentState=="domain" && 
							domainFT.ipeComboBox != null &&
							domainFT.ipeComboBox.currentState=="show"){
					return true;
				} else if (currentState=="group" && 
							groupFT.ipeDropDownList!=null &&
							groupFT.ipeDropDownList.currentState=="show"){
					return true;
				} else if (currentState=="individual" && 
							individualFT.ipeComboBox!=null &&
							individualFT.ipeComboBox.currentState=="show"){
					return true;
				}
				return false;
			}
			
			[Bindable(event="stateChanged")]
			public function get isSelected():Boolean
			{
				if(currentState=="anyone"){
					return true;
				} else if (currentState=="domain" &&
					domainFT.ipeComboBox!=null &&
					domainFT.ipeComboBox.currentState=="show"){
					return true;
				} else if (currentState=="group" &&
					groupFT.ipeDropDownList!=null &&
					groupFT.ipeDropDownList.currentState=="show"){
					return true;
				} else if (currentState=="individual" &&
					individualFT.ipeComboBox!=null &&
					individualFT.ipeComboBox.currentState=="show"){
					return true;
				}
				return false;
			}
			
			protected function notifyChange():void
			{
				dispatchEvent(new Event("stateChanged"));
				chechRestriction();
				if(currentState=="anyone"){
					if(anyoneFT.isSelected){
						direction.directionType=FeatureRuleDirection.ANYONEELSE;
						direction.freeValue=FeatureRuleDirection.ANYONEELSE;
						direction.account=null;
						direction.group=null;
						direction.domain=null;
					} else {
						direction.directionType=FeatureRuleDirection.ANYONE;
						direction.freeValue=FeatureRuleDirection.ANYONE;
						direction.account=null;
						direction.group=null;
						direction.domain=null;
					}
				} else if (currentState=="domain" &&
					domainFT.ipeComboBox != null &&
					domainFT.ipeComboBox.currentState=="show"){
					direction.directionType=FeatureRuleDirection.DOMAIN;
					direction.freeValue=domainFT.ipeComboBox.selectedLabel;
					if(domainFT.ipeComboBox.selectedItem!=null){
						direction.domain=domainFT.ipeComboBox.selectedItem.domain.domain;
						direction.account=null;
						direction.group=null;
					}else if(!forceManaged) {
						direction.account=null;
						direction.group=null;
						direction.domain=null;
					}
				} else if (currentState=="group" &&
					groupFT.ipeDropDownList!=null &&
					groupFT.ipeDropDownList.currentState=="show"){
					direction.directionType=FeatureRuleDirection.GROUP;
					direction.freeValue=groupFT.ipeDropDownList.selectedLabel;
					if(groupFT.ipeDropDownList.selectedItem!=null){
						direction.group=groupFT.ipeDropDownList.selectedItem.name;
						direction.domain=groupFT.ipeDropDownList.selectedItem.domain;
						direction.account=null;
					}else {
						direction.account=null;
						direction.group=null;
						direction.domain=null;
					}
				} else if (currentState=="individual" && 
					individualFT.ipeComboBox!=null &&
					individualFT.ipeComboBox.currentState=="show"){
					direction.directionType=FeatureRuleDirection.INDIVIDUAL;
					direction.freeValue=individualFT.ipeComboBox.selectedLabel;
					if(individualFT.ipeComboBox.selectedItem!=null){
						direction.account=individualFT.ipeComboBox.selectedItem.account.account;
						direction.domain=individualFT.ipeComboBox.selectedItem.account.domain;
						direction.group=null;
					}else if(!forceManaged) {
						direction.account=null;
						direction.group=null;
						direction.domain=null;
					}
				}
			}

			private function elementNextState(isRestricted:Boolean):String{
				if(isRestricted){
					return "restricted";
				}
				return "active";
			}
			
			[Bindable(event="stateChanged")]
			private function isRestrictedVisible(isSelected:Boolean,isRestricted:Boolean):Boolean{
				var returnValue:Boolean = (!isSelected && isRestricted);
				return returnValue;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(direction==null){
					return;
				}

				domainFT.currentState="inactive";
				individualFT.currentState="inactive";
				groupFT.currentState="inactive";
				
				if(direction.directionType==FeatureRuleDirection.ANYONE){
					currentState="anyone";
					anyoneFT.isSelected=false;
				} else if(direction.directionType==FeatureRuleDirection.ANYONEELSE){
					currentState="anyone";
					anyoneFT.isSelected=true;
				} else if(direction.directionType==FeatureRuleDirection.DOMAIN && 
					domainFT !=null){
					if(direction.domain!=null){
						for each(var domain:Object in domainFT.ipeComboBox.comboBox.dataProvider){
							if(domain.alias==direction.domain){
								domainFT.ipeComboBox.comboBox.selectedItem=domain;
								domainFT.ipeComboBox.selectedItem=domain;
								break;
							}
						}
					}
					domainFT.ipeComboBox.selectedLabel=direction.freeValue;
					domainFT.ipeComboBox.currentState="show";
					currentState="domain";
				}else if(direction.directionType==FeatureRuleDirection.GROUP &&
					groupFT!=null && groupFT.ipeDropDownList!=null){
					if(direction.group!=null && direction.domain!=null){
						for each(var group:Object in groupFT.ipeDropDownList.dropDownList.dataProvider){
							if(group.name==direction.group && group.domain==direction.domain){
								groupFT.ipeDropDownList.dropDownList.selectedItem=group;
								groupFT.ipeDropDownList.selectedItem=group;
								break;
							}
						}
					}
					groupFT.ipeDropDownList.selectedLabel=direction.freeValue;
					groupFT.ipeDropDownList.currentState="show";
					currentState="group";
				} else if(direction.directionType==FeatureRuleDirection.INDIVIDUAL && 
					individualFT !=null && individualFT.ipeComboBox!=null){
					if(direction.account!=null && direction.domain!=null){
						for each(var account:Object in individualFT.ipeComboBox.comboBox.dataProvider){
							if(account.name==direction.account && account.domain==direction.domain){
								individualFT.ipeComboBox.comboBox.selectedItem=account;
								individualFT.ipeComboBox.selectedItem=account;
								break;
							}
						}
					} 
					individualFT.ipeComboBox.selectedLabel=direction.freeValue;		
					individualFT.ipeComboBox.currentState="show";
					currentState="individual";
				}
			}

			[Bindable]
			public function get isRestricted():Boolean
			{
				return _isRestricted;
			}
			
			public function set isRestricted(value:Boolean):void
			{
				dispatchEvent(new Event("stateChanged"));
				if(value==true && _isRestricted==false){
					if(currentState=="anyone"){
						currentState="all";
					} else if(currentState=="domain"){
						domainFT.currentState="restricted";
						if(domainFT.ipeComboBox.comboBox.selectedItem==null){
							domainFT.ipeComboBox.currentState="edit";
							domainFT.ipeComboBox.comboBox.text="";
						}
					} else if(currentState=="individual"){
						individualFT.currentState="restricted";
						if(individualFT.ipeComboBox.comboBox.selectedItem==null){
							individualFT.ipeComboBox.currentState="edit";
						}
					} 
				}else if(value==false && _isRestricted==true){
					if (currentState=="domain"){
						domainFT.currentState="active";
					} else if (currentState=="individual"){
						individualFT.currentState="active";
					}
				}
				_isRestricted = value;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Resize id="fadeout" widthFrom="24" widthTo="0" duration="0"/>
		<s:Resize id="fadein" widthFrom="0" widthTo="24" duration="0"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="all"/>
		<s:State name="anyone"/>
		<s:State name="domain"/>
		<s:State name="group"/>
		<s:State name="individual"/>
	</s:states>
	
	<element:Anyone id="anyoneFT" 
					parentStateFunction="{clickHandler}"
					childState="anyone"
					excludeFrom="domain,group,individual" 
					currentState.anyone="active"
					notifyChange="{notifyChange}"
					enabled="{!isRestricted}"
					isClickEnabled="{isClickEnabled}"
					/>
	
	<element:Domain id="domainFT" 
					parentStateFunction="{clickHandler}"
					childState="domain"
					excludeFrom="anyone,group,individual"
					changeFunction="{changeDomainFunction}"
					notifyChange="{notifyChange}"
					isClickEnabled="{isClickEnabled}"/>
	<element:AccountsGroup id="groupFT" 
						   parentStateFunction="{clickHandler}"
						   childState="group"
						   excludeFrom="anyone,domain,individual"
						   notifyChange="{notifyChange}"/>
	<element:Individual id="individualFT" 
						parentStateFunction="{clickHandler}"
						childState="individual"
						excludeFrom="anyone,domain,group"
						changeFunction="{changeAccountFunction}"
						notifyChange="{notifyChange}"/>
	
	<s:HGroup gap="0">
		<component1:GlowButton
			id="restrictedImage"
			source="{FeaturesImages.RESTRICTED}" 
			visible="{isRestrictedVisible(isSelected,isRestricted)}" 
			maxGlow="15.0"
			toolTip="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.RESTRICTED_TOOLTIP)}"
			showEffect="{fadein}"
			hideEffect="{fadeout}"/>
	</s:HGroup>
	
	<s:transitions>
		<s:Transition fromState="all" toState="anyone"> 
			<s:Sequence effectStart="{anyoneFT.currentState='active'}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{domainFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="anyone" toState="all"> 
			<s:Sequence effectStart="{anyoneFT.currentState='inactive'}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{domainFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="all" toState="domain"> 
			<s:Sequence effectEnd="{domainFT.currentState=elementNextState(isRestricted)}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="domain" toState="all"> 
			<s:Sequence effectStart="{domainFT.currentState='inactive'}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="all" toState="group"> 
			<s:Sequence effectEnd="{groupFT.currentState='active'}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="group" toState="all"> 
			<s:Sequence effectStart="{groupFT.currentState='inactive'}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="all" toState="individual"> 
			<s:Sequence effectEnd="{individualFT.currentState=elementNextState(isRestricted)}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="individual" toState="all"> 
			<s:Sequence effectStart="{individualFT.currentState='inactive'}" 
						suspendBackgroundProcessing="true"
						duration="0">
<!--				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>-->
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
</s:HGroup>
