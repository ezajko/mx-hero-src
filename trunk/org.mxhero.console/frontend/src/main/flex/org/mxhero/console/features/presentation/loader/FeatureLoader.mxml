<?xml version="1.0" encoding="utf-8"?>
<!--
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:ModuleLoader xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 error="errorHandler(event)"
				 progress="progressHandler(event)"
				 loading="loadingHandler(event)"
				 ready="readyHandler(event)" 
				 unload="moduleloader1_unloadHandler(event)"
				 xmlns:component="org.mxhero.console.commons.component.*"
				 creationComplete="creationCompleteHandler(event)" 
				 xmlns:component1="org.mxhero.console.commons.feature.component.*" 
				 xmlns:parsley="http://www.spicefactory.org/parsley"
				 applicationDomain="{ApplicationDomain.currentDomain}">
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ModuleEvent;
			
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.features.application.resources.RuleViewProperties;
			import org.mxhero.console.features.presentation.rule.RuleViewPM;

			[Bindable]
			public var featureModule:Object;
			
			[Inject]
			[Bindable]
			public var model:RuleViewPM;
			
			[Bindable]
			public var loaded:Boolean=false;
			
			protected function errorHandler(event:ModuleEvent):void
			{
				progress.label=resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.FEATURE_MODULE_ERROR);
				loaded=false;
			}

			protected function progressHandler(event:ModuleEvent):void
			{
				if(progress!=null){
					progress.label=resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.FEATURE_MODULE_LOADING)
						+" "+Math.round((event.bytesLoaded/event.bytesTotal) * 100) +"%";
				}
			}

			protected function loadingHandler(event:Event):void
			{
				loaded=false;
				this.applicationDomain=ApplicationDomain.currentDomain;
				currentState="loading";
			}

			protected function readyHandler(event:ModuleEvent):void
			{
				//IFeature until RSL livraries implementation this just gives problems,
				//main application and modules has the same class but with diferent implementations
				//lets keep it simple for now.
				this.featureModule= this.child;
				currentState="loaded";
				if(featureModule!=null){
					this.featureModule.setProperties(model.rule.properties);
				}
				featureModule.applicationContext=model.context;
				loaded=true;
				model.refresh(false);
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				RuleViewPM.realoadExternal=this.reload;
			}

			public function reload():void{
				loaded=false;
				this.unloadModule();
				this.loadModule();
			}
			

			protected function moduleloader1_unloadHandler(event:ModuleEvent):void
			{
				loaded=false;
				featureModule=null;
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<mx:states>
		<s:State name="loading"/>
		<s:State name="loaded"/>
	</mx:states>
	
	<mx:ProgressBar id="progress" 
					source="{this}" 
					excludeFrom="loaded"
					color="#FFFFFF"
					labelPlacement="center"/>
</mx:ModuleLoader>
