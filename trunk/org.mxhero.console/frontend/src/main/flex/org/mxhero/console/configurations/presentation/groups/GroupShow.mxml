<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   close="{cancelBtt_clickHandler()}"
			   enabled="{!model.isLoading}"
			   xmlns:component="org.mxhero.console.commons.component.*"
			   creationComplete="titlewindow1_creationCompleteHandler(event)"
			   title.new="{resourceManager.getString(GroupsProperties.NAME,GroupsProperties.ADD_NEW_GROUP_LABEL)}" 
			   title.edit="{group.name}"
			   xmlns:cairngorm="http://ns.adobe.com/cairngorm" 
			   xmlns:parsley="http://www.spicefactory.org/parsley" xmlns:component1="org.mxhero.console.commons.feature.component.*">

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import org.mxhero.console.commons.infrastructure.parser.StringUtils;
			import org.mxhero.console.commons.resources.CommonsProperties;
			import org.mxhero.console.commons.resources.ImageResources;
			import org.mxhero.console.commons.skin.TitleLessPanel;
			import org.mxhero.console.configurations.application.resources.AccountsProperties;
			import org.mxhero.console.configurations.application.resources.GroupsProperties;
			import org.mxhero.console.frontend.domain.EmailAccount;
			import org.mxhero.console.frontend.domain.EmailAccountAlias;
			import org.mxhero.console.frontend.domain.Group;
			
			[Bindable]
			public var group:Group;
			[Bindable]
			public var model:GroupsViewPM;
			
			protected function cancelBtt_clickHandler(event:MouseEvent=null):void
			{
				PopUpManager.removePopUp(this);
			}

			protected function saveBtt_clickHandler(event:MouseEvent):void
			{
				if(currentState=="new"){
					validateAll.validate();
					if(validateAll.isValid){
						model.insertGroup(group);
					}
				}else if(currentState=="edit"){
					model.updateGroup(group);
				}
			}

			protected function aliaseslabelFunction(item:Object, column:DataGridColumn):String{
				var label:String="";
				if(item.aliases!=null){
					for each (var alias:Object in item.aliases){
						var accountAlias:EmailAccountAlias = alias as EmailAccountAlias;
						label=label+accountAlias.name+"@"+accountAlias.domain+'\n';
					}
					label=StringUtils.trimRight(label);
				}
				return label;
			}
			
			protected function groupAccountsDg_itemDoubleClickHandler(event:ListEvent):void
			{
				var accounts:ArrayCollection = new ArrayCollection();
				accounts.addItem(event.itemRenderer.data as EmailAccount);
				model.removeMember(accounts);
			}


			protected function noGroupAccountsDg_itemDoubleClickHandler(event:ListEvent):void
			{
				var accounts:ArrayCollection = new ArrayCollection();
				accounts.addItem(event.itemRenderer.data as EmailAccount);
				model.addMember(accounts);
			}


			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				if(currentState=="new"){
					callLater(this.nameTi.setFocus);
				}else{
					callLater(this.descriptionTi.setFocus);
				}
			}

			protected function prevGroupButton_clickHandler(event:MouseEvent):void
			{
				model.loadAccountsByGroup(model.groupAccounts.actualPage-1);
			}
			
			protected function nextGroupButton_clickHandler(event:MouseEvent):void
			{
				model.loadAccountsByGroup(model.groupAccounts.actualPage+1);				
			}
			
			protected function prevNoGroupButton_clickHandler(event:MouseEvent):void
			{
				model.loadAccountsWithNoGroup(model.noGroupAccounts.actualPage-1);
			}
			
			protected function nextNoGroupButton_clickHandler(event:MouseEvent):void
			{
				model.loadAccountsWithNoGroup(model.noGroupAccounts.actualPage+1);	
			}
			
			
			protected function noGroupAccountsDg_dragDropHandler(event:DragEvent):void
			{
				model.removeMember(new ArrayCollection((event.dragInitiator as DataGrid).selectedItems));
			}
			
			protected function groupAccountsDg_dragDropHandler(event:DragEvent):void
			{
				model.addMember(new ArrayCollection((event.dragInitiator as DataGrid).selectedItems));
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<cairngorm:ValidatorGroup id="validateAll">
			<cairngorm:validators>
				<mx:StringValidator required="true" 
									includeIn="new"
									source="{nameTi}" 
									property="text" 
									trigger="{saveBtt}" 
									triggerEvent="click"/>
			</cairngorm:validators>
		</cairngorm:ValidatorGroup>
	</fx:Declarations>
	
	<s:states> 
		<s:State name="new"/>    
		<s:State name="edit"/>
	</s:states> 
	
	<s:layout>
		<s:VerticalLayout paddingLeft="0" paddingBottom="0" paddingRight="0" paddingTop="0" gap="0"/>
	</s:layout>
	
	<component:ErrorText id="errorText" width="100%" soundEnabled="{model.context.applicationUser.soundsEnabled}"/>
	
	<s:Form>
		<s:layout>
			<s:FormLayout gap="10" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="0" />
		</s:layout>
		<s:HGroup width="100%">
			<s:FormItem includeIn="new" required="true" label="{resourceManager.getString(GroupsProperties.NAME,GroupsProperties.FORM_NAME_LABEL)}">
				<s:TextInput id="nameTi" text="@{group.name}"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString(GroupsProperties.NAME,GroupsProperties.FORM_DESCRIPTION_LABEL)}" width="100%">
				<s:TextInput id="descriptionTi" text="@{group.description}" width="100%"/>
			</s:FormItem>
		</s:HGroup>
		<s:Spacer height="10"/>
		<component1:LabelExpanded excludeFrom="new" 
								  width="100%" 
								  explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" 
								  hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.REDUCED_LABEL)}" 
								  labelText="{resourceManager.getString(GroupsProperties.NAME,GroupsProperties.SELECT_MEMBERS_LABEL)}" 
								  expandedText="{resourceManager.getString(GroupsProperties.NAME,GroupsProperties.SELECT_MEMBERS_EXPANDED)}"/>
		<s:HGroup excludeFrom="new">
			<s:Panel skinClass="{TitleLessPanel}"
					 cornerRadius="0">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:Label 
					fontWeight="bold"
					text="{resourceManager.getString(GroupsProperties.NAME,GroupsProperties.SHOW_MEMBERS_LABEL)}"/>
				<mx:DataGrid id="groupAccountsDg"
							dataProvider="{model.groupAccounts.elements}" 
							width="100%" 
							dropShadowVisible="false"
							minWidth="420"
							height="300"
							dragEnabled="true"
							dropEnabled="true"
							allowMultipleSelection="true"
							allowDragSelection="true"
							dragMoveEnabled="true"
							doubleClickEnabled="true"
							mouseChildren="true"
							dragDrop="groupAccountsDg_dragDropHandler(event)"
							itemDoubleClick="groupAccountsDg_itemDoubleClickHandler(event)">
					<mx:columns>
						<mx:DataGridColumn dataField="account" 
										   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ACCOUNT_LABEL)}" 
										   minWidth="180"/>
						<mx:DataGridColumn dataField="aliases"
										   labelFunction="{aliaseslabelFunction}"
										   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ALIASES_LABEL)}" 
										   minWidth="100"
										   sortable="false"/>
					</mx:columns>
				</mx:DataGrid>
				<s:controlBarContent>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ACCOUNTS_TOTAL)+' '+model.groupAccounts.totalElements}"/>
						<mx:Spacer width="100%"/>
						<component1:GlowButton id="prevGroupButton"
											   maxGlow="10.0" 
											   source="{ImageResources.LEFT_ICO}"
											   enabled="{model.groupAccounts.hasPrev()}"
											   click="prevGroupButton_clickHandler(event)"
											   />
						<s:Label text="{(model.groupAccounts.totalElements==0)?0:(model.groupAccounts.actualPage)}"/>
						<s:Label text="{'/'}"/>
						<s:Label text="{(model.groupAccounts.totalElements==0)?0:(model.groupAccounts.totalPages)}"/>
						<component1:GlowButton id="nextGroupButton"
											   maxGlow="10.0" 
											   source="{ImageResources.RIGHT_ICO}"
											   enabled="{model.groupAccounts.hasNext()}"
											   click="nextGroupButton_clickHandler(event)"/>
					</s:HGroup>
				</s:controlBarContent>				
			</s:Panel>

			<s:Panel skinClass="{TitleLessPanel}"
					 cornerRadius="0">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<s:Label 
					fontWeight="bold"
					text="{resourceManager.getString(GroupsProperties.NAME,GroupsProperties.SHOW_NO_GROUP_ACCOUNTS_LABEL)}"/>
				<mx:DataGrid id="noGroupAccountsDg"
							dataProvider="{model.noGroupAccounts.elements}" 
							width="100%" 
							dropShadowVisible="false" 
							minWidth="420"
							height="300"
							dragEnabled="true"
							dropEnabled="true"
							allowMultipleSelection="true"
							allowDragSelection="true"
							dragMoveEnabled="true"
							doubleClickEnabled="true"
							mouseChildren="true"
							dragDrop="noGroupAccountsDg_dragDropHandler(event)"
							itemDoubleClick="noGroupAccountsDg_itemDoubleClickHandler(event)">
					<mx:columns>
						<mx:DataGridColumn dataField="account" 
										   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ACCOUNT_LABEL)}" 
										   minWidth="180"/>
						<mx:DataGridColumn dataField="aliases"
										   labelFunction="{aliaseslabelFunction}"
										   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ALIASES_LABEL)}" 
										   minWidth="100"
										   sortable="false"/>
					</mx:columns>
				</mx:DataGrid>
				<s:controlBarContent>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ACCOUNTS_TOTAL)+' '+model.noGroupAccounts.totalElements}"/>
						<mx:Spacer width="100%"/>
						<component1:GlowButton id="prevNoGroupButton"
											   maxGlow="10.0" 
											   source="{ImageResources.LEFT_ICO}"
											   enabled="{model.noGroupAccounts.hasPrev()}"
											   click="prevNoGroupButton_clickHandler(event)"
											   />
						<s:Label text="{(model.noGroupAccounts.totalElements==0)?0:(model.noGroupAccounts.actualPage)}"/>
						<s:Label text="{'/'}"/>
						<s:Label text="{(model.noGroupAccounts.totalElements==0)?0:(model.noGroupAccounts.totalPages)}"/>
						<component1:GlowButton id="nextNoGroupButton"
											   maxGlow="10.0" 
											   source="{ImageResources.RIGHT_ICO}"
											   enabled="{model.noGroupAccounts.hasNext()}"
											   click="nextNoGroupButton_clickHandler(event)"/>
					</s:HGroup>
				</s:controlBarContent>	
			</s:Panel>
		</s:HGroup>

		<s:HGroup horizontalAlign="right" width="100%" paddingTop="15">
			<s:Button id="saveBtt" label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.SAVE_LABEL)}" 
					  click="saveBtt_clickHandler(event)"/>
			<s:Button id="cancelBtt" label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.CANCEL_LABEL)}" click="cancelBtt_clickHandler(event)"/>
		</s:HGroup>
	</s:Form>
	
</s:TitleWindow>
