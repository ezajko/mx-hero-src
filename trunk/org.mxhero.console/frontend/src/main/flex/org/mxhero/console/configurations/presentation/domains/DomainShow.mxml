<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:parsley="http://www.spicefactory.org/parsley"
		 close="cancelBtt_clickHandler()" 
		 xmlns:cairngorm="http://ns.adobe.com/cairngorm" 
		 xmlns:component="org.mxhero.console.commons.component.*"
		 enabled="{!model.isLoading}"
		 creationComplete="titlewindow1_creationCompleteHandler(event)"
		 title.new="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.ADD_NEW_DOMAIN_LABEL)}"
		 title.edit="{this.domainTi.text}" xmlns:component1="org.mxhero.console.commons.feature.component.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.resources.CommonsProperties;
			import org.mxhero.console.commons.resources.ErrorsProperties;
			import org.mxhero.console.commons.resources.ImageResources;
			import org.mxhero.console.commons.utils.Regex;
			import org.mxhero.console.configurations.application.resources.DomainsShowProperties;
			import org.mxhero.console.frontend.domain.Domain;
			
			import spark.events.TextOperationEvent;

			[Bindable]
			public var model:DomainsViewPM;

			[Bindable]
			public var domain:Domain;
			
			private var email:String;
			
			public function cancelBtt_clickHandler(event:MouseEvent=null):void
			{
				PopUpManager.removePopUp(this);
			}

			protected function saveBtt_clickHandler(event:MouseEvent):void
			{
				validateAll.validate();
				if(validateAll.isValid){
					if(passwordTi.text.length>0 && passwordTi.text!=confirmTi.text && this.administratorCheck.selected){
						confirmTi.errorString=resourceManager.getString(ErrorsProperties.NAME,ErrorsProperties.PASSWORD_CONFIRM_ERROR);
							return;
					}
					if(currentState=="new"){
						model.insertDomain(domain,administratorCheck.selected,passwordTi.text,emailTi.text);
					}
					if(currentState=="edit"){
						model.updateDomain(domain,administratorCheck.selected,passwordTi.text,emailTi.text);
					}
				}
			}

			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				if(domain.owner!=null){
					administratorCheck.selected=true;
				}else{
					administratorCheck.selected=false;
				}
				callLater(this.serverTi.setFocus);
				PopUpManager.centerPopUp(this);
			}


			protected function addAliasBtt_clickHandler(event:MouseEvent):void
			{
				var textToValidate:String = StringUtil.trim(aliasTi.text).toLowerCase();
				if(aliasTi.text!=null && textToValidate.length>0){
					var results:Array=aliasV.validate(textToValidate).results;
					if(results!=null){
						if(results.length>0){
							for each(var result:ValidationResult in results){
								if(result.isError){
									aliasTi.errorString= result.errorMessage;
									return;
								}
							}
						}
					}
					aliasTi.errorString="";
					if(domain.aliases==null){
						domain.aliases=new ArrayCollection();
					}
					aliasTi.text="";
					for each(var alias:String in domain.aliases){
						if(alias==textToValidate){
							return;
						}
					}
					domain.aliases.addItem(textToValidate);
					//model.insertAlias(textToValidate);
					
				}
			}


			protected function image1_dragEnterHandler(event:DragEvent):void
			{
				if(domain.domain!=(event.dragInitiator as List).selectedItem as String){
					DragManager.acceptDragDrop(event.currentTarget as Image);
				}
			}
			

			protected function aliasList_keyUpHandler(event:KeyboardEvent):void
			{
				if(event.keyCode==46)
				{
					if(aliasList.selectedItem!=null && domain.domain!=aliasList.selectedItem as String){
						domain.aliases.removeItemAt(domain.aliases.getItemIndex(aliasList.selectedItem));
					}
				}
			}


			protected function tashImg_dragDropHandler(event:DragEvent):void
			{
				effectDrop.play();
				//model.removeAlias((event.dragInitiator as List).selectedItem);
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:Sequence id="effectDrop" target="{tashImg}" >
			<s:AnimateFilter duration="150" id="blur">
				<s:bitmapFilter>
					<s:BlurFilter blurX="10.0" 
								  blurY="10.0" />
				</s:bitmapFilter>
			</s:AnimateFilter>
			<s:AnimateFilter duration="150" id="unblur">
				<s:bitmapFilter>
					<s:BlurFilter blurX="0.0" 
								  blurY="0.0" />
				</s:bitmapFilter>
			</s:AnimateFilter>		
		</s:Sequence>

		<mx:RegExpValidator id="aliasV"  
							required="true" 
							expression="{Regex.domainRegex}"
							noMatchError="{resourceManager.getString(ErrorsProperties.NAME,ErrorsProperties.INVALID_DOMAIN)}"/>

		
		<cairngorm:ValidatorGroup id="validateAll">
			<cairngorm:validators>
				<mx:RegExpValidator id="domainV"  
									required="true" 
									expression="{Regex.domainRegex}"
									noMatchError="{resourceManager.getString(ErrorsProperties.NAME,ErrorsProperties.INVALID_DOMAIN)}"
									property="text" source="{domainTi}" trigger="{saveBtt}" triggerEvent="click"/>
				<mx:StringValidator id="serverV" required="true" property="text" source="{serverTi}" trigger="{saveBtt}" triggerEvent="click"/>
			</cairngorm:validators>
			<cairngorm:groups>
				<cairngorm:ValidatorGroup id="adminValidators" enabled="{administratorCheck.selected}">
					<cairngorm:validators>
						<mx:StringValidator id="passwordV" required.new="true" required.edit="false" property="text" source="{passwordTi}" enabled="{administratorCheck.selected}" trigger="{saveBtt}" triggerEvent="click" />
						<mx:StringValidator id="confirmV" required.new="true" required.edit="false" property="text" source="{confirmTi}" enabled="{administratorCheck.selected}" trigger="{saveBtt}" triggerEvent="click"/>
						<mx:EmailValidator id="emailV" required="true" property="text" source="{emailTi}" enabled="{administratorCheck.selected}" trigger="{saveBtt}" triggerEvent="click"/>						
					</cairngorm:validators>
				</cairngorm:ValidatorGroup>				
			</cairngorm:groups>
		</cairngorm:ValidatorGroup>
		
	</fx:Declarations>

	<s:states> 
		<s:State name="new"/>    
		<s:State name="edit"/>
	</s:states> 
	
	<s:layout>
		<s:VerticalLayout paddingLeft="0" paddingBottom="0" paddingRight="0" paddingTop="0" gap="0"/>
	</s:layout>
	<component:ErrorText id="errorText" width="100%" soundEnabled="{model.context.applicationUser.soundsEnabled}"/>
	
	<s:HGroup paddingLeft="20" paddingRight="20" paddingBottom="20" paddingTop="20" gap="20">
		<s:Form>
			<s:layout>
				<s:FormLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
			</s:layout>
			<s:VGroup width="100%">
				<component1:LabelExpanded width="100%" 
										 labelText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_SERVER_LABEL)}"
										 explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPLAIN_LABEL)}"
										 hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.HIDE_LABEL)}"
										 expandedText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_SERVER_EXPLAIN_TEXT)}"/>		
				
				<mx:FormItem required="true" width="100%">
					<s:TextInput id="serverTi" width="100%" text="@{domain.server}"/>
				</mx:FormItem>
			</s:VGroup>	
			<s:FormItem required="true" label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_DOMAIN_LABEL)}" width="100%" fontWeight.new="bold">
				<s:TextInput id="domainTi" width="100%"  text="@{domain.domain}" enabled.edit="false" enabled.new="true" />
			</s:FormItem>
			<s:CheckBox id="administratorCheck" label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ADMINISTRATOR_CHECK_LABEL)}" selected="false"/>
			<s:FormItem required="{administratorCheck.selected}" label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ADMINISTRATOR_PASSWORD_LABEL)}" width="100%">
				<s:TextInput id="passwordTi" displayAsPassword="true" enabled="{administratorCheck.selected}" width="100%"/>
			</s:FormItem>
			<s:FormItem required="{administratorCheck.selected}" label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ADMINISTRATOR_CONFIRM_LABEL)}" width="100%">
				<s:TextInput id="confirmTi" displayAsPassword="true" enabled="{administratorCheck.selected}" width="100%"/>
			</s:FormItem>
			<s:FormItem required="{administratorCheck.selected}" label="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ADMINISTRATOR_EMAIL_LABEL)}" width="100%">
				<s:TextInput id="emailTi" 
							 text.edit="@{domain.owner.email}"
							 enabled="{administratorCheck.selected}"
							 width="100%"/>
			</s:FormItem>
		</s:Form>
		
		<s:HGroup includeIn="edit" verticalAlign="bottom" height="100%">
			<s:VGroup height="100%">
				<component1:LabelExpanded labelText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ALIASES_LABEL)}" 
										 explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" 
										 hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" 
										 expandedText="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ALIASES_EXPLAIN)}" 
										 width="100%"/>
					<s:Form defaultButton="{addAliasBtt}">
						<s:layout>
							<s:FormLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
						</s:layout>
						<s:HGroup>
							<s:TextInput id="aliasTi"/>
							<s:Button id="addAliasBtt" 
									  label="Add" 
									  click="addAliasBtt_clickHandler(event)" 
									  buttonMode="true"/>							
						</s:HGroup>
					</s:Form>
				<s:List id="aliasList"
						dataProvider="{domain.aliases}" 
						width="100%" 
						height="100%"
						maxHeight="140"
						dragEnabled="true" 
						dragMoveEnabled="true"
						keyUp="aliasList_keyUpHandler(event)"/>				
			</s:VGroup>
			<s:VGroup horizontalAlign="center">
				<s:Label text="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.DRAG_HERE)}" 
						 styleName="draghere"
						 buttonMode="true"
						 toolTip="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ALIASES_EXPLAIN)}"/>
				<s:Image id="tashImg" 
						  source="{ImageResources.TRASHCAN}" dragEnter="image1_dragEnterHandler(event)" 
						  dragDrop="tashImg_dragDropHandler(event)"
						  buttonMode="true"
						  toolTip="{resourceManager.getString(DomainsShowProperties.NAME,DomainsShowProperties.FORM_ALIASES_EXPLAIN)}"/>
			</s:VGroup>
		</s:HGroup>		
	</s:HGroup>
	
	<s:HGroup horizontalAlign="right" width="100%" paddingLeft="20" paddingRight="20" paddingBottom="20" >
		<s:Button id="saveBtt" label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.SAVE_LABEL)}" 
				  click="saveBtt_clickHandler(event)"
				  buttonMode="true"/>
		<s:Button id="cancelBtt" label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.CANCEL_LABEL)}" 
				  click="cancelBtt_clickHandler(event)" 
				  buttonMode="true"/>
	</s:HGroup>
	
</s:TitleWindow>
