<!---
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:parsley="http://www.spicefactory.org/parsley"
			   close="cancelBtt_clickHandler()" 
			   xmlns:cairngorm="http://ns.adobe.com/cairngorm" 
			   xmlns:component="org.mxhero.console.commons.component.*"
			   enabled="{!model.isLoading}"
			   title.new="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADD_NEW_EMAIL_LABEL)}"
			   title.edit="{account.account+'@'+model.context.selectedDomain.domain}"
			   creationComplete="creationCompleteHandler(event)" xmlns:component1="org.mxhero.console.commons.feature.component.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.infrastructure.parser.StringUtils;
			import org.mxhero.console.commons.resources.CommonsProperties;
			import org.mxhero.console.commons.resources.ErrorsProperties;
			import org.mxhero.console.commons.resources.ImageResources;
			import org.mxhero.console.configurations.application.resources.AccountsProperties;
			import org.mxhero.console.frontend.domain.EmailAccount;
			import org.mxhero.console.frontend.domain.EmailAccountAlias;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			private var _emailStr:String;
			
			[Bindable]
			public var domains:ArrayCollection;
			
			[Bindable]
			public var model:AccountsViewPM;
			
			[Bindable]
			public var account:EmailAccount;

			public function cancelBtt_clickHandler(event:MouseEvent=null):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function saveBtt_clickHandler(event:MouseEvent):void
			{
				emailStr;
				validateAll.validate();

				if(validateAll.isValid){
					
					if(groupDdl.selectedItem!=null){
						account.group=groupDdl.selectedItem.name;
					}else{
						account.group=null;
					}
					
					if(currentState=="new"){
						account.dataSource=EmailAccount.MANUAL;
						model.insertAccount(account);
					}
					if(currentState=="edit" || currentState=="managed"){
						model.updateDomain(account);
					}
				}
			}
			
			[Bindable]
			public function get emailStr():String{
				if(model==null){
					return "";
				}
				if(emailTi.text==null){
					return '@'+model.context.selectedDomain.domain;
				}
				
				return emailTi.text+'@'+model.context.selectedDomain.domain;
			}
			
			public function set emailStr(value:String):void{
				_emailStr=value;
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(currentState=="new"){
					groupDdl.selectedIndex=-1;
					account.group=null;
					callLater(this.emailTi.setFocus);
				} else {
					callLater(groupDdl.setFocus);
					groupDdl.selectedIndex=-1;
					for each(var group:Object in groupDdl.dataProvider){
						if(group.name==account.group){
							groupDdl.selectedIndex=groupDdl.dataProvider.getItemIndex(group);
							break;
						}
					}
				}
			}


			protected function addAliasBtt_clickHandler(event:MouseEvent):void
			{
				var name:String=StringUtils.trim(aliasTi.text).toLowerCase();
				var result:ValidationResultEvent = aliasV.validate(name+"@"+domainAliasDdl.selectedItem);

				 if(result!=null && result.results!=null && result.results.length>0){
					 for each(var resultValue:ValidationResult in result.results){
						 if(resultValue.isError){
							 addAliasBtt.errorString=resultValue.errorMessage;
							 return;
						 }
					 }
				 }
				 addAliasBtt.errorString="";
				 for each(var item:Object in account.aliases){
					 var alias:EmailAccountAlias = item as EmailAccountAlias;
					 if(alias.name==name && alias.domain==domainAliasDdl.selectedItem){
						 aliasTi.text="";
						 return;
					 }
				 }
				 var newAlias:EmailAccountAlias = new EmailAccountAlias();
				 newAlias.domain=domainAliasDdl.selectedItem;
				 newAlias.name=name;
				 newAlias.dataSource=EmailAccountAlias.MANUAL;
				 account.aliases.addItem(newAlias);
				 aliasTi.text="";
			}


			protected function aliasList_keyUpHandler(event:KeyboardEvent):void
			{
				if(event.keyCode==46)
				{
					if(aliasList.selectedItem!=null){
						var alias:EmailAccountAlias = aliasList.selectedItem as EmailAccountAlias;
						if((alias.name!=account.account || alias.domain!=account.domain) && alias.dataSource==EmailAccountAlias.MANUAL ){
							account.aliases.removeItemAt(account.aliases.getItemIndex(aliasList.selectedItem));
						}
					}
				}
			}


			protected function tashImg_dragEnterHandler(event:DragEvent):void
			{
				var alias:EmailAccountAlias = (event.dragInitiator as List).selectedItem as EmailAccountAlias;
				if((alias.name!=account.account || alias.domain!=account.domain) && alias.dataSource==EmailAccountAlias.MANUAL ){
					DragManager.acceptDragDrop(event.currentTarget as Image);
				}
			}

			private function listLabelFunc(item:Object):String {
				return item.name + "@" + item.domain;
			}

			protected function tashImg_dragDropHandler(event:DragEvent):void
			{
				effectDrop.play();
			}
			
			public function dataSourceLabelFunction(item:Object):String{
				var label:String="";
				if(item!=null){
					var ea:EmailAccount = item as EmailAccount;
					if(ea.dataSource!=EmailAccount.MANUAL 
						&& model.context.selectedDomain!=null
						&& model.context.selectedDomain.adLdap!=null){
						label=typeDdl_labelFunc(model.context.selectedDomain.adLdap.directoryType);
					}else{
						label=ea.dataSource;
					}
				}
				return label;
			}

			private function typeDdl_labelFunc(item:Object):String {
				var label:String="";
				if( item!=null && item is String){
					label=this.resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_RESOURCE+item as String);
					if(label==null || label.length<1){
						label=item as String;
					}
				}
				return label;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:EmailValidator id="aliasV" required="true"/>
		<s:Sequence id="effectDrop" target="{tashImg}" >
			<s:AnimateFilter duration="150" id="blur">
				<s:bitmapFilter>
					<s:BlurFilter blurX="10.0" 
								  blurY="10.0" />
				</s:bitmapFilter>
			</s:AnimateFilter>
			<s:AnimateFilter duration="150" id="unblur">
				<s:bitmapFilter>
					<s:BlurFilter blurX="0.0" 
								  blurY="0.0" />
				</s:bitmapFilter>
			</s:AnimateFilter>		
		</s:Sequence>
		
		<cairngorm:ValidatorGroup id="validateAll">
			<cairngorm:validators>
				<mx:EmailValidator id="emailV" 
								   required="true"
								   property="emailStr"
								   source="{this}"
								   listener="{emailTi}"
								   />
			</cairngorm:validators>
		</cairngorm:ValidatorGroup>
		
	</fx:Declarations>
	
	<s:states> 
		<s:State name="new"/>    
		<s:State name="edit"/>
		<s:State name="managed"/>
	</s:states> 
	
	<s:layout>
		<s:VerticalLayout paddingLeft="0" paddingBottom="0" paddingRight="0" paddingTop="0" gap="0"/>
	</s:layout>
	<component:ErrorText id="errorText" width="100%" soundEnabled="{model.context.applicationUser.soundsEnabled}"/>
	<s:Form>
		<s:layout>
			<s:FormLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
		</s:layout>
		<s:FormItem required="true" label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FORM_ACCOUNT_LABEL)}" width="100%">
			<s:HGroup verticalAlign="middle">
				<s:TextInput id="emailTi" width="200" enabled="false" enabled.new="true" 
							 text="@{account.account}"/>
				<s:Label fontWeight="bold" text="{'@'+model.context.selectedDomain.domain}"/>
			</s:HGroup>
		</s:FormItem>
		<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FORM_GROUP_LABEL)}" width="100%">
			<s:ComboBox id="groupDdl" dataProvider="{model.context.groups}" labelField="name" width="200"/>
		</s:FormItem>
		<s:Spacer height="15"/>
		<s:Label includeIn="managed" text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_MANAGED_BY_LABEL) +' '+ dataSourceLabelFunction(account) }"/>
		<s:HGroup includeIn="edit" verticalAlign="bottom" height="100%">
			<s:VGroup height="100%">
				<component1:LabelExpanded labelText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FORM_ALIASES_LABEL)}" 
										  explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" 
										  hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" 
										  expandedText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FORM_ALIASES_EXPLAIN)}" 
										  width="100%"/>
				<s:Form defaultButton="{addAliasBtt}" >
					<s:layout>
						<s:FormLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
					</s:layout>
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="aliasTi" width="150" enabled="{account.dataSource==EmailAccount.MANUAL}"/>
						<s:Label text="@" fontWeight="bold"/>
						<s:DropDownList
							id="domainAliasDdl"
							dataProvider="{domains}"
							requireSelection="true"
							width="150"/>
						<s:Button id="addAliasBtt" 
								  label="Add" 
								  click="addAliasBtt_clickHandler(event)" 
								  buttonMode="true"
								  enabled="{account.dataSource==EmailAccount.MANUAL}"/>							
					</s:HGroup>
				</s:Form>
				<s:List id="aliasList"
						dataProvider="{account.aliases}" 
						width="100%" 
						height="100%"
						maxHeight="140"
						dragEnabled="true" 
						dragMoveEnabled="true"
						enabled="{account.dataSource==EmailAccount.MANUAL}"
						labelFunction="listLabelFunc"
						keyUp="aliasList_keyUpHandler(event)"/>				
			</s:VGroup>
			<s:VGroup horizontalAlign="center">
				<s:Label text="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.DRAG_HERE)}" 
						 styleName="draghere"
						 buttonMode="true"/>
				<mx:Image id="tashImg" 
						  source="{ImageResources.TRASHCAN}" 
						  dragEnter="{tashImg_dragEnterHandler(event)}" 
						  dragDrop="tashImg_dragDropHandler(event)"
						  buttonMode="true"/>
			</s:VGroup>
		</s:HGroup>			
		<s:HGroup horizontalAlign="right" width="100%" paddingTop="15">
			<s:Button id="saveBtt" 
					  label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.SAVE_LABEL)}" 
					  click="saveBtt_clickHandler(event)"
					  buttonMode="true"/>
			<s:Button id="cancelBtt" 
					  label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.CANCEL_LABEL)}" 
					  click="cancelBtt_clickHandler(event)"
					  buttonMode="true"/>
		</s:HGroup>
	</s:Form>
	
</s:TitleWindow>

