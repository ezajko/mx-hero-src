<!---
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 gap="20" 
		 verticalAlign="middle" 
		 xmlns:FromTo="org.mxhero.console.commons.FromTo.*" 
		 xmlns:IPE="org.mxhero.console.commons.component.IPE.*" 
		 xmlns:parsley="http://www.spicefactory.org/parsley" 
		 xmlns:element="org.mxhero.console.commons.FromTo.element.*"
		 currentStateChange="currentStateChangeHandler(event)">
	
	<fx:Declarations>
		<mx:EmailValidator id="emailValidator" required="true"/>
		<parsley:Configure/>
	</fx:Declarations>
	
	<s:transitions>
		<s:Transition fromState="inactive" toState="active">
			<s:Fade target="{comboBox}" alphaFrom="0" alphaTo="1"/>
		</s:Transition>
		<s:Transition fromState="inactive" toState="restricted">
			<s:Fade target="{comboBox}" alphaFrom="0" alphaTo="1"/>
		</s:Transition>
	</s:transitions>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import org.mxhero.console.commons.infrastructure.parser.StringUtils;
			import org.mxhero.console.features.application.resources.RuleViewProperties;
			import org.mxhero.console.features.presentation.rule.RuleViewPM;
			import org.mxhero.console.frontend.domain.ApplicationContext;
			import org.mxhero.console.frontend.domain.EmailAccountAlias;
			
			public var notifyChange:Function;
			
			public var parentStateFunction:Function;
			
			public var childState:String;
			
			[Bindable]
			private var sort:Sort=new Sort();

			[Inject]
			[Bindable]
			public var model:ApplicationContext;
			
			[Bindable]
			public var changeFunction:Function;
			
			protected function item_clickHandler(event:MouseEvent):void
			{
				if(parentStateFunction!=null){
					parentStateFunction(childState);
				}
			}

			public function accountLabelFunction(item:Object):String{
				if(item!=null){
					if(item is String){
						return item as String;
					}
					return item.name+"@"+item.domain;
				}
				return "";
			}

			public function realAccountLabelFunction(item:Object):String{
				if(item!=null){
					if(item is String){
						return item as String;
					}
					return item.account.account+"@"+item.account.domain;
				}
				return "";
			}
			
			protected function ipeComboBox_currentStateChangeHandler(event:StateChangeEvent):void
			{
				if(notifyChange!=null){
					notifyChange();
				}
			}

			protected function currentStateChangeHandler(event:StateChangeEvent):void
			{
				if(event.newState=="inactive"){
					ipeComboBox.selectedItem=null;
					ipeComboBox.selectedLabel=null;
					ipeComboBox.comboBox.text=null;
					ipeComboBox.comboBox.selectedItem=null;
					ipeComboBox.switchState();
				}
			}
			
			protected function aliasesToolTip(item:Object):String{
				var label:String="";
				if(item.account.aliases!=null){
					for each (var alias:Object in item.account.aliases){
						var accountAlias:EmailAccountAlias = alias as EmailAccountAlias;
						label=label+accountAlias.name+"@"+accountAlias.domain+'\n';
					}
					label=StringUtils.trimRight(label);
				}
				return label;
			}
			
			protected function showAliasLabel(state:String,item:Object):Boolean{
				if(state=='show'
				&& item!=null
				&& item.account.aliases!=null
				&& (item.account.aliases as ArrayCollection).length>1){
					aliasesLabel.toolTip=aliasesToolTip(item);
					return true;
				}
				return false;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="active"/>
		<s:State name="restricted"/>
		<s:State name="inactive"/>
	</s:states>
	
	<element:Item text="Individual"
				 toolTip.inactive="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ITEM_SELECT_INDIVIDUAL_TOOLTIP)}" 
				 toolTip.active="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ITEM_CLEAR_TOOLTIP)}"
				 click="item_clickHandler(event)"
				 width="150"/>
	
	<s:BorderContainer id="comboBox" 
					   excludeFrom="inactive"
					   backgroundColor="#7c7b7b"  
					   borderVisible="true" 
					   dropShadowVisible="true"
					   borderStyle="solid"
					   minHeight="0"
					   buttonMode="true"
					   borderColor="#cccccc" 
					   cornerRadius="4"
					   minWidth="340"
					   height="100%">
		<s:VGroup height="100%" width="100%" 
				  horizontalAlign="center" 
				  verticalAlign="middle"
				  paddingLeft="5"
				  paddingRight="5">
			<IPE:IPEAutoComplete id="ipeComboBox"
							 subStyles="item"
							 currentState="edit"
							 dataProvider="{model.accountsAliases}"
							 enableItemSelectionCheck.active="false"
							 enableItemSelectionCheck.restricted="true"
							 enableLabelClickChangeStatus="true"
							 enableEnterKeyChangeStatus="true"
							 labelFunction="{accountLabelFunction}"
							 validator="{emailValidator}"
							 showLabelFunction="{realAccountLabelFunction}"
							 changeFunction="{changeFunction}"
							 itemNotSelectedError="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ITEM_INDIVIDUAL_NOT_VALID)}"
							 labelTooltip="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ITEM_EDIT_TOOLTIP)}"
							 width="100%"
							 currentStateChange="ipeComboBox_currentStateChangeHandler(event)"/>					
		</s:VGroup>
	</s:BorderContainer>
	<s:Label id="aliasesLabel"
			text="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ALIASED_ACCOUNT_LABEL)}" 
			 textDecoration="underline" 
			 fontStyle="italic" 
			 fontWeight="bold"
			 excludeFrom="inactive"
			 visible="{showAliasLabel(ipeComboBox.currentState,ipeComboBox.selectedItem)}"
			 buttonMode="true"
			 />
</s:HGroup>
