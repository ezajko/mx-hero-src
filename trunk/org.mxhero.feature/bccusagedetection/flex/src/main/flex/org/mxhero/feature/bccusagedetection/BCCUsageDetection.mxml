<!---
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   layout="vertical"
		   creationComplete="creationCompleteHandler(event)"
		   xmlns:component="org.mxhero.console.commons.feature.component.*"
		   implements="org.mxhero.console.commons.feature.IFeature" xmlns:tlf="net.asciiworks.tlf.*">
	
	<fx:Declarations>
		<mx:StringValidator id="requiredV" required="true" source="{emailTi}" property="text"/>
		<mx:EmailValidator id="emailV"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			import org.mxhero.console.commons.utils.StringUtils;
			
			private var initialProperties:ArrayCollection;
			private var errorMessage:String;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				editor.textFlow  = TextConverter.importToFlow(resourceManager.getString('bccusagedetection','action.return.textarea.default'),TextConverter.PLAIN_TEXT_FORMAT);
				loadData();
			}
			
			public function isValid():Boolean{
				var valArray:Array;
				valArray=requiredV.validate().results;
				if(valArray!=null && valArray.length>0){
					errorMessage= (valArray[0] as ValidationResult).errorMessage;
					emailTi.errorString=errorMessage;
					return false;
				}
				var valid:String="";
				for each(var email:String in emailTi.text.split(",")){
					
					if( StringUtils.trim(email).length>0){
						valArray=emailV.validate(email).results;
						if(valArray!=null && valArray.length>0){
							errorMessage=(valArray[0] as ValidationResult).errorMessage;
							emailTi.errorString=errorMessage;
							return false;
						}
						valid=valid+","+StringUtils.trim(email);
					}
				}
				emailTi.text=valid.substr(1,valid.length);
				valArray=requiredV.validate().results;
				if(valArray!=null && valArray.length>0){
					errorMessage= (valArray[0] as ValidationResult).errorMessage;
					emailTi.errorString=errorMessage;
					return false;
				}
				emailTi.errorString="";
				if(StringUtil.trim(TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString()).length<1){
					editor.errorString=resourceManager.getString('bccusagedetection','error.return.message');
						errorMessage=resourceManager.getString('bccusagedetection','error.return.message');
						return false;
				}
				editor.errorString="";
				errorMessage="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					emailTi.text=PropertyHelper.getProperty(initialProperties,'email.value').propertyValue;
					if(PropertyHelper.getProperty(initialProperties,"lists.ignore").propertyValue=="true"){
						listsCB.selected=true;
					}else{
						listsCB.selected=false;
					}
					if(PropertyHelper.getProperty(this.initialProperties,"bcc.header.rte")!=null){
						editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"bcc.header.rte").propertyValue,TextConverter.TEXT_LAYOUT_FORMAT);
					}else if(PropertyHelper.getProperty(this.initialProperties,"bcc.header")!=null){
						editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"bcc.header").propertyValue,TextConverter.TEXT_FIELD_HTML_FORMAT);
					}else{
						editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"bcc.header.plain").propertyValue,TextConverter.PLAIN_TEXT_FORMAT);
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				property = new FeatureRuleProperty();
				property.propertyKey="email.value";
				property.propertyValue=emailTi.text;
				properties.addItem(property);
				
				var returnMessage:FeatureRuleProperty = new FeatureRuleProperty();
				returnMessage.propertyKey = "bcc.header";
				var t:RteHtmlParser = new RteHtmlParser();
				t.ignoreParagraphSpace=true;
				t.FormatToHTML(TextConverter.export(editor.textFlow,TextConverter.TEXT_FIELD_HTML_FORMAT,ConversionType.STRING_TYPE).toString());
				var str:String = t.StringFormat;
				returnMessage.propertyValue = t.XMLFormat;
				properties.addItem(returnMessage);
				returnMessage = new FeatureRuleProperty();
				returnMessage.propertyKey = "bcc.header.plain";
				returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString();
				properties.addItem(returnMessage);	
				returnMessage = new FeatureRuleProperty();
				returnMessage.propertyKey = "bcc.header.rte";
				returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.TEXT_LAYOUT_FORMAT,ConversionType.STRING_TYPE).toString();
				properties.addItem(returnMessage);	
				
				property = new FeatureRuleProperty();
				property.propertyKey = "lists.ignore";
				if(listsCB.selected){
					property.propertyValue="true";
				}else{
					property.propertyValue="false";
				}
				properties.addItem(property);
				
				return properties;
			}
			
			public function getValidationError():String{
				return errorMessage;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("bccusagedetection")]
	</fx:Metadata>
	
	<mx:Text fontStyle="italic" 
			 width="100%" 
			 text="{resourceManager.getString('bccusagedetection','note.text')}"/>
	
	<s:Label text="{resourceManager.getString('bccusagedetection','first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup width="100%" gap="10" paddingLeft="24">
		<s:VGroup gap="20">
			<s:HGroup  verticalAlign="middle">
				<s:Label text="{resourceManager.getString('bccusagedetection','email.address.label')}"/>
				<s:TextInput id="emailTi" width="300"/>
			</s:HGroup>
			<tlf:TLFTextEditor id="editor" width="470" height="240" 
							   automaticallyExpand="false"
							   textAreaBackgroundColor="#FFFFFF"
							   color="#00000"/>		
			<s:HGroup width="100%" verticalAlign="top">
				<s:CheckBox id="listsCB" 
							label=""
							selected="true"/>
				<component:LabelExpanded
					paddingTop="5"
					labelText="{resourceManager.getString('bccusagedetection','lists.label.text')}"
					expandedText="{resourceManager.getString('bccusagedetection','lists.label.expanded')}"
					explainText="{resourceManager.getString('bccusagedetection','label.explain')}"
					hideText="{resourceManager.getString('bccusagedetection','label.hide')}"
					width="100%"/>
			</s:HGroup>
			
		</s:VGroup>
		
	</s:VGroup>

</mx:Module>
