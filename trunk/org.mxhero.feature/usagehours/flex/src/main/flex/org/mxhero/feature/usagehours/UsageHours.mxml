<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 		  
		   creationComplete="creationCompleteHandler(event)"
		   verticalGap="20"
		   paddingTop="30"
		   initialize="{loadXMLFile()}"
		   implements="org.mxhero.console.commons.feature.IFeature" xmlns:component="org.mxhero.console.commons.feature.component.*" xmlns:fdg="org.mxhero.console.mails.fdg.*" xmlns:tlf="net.asciiworks.tlf.*">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="actionType"/>
		<mx:EmailValidator id="emailV" required="true"/>
		<mx:StringValidator id="requiredCopyV" required="true" source="{emailTi}" property="text"/>
		<mx:HTTPService id="localesService" url="org/mxhero/feature/usagehours/locales.xml" result="resultHandler(event);"/>	
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.DragManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import mx.utils.ObjectProxy;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.Regex;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			import org.mxhero.console.commons.utils.StringUtils;
			
			private static const MODULE_NAME:String = "usagehours";
			
			private var initialProperties:ArrayCollection;
			
			private var errorMessage:String;
			
			[Bindable]
			public var locales:ArrayCollection;
			
			[Bindable]
			public var emails:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var hours:ArrayCollection = new ArrayCollection(
				[new ObjectProxy({hour:6,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:7,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:8,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:9,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:10,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:11,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:12,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:13,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:14,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:15,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:16,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:17,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:18,sunday:false,monday:true,tuesday:true,wednesday:true,thursday:true,friday:true,saturday:false}),
				new ObjectProxy({hour:19,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:20,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:21,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:22,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:23,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:0,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:1,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:2,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:3,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:4,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false}),
				new ObjectProxy({hour:5,sunday:false,monday:false,tuesday:false,wednesday:false,thursday:false,friday:false,saturday:false})]
			);
			
			private function loadXMLFile():void {
				localesService.headers["Pragma"] = "no-cache";
				localesService.headers["Cache-Control"] = "no-cache";
				localesService.send();
			}
			
			private function resultHandler(event:ResultEvent):void {
				locales=event.result.locale;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				editor.textFlow  = TextConverter.importToFlow(resourceManager.getString(MODULE_NAME,'action.return.textarea.text'),TextConverter.TEXT_FIELD_HTML_FORMAT);
				loadData();
			}
			
			
			public function isValid():Boolean{
				var valArray:Array;
				
				if(localeDdl.selectedItem==null){
					errorMessage=resourceManager.getString(MODULE_NAME,'select.timezone.error');
					localeDdl.errorString=resourceManager.getString(MODULE_NAME,'select.timezone.error');
					return false;
				}
				localeDdl.errorString="";
				
				if(returnRb.selected){
					if(StringUtil.trim(TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString()).length<1){
						errorMessage = resourceManager.getString(MODULE_NAME,'error.return.message');
						editor.errorString = errorMessage;
						return false;
					}
				}
				editor.errorString="";
				
				if(alertRb.selected){
					valArray=requiredCopyV.validate().results;
					if(valArray!=null && valArray.length>0){
						errorMessage= (valArray[0] as ValidationResult).errorMessage;
						emailTi.errorString=errorMessage;
						return false;
					}
					var valid:String="";
					for each(var email:String in emailTi.text.split(",")){
						if( StringUtils.trim(email).length>0){
							valArray=emailV.validate(email).results;
							if(valArray!=null && valArray.length>0){
								errorMessage=(valArray[0] as ValidationResult).errorMessage
								emailTi.errorString=errorMessage;
								return false;
							}
							valid=valid+","+StringUtils.trim(email);
						}
					}
					emailTi.text=valid.substr(1,valid.length);
					valArray=requiredCopyV.validate().results;
					if(valArray!=null && valArray.length>0){
						errorMessage= (valArray[0] as ValidationResult).errorMessage;
						emailTi.errorString=errorMessage;
						return false;
					}
				}
				emailTi.errorString="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initialProperties=data;
			}
			
			private function getHourObject(value:String):ObjectProxy{
				if(value==null){
					return null;
				}
				var array:Array = value.split(";");
				var object:ObjectProxy = new ObjectProxy({hour:new Number(array[0]),sunday:((array[1]=='true')?true:false),monday:((array[2]=='true')?true:false),tuesday:((array[3]=='true')?true:false),wednesday:((array[4]=='true')?true:false),thursday:((array[5]=='true')?true:false),friday:((array[6]=='true')?true:false),saturday:((array[7]=='true')?true:false)});
				return object;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					var actionSelected:String = PropertyHelper.getProperty(initialProperties,"action").propertyValue;
					if(actionSelected=='discard'){
						discardRb.selected=true;
						returnRb.selected=false;
						alertRb.selected=false;
					} else if(actionSelected=='return'){
						returnRb.selected=true;
						alertRb.selected=false
						discardRb.selected=false;
						if(PropertyHelper.getProperty(this.initialProperties,"return.text.rte")!=null){
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.text.rte").propertyValue,TextConverter.TEXT_LAYOUT_FORMAT);
						}else if(PropertyHelper.getProperty(this.initialProperties,"return.text")!=null){
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.text").propertyValue,TextConverter.TEXT_FIELD_HTML_FORMAT);
						}else{
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.text.plain").propertyValue,TextConverter.PLAIN_TEXT_FORMAT);
						}
					} else if(actionSelected=='alert'){
						returnRb.selected=false;
						discardRb.selected=false;
						alertRb.selected=true;
						emailTi.text=PropertyHelper.getProperty(this.initialProperties,"alert.email").propertyValue;
					}
					hours=new ArrayCollection();
					for each(var property:Object in PropertyHelper.getProperties(initialProperties,"hour.list")){
						hours.addItem(getHourObject(property.propertyValue));
					}
					var localeLoaded:String = PropertyHelper.getProperty(this.initialProperties,"locale").propertyValue;
					for(var i:Number=0;i<locales.length;i++){
						if(locales.getItemAt(i).id == localeLoaded){
							localeDdl.selectedIndex=i;
							break;
						}
					}
					
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();

				var locale:FeatureRuleProperty = new FeatureRuleProperty();
				locale.propertyKey="locale";
				locale.propertyValue=localeDdl.selectedItem.id;
				properties.addItem(locale);
				
				for(var i:int=0 ; i<hours.length;i++){
					var element:Object = hours.getItemAt(i);
					var hour:FeatureRuleProperty = new FeatureRuleProperty();
					hour.propertyKey="hour.list";
					hour.propertyValue=element.hour
						+";"+element.sunday
						+";"+element.monday
						+";"+element.tuesday
						+";"+element.wednesday
						+";"+element.thursday
						+";"+element.friday
						+";"+element.saturday;
					properties.addItem(hour);
				}
				
				var action:FeatureRuleProperty = new FeatureRuleProperty();
				action.propertyKey="action";
				if(discardRb.selected){
					action.propertyValue='discard';
				}else if(alertRb.selected){
					action.propertyValue='alert';
					var email:FeatureRuleProperty = new FeatureRuleProperty();
					email.propertyKey="alert.email";
					email.propertyValue=emailTi.text;
					properties.addItem(email);
				}else if(returnRb.selected){
					action.propertyValue='return';
					
					var returnMessage:FeatureRuleProperty = new FeatureRuleProperty();
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.text";
					var t:RteHtmlParser = new RteHtmlParser();
					t.ignoreParagraphSpace=true;
					t.FormatToHTML(TextConverter.export(editor.textFlow,TextConverter.TEXT_FIELD_HTML_FORMAT,ConversionType.STRING_TYPE).toString());
					var str:String = t.StringFormat;
					returnMessage.propertyValue = t.XMLFormat;
					properties.addItem(returnMessage);
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.text.plain";
					returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString();
					properties.addItem(returnMessage);	
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.text.rte";
					returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.TEXT_LAYOUT_FORMAT,ConversionType.STRING_TYPE).toString();
					properties.addItem(returnMessage);	
				}
				properties.addItem(action);
				return properties;
			}
			
			public function getValidationError():String{
				return this.errorMessage;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
			
			private function hourLabelFunction(item:Object, column:DataGridColumn):String 
			{
				var time:Date = new Date();
				if(item.hour!='0'){
					time.setHours(item.hour,0,0,0);
					var formatter:DateFormatter = new DateFormatter();
					formatter.formatString="L A";
					return formatter.format(time).toLowerCase();					
				}else{
					return '0 am';
				}
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("usagehours")]
	</fx:Metadata>

	<s:Label text="{resourceManager.getString(MODULE_NAME,'first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:HGroup verticalAlign="middle" paddingLeft="20" width="400">
		<s:Label text="{resourceManager.getString(MODULE_NAME,'select.timezone.label')}"/>
		<s:DropDownList id="localeDdl" prompt="{resourceManager.getString(MODULE_NAME,'select.timezone.promt')}" dataProvider="{locales}" labelField="label" width="100%"/>		
	</s:HGroup>
	
	
	<s:VGroup height="100%" width="400" verticalAlign="bottom" paddingLeft="20">
		<s:Label text="{resourceManager.getString(MODULE_NAME,'check.hours.label')}"/>
		<mx:DataGrid id="dataGrid" editable="true" dataProvider="{hours}" width="100%">
			<mx:columns>
				<mx:DataGridColumn dataField="hour" width="60" headerText="{resourceManager.getString(MODULE_NAME,'day.hours')}" editable="false" sortable="false" labelFunction="hourLabelFunction"/>				
				<mx:DataGridColumn dataField="sunday" headerText="{resourceManager.getString(MODULE_NAME,'day.sunday')}" editable="false" sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<mx:CheckBox selected="{(data.sunday == true)?true:false}" click="{data.sunday = (data.sunday != true) ? true : false;}"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="monday" headerText="{resourceManager.getString(MODULE_NAME,'day.monday')}" editable="false" sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<mx:CheckBox selected="{(data.monday == true)?true:false}" click="{data.monday = (data.monday != true) ? true : false;}"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="@tuesday" headerText="{resourceManager.getString(MODULE_NAME,'day.tuesday')}" editable="false" sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<mx:CheckBox selected="{(data.tuesday == true)?true:false}" click="{data.tuesday = (data.tuesday != true) ? true : false;}"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="wednesday" headerText="{resourceManager.getString(MODULE_NAME,'day.wednesday')}" editable="false" sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<mx:CheckBox selected="{(data.wednesday == true)?true:false}" click="{data.wednesday = (data.wednesday != true) ? true : false;}"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>				
				<mx:DataGridColumn dataField="thursday" headerText="{resourceManager.getString(MODULE_NAME,'day.thursday')}" editable="false" sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<mx:CheckBox selected="{(data.thursday == true)?true:false}" click="{data.thursday = (data.thursday != true) ? true : false;}"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="friday" headerText="{resourceManager.getString(MODULE_NAME,'day.friday')}" editable="false" sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<mx:CheckBox selected="{(data.friday == true)?true:false}" click="{data.friday = (data.friday != true) ? true : false;}"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="saturday" width="40" headerText="{resourceManager.getString(MODULE_NAME,'day.saturday')}" editable="false" sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<mx:CheckBox selected="{(data.saturday == true)?true:false}" click="{data.saturday = (data.saturday != true) ? true : false;}"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</s:VGroup>
	
	<s:Label text="{resourceManager.getString(MODULE_NAME,'second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" gap="25">
		<s:RadioButton id="discardRb" 
					groupName="actionType"
					label="{resourceManager.getString(MODULE_NAME,'action.discard.checkbox.label')}"/>
		<s:VGroup>
			<s:RadioButton id="returnRb" 
						   groupName="actionType"
						   label="{resourceManager.getString(MODULE_NAME,'action.block.checkbox.label')}"
						   selected="true"/>
			<mx:Spacer/>
			<s:VGroup paddingLeft="18">
				<tlf:TLFTextEditor id="editor" width="470" height="240" 
								   automaticallyExpand="false"
								   textAreaBackgroundColor="#FFFFFF"
								   color="#00000"/>			
			</s:VGroup>
		</s:VGroup>
		<s:VGroup>
			<s:RadioButton id="alertRb" 
						   groupName="actionType"
						   label="{resourceManager.getString(MODULE_NAME,'action.alert.checkbox.label')}"/>
			<s:HGroup verticalAlign="middle" paddingLeft="20">
				<s:Label text="{resourceManager.getString(MODULE_NAME,'action.alert.email.label')}"/>
				<s:VGroup paddingLeft="18">
					<s:TextInput id="emailTi" enabled="{alertRb.selected}" width="240"/>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</mx:Module>
