<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 		   
		   layout="vertical"
		   creationComplete="creationCompleteHandler(event)" 
		   xmlns:spamassassin="org.mxhero.feature.spamassassin.*"
		   verticalGap="20"
		   paddingTop="20" 
		   xmlns:component="org.mxhero.console.commons.feature.component.*"
		   implements="org.mxhero.console.commons.feature.IFeature" xmlns:externalantispam="org.mxhero.feature.externalantispam.*">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="action"/>
		<mx:EmailValidator id="emailV" required="true"/>
		<mx:RegExpValidator id="domainV" required="true" expression="{Regex.domainRegex}"/>
		<mx:StringValidator id="headerV" required="true" source="{headerChooser.headerTi}" property="text"/>
		<mx:StringValidator id="valueV" required="true" source="{headerChooser.valueTi}" property="text"/>
		<mx:StringValidator id="prefixV" required="true" source="{prefixTi}" property="text"/>
		<mx:StringValidator id="addHeaderV" required="true" source="{addHeaderTi}" property="text"/>
		<mx:StringValidator id="addValueV" required="true" source="{addValueTi}" property="text"/>
		<mx:StringValidator id="removeHeaderV" required="true" source="{removeHeaderTi}" property="text"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.Regex;
			
			import spark.events.IndexChangeEvent;
			
			private var initProperties:ArrayCollection;
			
			private var errorMessage:String;
			
			[Bindable]
			public var emails:ArrayCollection=new ArrayCollection();
			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				prefixTi.text=resourceManager.getString('externalantispam','prefix.default');
				addHeaderTi.text=resourceManager.getString('externalantispam','header.default');
				addValueTi.text=resourceManager.getString('externalantispam','value.default');
				removeHeaderTi.text=resourceManager.getString('externalantispam','header.default');
				loadData();
			}
			
			private function loadData():void{
				if(initProperties!=null){
					
					for each(var property:Object in PropertyHelper.getProperties(initProperties,"email.list")){
						emails.addItem(property.propertyValue);
					}
					
					headerChooser.setHeader(PropertyHelper.getProperty(initProperties,"header.id").propertyValue
											,PropertyHelper.getProperty(initProperties,"header.key").propertyValue
											,PropertyHelper.getProperty(initProperties,"header.value").propertyValue
											,PropertyHelper.getProperty(initProperties,"header.managed").propertyValue);

					var actionSelected:String = PropertyHelper.getProperty(initProperties,"action.selection").propertyValue;
					if(actionSelected=="reject"){
						rejectRb.selected=true;
					} else if (actionSelected=="receive"){
						receiveRb.selected=true;
						if(PropertyHelper.getProperty(initProperties,"prefix.value")!=null){
							prefixRb.selected=true;
							prefixTi.text=PropertyHelper.getProperty(initProperties,"prefix.value").propertyValue;
						}else{
							prefixRb.selected=false;
						}
						if(PropertyHelper.getProperty(initProperties,"add.header.key")!=null){
							headerRb.selected=true;
							addHeaderTi.text=PropertyHelper.getProperty(initProperties,"add.header.key").propertyValue;
							addValueTi.text=PropertyHelper.getProperty(initProperties,"add.header.value").propertyValue;
						}
					}
					
					if(PropertyHelper.getProperty(initProperties,"remove.header")!=null){
						removeHeaderRb.selected=true;
						removeHeaderTi.text=PropertyHelper.getProperty(initProperties,"remove.header").propertyValue;
					}
					
				}
			}
			
			protected function addEmailBtt_clickHandler(event:MouseEvent):void
			{
				var textToValidate:String = StringUtil.trim(emailTi.text).replace(/^[@]+/,"");
				var isEmail:Boolean = true;		
				var isDomain:Boolean = true;
				var results:Array=null;
				
				results=emailV.validate(textToValidate).results;
				if(results!=null){
					if(results.length>0){
						for each(var result:ValidationResult in results){
							if(result.isError){
								emailTi.errorString= result.errorMessage;
								isEmail=false;
							}
						}
					}
				}
				
				if(!isEmail){
					results=domainV.validate(textToValidate).results;
					if(results!=null){
						if(results.length>0){
							for each(var domainResult:ValidationResult in results){
								if(domainResult.isError){
									emailTi.errorString= domainResult.errorMessage;
									isDomain=false;
								}
							}
						}
					}
					if(isDomain){
						textToValidate="@"+textToValidate;
					}
				}
				if(!isDomain && !isEmail){
					return;
				}
				
				emailTi.errorString= "";
				
				for each(var object:Object in emails){
					if(object.toString()==textToValidate){
						emailTi.errorString=resourceManager.getString('externalantispam','duplicate.email.domain');
						return;
					}
				}
				emails.addItem(textToValidate);
				emailTi.text="";
			}
			
			public function isValid():Boolean{
				var valResult:Array;
				
				if(headerChooser.predefinedRb.selected && headerChooser.antispamsDdl.selectedIndex<0){
					headerChooser.antispamsDdl.errorString=resourceManager.getString('externalantispam','error.selected.header');
					errorMessage=resourceManager.getString('externalantispam','error.selected.header');
					return false;
				}

				if(removeHeaderRb.selected){
					valResult = removeHeaderV.validate().results;
					if(valResult!=null && valResult.length>0){
						errorMessage=removeHeaderTi.errorString;
						return false;
					}
				}
				
				valResult = headerV.validate().results;
				if(valResult!=null && valResult.length>0){
					errorMessage=headerChooser.headerTi.errorString;
					return false;
				}
				
				valResult = valueV.validate().results;
				if(valResult!=null && valResult.length>0){
					errorMessage=headerChooser.valueTi.errorString;
					return false;
				}
				
				if(receiveRb.selected){
					if(prefixRb.selected){
						valResult = prefixV.validate().results;
						if(valResult!=null && valResult.length>0){
							errorMessage=prefixTi.errorString;
							return false;
						}
					}
					
					if(headerRb.selected){
						valResult = addHeaderV.validate().results;
						if(valResult!=null && valResult.length>0){
							errorMessage=addHeaderTi.errorString;
							return false;
						}
						valResult = addValueV.validate().results;
						if(valResult!=null && valResult.length>0){
							errorMessage=addValueTi.errorString;
							return false;
						}
					}
				}
				
				errorMessage="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initProperties=data;
			}
			
			public function getProperties():ArrayCollection{
				var newProperties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				for each(var object:Object in emails){
					property = new FeatureRuleProperty();
					property.propertyKey = "email.list";
					property.propertyValue = object.toString();
					newProperties.addItem(property);
				}
				
				property = new FeatureRuleProperty();
				property.propertyKey = "header.key";
				property.propertyValue = headerChooser.selectedHeader;
				newProperties.addItem(property);
				
				property = new FeatureRuleProperty();
				property.propertyKey = "header.value";
				property.propertyValue = headerChooser.selectedValue;
				newProperties.addItem(property);
				
				property = new FeatureRuleProperty();
				property.propertyKey = "header.managed";
				property.propertyValue = headerChooser.isManaged;
				newProperties.addItem(property);

				property = new FeatureRuleProperty();
				property.propertyKey = "header.id";
				property.propertyValue = headerChooser.selectedId;
				newProperties.addItem(property);

				if(removeHeaderRb.selected){
					property = new FeatureRuleProperty();
					property.propertyKey = "remove.header";
					property.propertyValue = removeHeaderTi.text;
					newProperties.addItem(property);
				}
	
				property = new FeatureRuleProperty();
				property.propertyKey = "action.selection";
				if(rejectRb.selected){
					property.propertyValue = "reject";
				} else if(receiveRb.selected){
					property.propertyValue = "receive";
					if (prefixRb.selected){
						var prefixProperty:FeatureRuleProperty = new FeatureRuleProperty();
						prefixProperty.propertyKey = "prefix.value";
						prefixProperty.propertyValue = prefixTi.text;
						newProperties.addItem(prefixProperty);
					}
					if (headerRb.selected){
						var addHeaderProperty:FeatureRuleProperty = new FeatureRuleProperty();
						addHeaderProperty.propertyKey = "add.header.key";
						addHeaderProperty.propertyValue = addHeaderTi.text;
						newProperties.addItem(addHeaderProperty);
						var addValueProperty:FeatureRuleProperty = new FeatureRuleProperty();
						addValueProperty.propertyKey = "add.header.value";
						addValueProperty.propertyValue = addValueTi.text;
						newProperties.addItem(addValueProperty);
					}

				}
				newProperties.addItem(property);
				
				return newProperties;
			}
			
			public function getValidationError():String{
				return errorMessage;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}

			public function checkSubchilds(parentEnabled:Boolean,childEnabled:Boolean):Boolean{
				if(parentEnabled==true && childEnabled==true){
					return true;
				}
				return false;
			}
			
		]]>
	</fx:Script>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace spamassassin "org.mxhero.feature.spamassassin.*";
		@namespace component "org.mxhero.console.commons.feature.component.*";
		
		s|Label.newLabelStyle
		{
			fontWeight:"bold";
			font-size:16;
		}
		
		mx|Text.newExpandedTextStyle
		{
			fontStyle:"italic";
			fontSize:14;
			font-weight:normal;
		}
		
	</fx:Style>
	
	<fx:Metadata>
		[ResourceBundle("externalantispam")]
	</fx:Metadata>
	
	<component:LabelExpanded id="firstTitle"
							 width="100%"
							 labelText="{resourceManager.getString('externalantispam','first.title')}" 
							 expandedLabelStyleName="newLabelStyle"
							 expandedTextStyleName="newExpandedTextStyle"
							 explainText="{resourceManager.getString('externalantispam','label.explain')}"
							 hideText="{resourceManager.getString('externalantispam','label.hide')}"
							 expandedText="{resourceManager.getString('externalantispam','first.title.expanded')}"/>

	<externalantispam:HeaderChooser id="headerChooser"/>
	

	
	<s:Label text="{resourceManager.getString('externalantispam','second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup height="100%" width="500" verticalAlign="bottom" paddingLeft="20">
		
		<mx:Form defaultButton="{addEmailBtt}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<component:LabelExpanded
				labelText="{resourceManager.getString('externalantispam','email.label.text')}"
				expandedText="{resourceManager.getString('externalantispam','email.label.expanded')}"
				explainText="{resourceManager.getString('externalantispam','label.explain')}"
				hideText="{resourceManager.getString('externalantispam','label.hide')}"
				width="100%"/>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:TextInput id="emailTi" 
							 width="100%"/>
				<s:Button id="addEmailBtt" 
						  label="{resourceManager.getString('externalantispam','email.add')}"
						  buttonMode="true"
						  click="addEmailBtt_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>
		
		<mx:DataGrid id="emailsDg"
					 dataProvider="{emails}" 
					 width="100%"
					 showHeaders="false">
			<mx:columns>
				<mx:DataGridColumn dataField="email"/>
				<mx:DataGridColumn width="48" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<fx:Script>
									<![CDATA[
										import flash.events.MouseEvent;
										
										[Bindable]
										[Embed(source="/org/mxhero/feature/externalantispam/delete.png")]
										public static var DELETE:Class;
										
										protected function remove_clickHandler(event:MouseEvent):void
										{
											outerDocument.emails.removeItemAt(outerDocument.emails.getItemIndex(outerDocument.emailsDg.selectedItem));
										}
									]]>
								</fx:Script>
								<mx:Image source="{DELETE}"
										  buttonMode="true"
										  toolTip="{resourceManager.getString('externalantispam','remove.tooltip')}"
										  click="remove_clickHandler(event)"/>
							</mx:HBox>		  
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>	
		<s:VGroup width="100%" gap="10" paddingTop="10">
			<s:HGroup width="100%" verticalAlign="top">
				<s:CheckBox id="removeHeaderRb" 
							label=""/>
				<component:LabelExpanded
					paddingTop="5"
					labelText="{resourceManager.getString('externalantispam','remove.header.label.text')}"
					expandedText="{resourceManager.getString('externalantispam','remove.header.label.expanded')}"
					explainText="{resourceManager.getString('externalantispam','label.explain')}"
					hideText="{resourceManager.getString('externalantispam','label.hide')}"
					width="100%"/>
			</s:HGroup>
			<s:HGroup paddingLeft="24" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('externalantispam','header.label')}"/>
				<s:TextInput id="removeHeaderTi" 
							 enabled="{removeHeaderRb.selected}"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
	
	<mx:Spacer height="10"/>
	<s:Label text="{resourceManager.getString('externalantispam','third.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" width="100%" gap="30">
		
		<s:HGroup width="100%" verticalAlign="top">
			<s:RadioButton id="rejectRb" 
						   groupName="action"
						   label=""
						   selected="true"/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString('externalantispam','reject.label.text')}"
				expandedText="{resourceManager.getString('externalantispam','reject.label.expanded')}"
				explainText="{resourceManager.getString('externalantispam','label.explain')}"
				hideText="{resourceManager.getString('externalantispam','label.hide')}"
				width="100%"/>
		</s:HGroup>
		
		<s:HGroup width="100%" verticalAlign="top">
			<s:RadioButton id="receiveRb" 
						   groupName="action"
						   label=""/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString('externalantispam','receive.label.text')}"
				expandedText="{resourceManager.getString('externalantispam','receive.label.expanded')}"
				explainText="{resourceManager.getString('externalantispam','label.explain')}"
				hideText="{resourceManager.getString('externalantispam','label.hide')}"
				width="100%"/>
		</s:HGroup>
		
		<s:VGroup width="100%" gap="10" paddingLeft="20">
			<s:VGroup width="100%" gap="10">
				<s:HGroup width="100%" verticalAlign="top">
					<s:CheckBox id="prefixRb" 
								label=""
								selected="true"
								enabled="{receiveRb.selected}"/>
					<component:LabelExpanded
						paddingTop="5"
						labelText="{resourceManager.getString('externalantispam','prefix.label.text')}"
						expandedText="{resourceManager.getString('externalantispam','prefix.label.expanded')}"
						explainText="{resourceManager.getString('externalantispam','label.explain')}"
						hideText="{resourceManager.getString('externalantispam','label.hide')}"
						width="100%"/>
				</s:HGroup>
				<s:HGroup paddingLeft="24" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('externalantispam','prefix.label')}"/>
					<s:TextInput id="prefixTi" 
								 enabled="{checkSubchilds(receiveRb.selected,prefixRb.selected)}"/>
				</s:HGroup>
			</s:VGroup>
			
			
			<s:VGroup width="100%" gap="10">
				<s:HGroup width="100%" verticalAlign="top">
					<s:CheckBox id="headerRb" 
								label=""
								enabled="{receiveRb.selected}"/>
					<component:LabelExpanded
						paddingTop="5"
						labelText="{resourceManager.getString('externalantispam','add.header.label.text')}"
						expandedText="{resourceManager.getString('externalantispam','add.header.label.expanded')}"
						explainText="{resourceManager.getString('externalantispam','label.explain')}"
						hideText="{resourceManager.getString('externalantispam','label.hide')}"
						width="100%"/>
				</s:HGroup>
				<s:HGroup paddingLeft="24" verticalAlign="middle">
					<mx:Form>
						<mx:FormItem label="{resourceManager.getString('externalantispam','header.label')}">
							<s:TextInput id="addHeaderTi" enabled="{checkSubchilds(receiveRb.selected,headerRb.selected)}"/>
						</mx:FormItem>
						<mx:FormItem label="{resourceManager.getString('externalantispam','value.label')}">
							<s:TextInput id="addValueTi" enabled="{checkSubchilds(receiveRb.selected,headerRb.selected)}"/>
						</mx:FormItem>
					</mx:Form>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
		
	</s:VGroup>
</mx:Module>