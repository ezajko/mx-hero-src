<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   layout="vertical"
		   creationComplete="creationCompleteHandler(event)" 
		   xmlns:spamassassin="org.mxhero.feature.spamassassin.*"
		   verticalGap="20"
		   paddingTop="20" 
		   xmlns:component="org.mxhero.console.commons.feature.component.*"
		   implements="org.mxhero.console.commons.feature.IFeature">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="action"/>
		<mx:StringValidator id="headerV" required="true" source="{headerTi}" property="text"/>
		<mx:StringValidator id="prefixV" required="true" source="{prefixTi}" property="text"/>
		<mx:EmailValidator id="emailV" required="true"/>
		<mx:RegExpValidator id="domainV" required="true" expression="{Regex.domainRegex}"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.Regex;
			
			private var initProperties:ArrayCollection;
			
			private var errorMessage:String;
			
			[Bindable]
			public var emails:ArrayCollection=new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				prefixTi.text=resourceManager.getString('spamassassin','prefix.default');
				headerTi.text=resourceManager.getString('spamassassin','header.default');
				loadData();
			}
			
			private function loadData():void{
				if(initProperties!=null){
					
					for each(var property:Object in PropertyHelper.getProperties(initProperties,"email.list")){
						emails.addItem(property.propertyValue);
					}
					
					var actionSelected:String = PropertyHelper.getProperty(initProperties,"action.selection").propertyValue;
					if(actionSelected=="reject"){
						rejectRb.selected=true;
					} else if (actionSelected=="receive"){
						receiveRb.selected=true;
						if(PropertyHelper.getProperty(initProperties,"prefix.value")!=null){
							prefixRb.selected=true;
							prefixTi.text=PropertyHelper.getProperty(initProperties,"prefix.value").propertyValue;
						} else{
							prefixRb.selected=false;
						}
						if(PropertyHelper.getProperty(initProperties,"header.value")!=null){
							headerRb.selected=true;
							headerTi.text=PropertyHelper.getProperty(initProperties,"header.value").propertyValue;
						}
					}
					
				}
			}
			
			protected function addEmailBtt_clickHandler(event:MouseEvent):void
			{
				var textToValidate:String = StringUtil.trim(emailTi.text).replace(/^[@]+/,"");
				var isEmail:Boolean = true;		
				var isDomain:Boolean = true;
				var results:Array=null;
				
				results=emailV.validate(textToValidate).results;
				if(results!=null){
					if(results.length>0){
						for each(var result:ValidationResult in results){
							if(result.isError){
								emailTi.errorString= result.errorMessage;
								isEmail=false;
							}
						}
					}
				}
				
				if(!isEmail){
					results=domainV.validate(textToValidate).results;
					if(results!=null){
						if(results.length>0){
							for each(var domainResult:ValidationResult in results){
								if(domainResult.isError){
									emailTi.errorString= domainResult.errorMessage;
									isDomain=false;
								}
							}
						}
					}
					if(isDomain){
						textToValidate="@"+textToValidate;
					}
				}
				if(!isDomain && !isEmail){
					return;
				}
				
				emailTi.errorString= "";
				
				for each(var object:Object in emails){
					if(object.toString()==textToValidate){
						emailTi.errorString=resourceManager.getString('spamassassin','duplicate.email.domain');
						return;
					}
				}
				emails.addItem(textToValidate);
				emailTi.text="";
			}
			
			public function isValid():Boolean{
				var valResult:Array;
				if(headerRb.selected && receiveRb.selected){
					valResult = headerV.validate().results;
					if(valResult!=null && valResult.length>0){
						errorMessage=headerTi.errorString;
						return false;
					}
				} 
				if(prefixRb.selected && receiveRb.selected){
					valResult = prefixV.validate().results;
					if(valResult!=null && valResult.length>0){
						errorMessage=prefixTi.errorString;
						return false;
					}
				}
				errorMessage="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initProperties=data;
			}
			
			public function getProperties():ArrayCollection{
				var newProperties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				for each(var object:Object in emails){
					property = new FeatureRuleProperty();
					property.propertyKey = "email.list";
					property.propertyValue = object.toString();
					newProperties.addItem(property);
				}
				
				property = new FeatureRuleProperty();
				property.propertyKey = "action.selection";
				if(rejectRb.selected){
					property.propertyValue = "reject";
				} else if(receiveRb.selected){
					property.propertyValue = "receive";
					if (prefixRb.selected){
						var prefixProperty:FeatureRuleProperty = new FeatureRuleProperty();
						prefixProperty.propertyKey = "prefix.value";
						prefixProperty.propertyValue = prefixTi.text;
						newProperties.addItem(prefixProperty);
					}
					if (headerRb.selected){
						var headerProperty:FeatureRuleProperty = new FeatureRuleProperty();
						headerProperty.propertyKey = "header.value";
						headerProperty.propertyValue = headerTi.text;
						newProperties.addItem(headerProperty);
					}
				}

				newProperties.addItem(property);
				
				return newProperties;
			}
			
			public function getValidationError():String{
				return errorMessage;
			}

			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("spamassassin")]
	</fx:Metadata>
	
	<s:Label text="{resourceManager.getString('spamassassin','first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup height="100%" width="400" verticalAlign="bottom" paddingLeft="20">
		
		<mx:Form defaultButton="{addEmailBtt}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<component:LabelExpanded
				labelText="{resourceManager.getString('spamassassin','email.label.text')}"
				expandedText="{resourceManager.getString('spamassassin','email.label.expanded')}"
				explainText="{resourceManager.getString('spamassassin','label.explain')}"
				hideText="{resourceManager.getString('spamassassin','label.hide')}"
				width="100%"/>
			<s:HGroup width="100%">
				<s:TextInput id="emailTi" 
							 width="100%"/>
				<s:Button id="addEmailBtt" 
						  label="{resourceManager.getString('spamassassin','email.add')}"
						  buttonMode="true"
						  click="addEmailBtt_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>

		<mx:DataGrid id="emailsDg"
					 dataProvider="{emails}" 
					 width="100%"
					 showHeaders="false">
			<mx:columns>
				<mx:DataGridColumn dataField="email"/>
				<mx:DataGridColumn width="48" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<fx:Script>
									<![CDATA[
										import flash.events.MouseEvent;
										
										[Bindable]
										[Embed(source="/org/mxhero/feature/spamassassin/delete.png")]
										public static var DELETE:Class;
										
										protected function remove_clickHandler(event:MouseEvent):void
										{
											outerDocument.emails.removeItemAt(outerDocument.emails.getItemIndex(outerDocument.emailsDg.selectedItem));
										}
									]]>
								</fx:Script>
								<mx:Image source="{DELETE}"
										  buttonMode="true"
										  toolTip="{resourceManager.getString('spamassassin','remove.tooltip')}"
										  click="remove_clickHandler(event)"/>
							</mx:HBox>		  
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>	
	</s:VGroup>
	
	<mx:Spacer height="10"/>
	
	<s:Label text="{resourceManager.getString('spamassassin','second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" width="100%" gap="30">
		
		<s:HGroup width="100%" verticalAlign="top">
			<s:RadioButton id="rejectRb" 
						   groupName="action"
						   label=""
						   selected="true"/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString('spamassassin','reject.label.text')}"
				expandedText="{resourceManager.getString('spamassassin','reject.label.expanded')}"
				explainText="{resourceManager.getString('spamassassin','label.explain')}"
				hideText="{resourceManager.getString('spamassassin','label.hide')}"
				width="100%"/>
		</s:HGroup>
		
		<s:HGroup width="100%" verticalAlign="top">
			<s:RadioButton id="receiveRb" 
						   groupName="action"
						   label=""/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString('spamassassin','receive.label.text')}"
				expandedText="{resourceManager.getString('spamassassin','receive.label.expanded')}"
				explainText="{resourceManager.getString('spamassassin','label.explain')}"
				hideText="{resourceManager.getString('spamassassin','label.hide')}"
				width="100%"/>
		</s:HGroup>
		
		<s:VGroup width="100%" gap="10" paddingLeft="20">
			<s:VGroup width="100%" gap="10">
				<s:HGroup width="100%" verticalAlign="top">
					<s:CheckBox id="prefixRb" 
								   label=""
								   enabled="{receiveRb.selected}"/>
					<component:LabelExpanded
						paddingTop="5"
						labelText="{resourceManager.getString('spamassassin','prefix.label.text')}"
						expandedText="{resourceManager.getString('spamassassin','prefix.label.expanded')}"
						explainText="{resourceManager.getString('spamassassin','label.explain')}"
						hideText="{resourceManager.getString('spamassassin','label.hide')}"
						width="100%"/>
				</s:HGroup>
				<s:HGroup paddingLeft="24">
					<s:Label text="{resourceManager.getString('spamassassin','prefix.label')}"/>
					<s:TextInput id="prefixTi" enabled="{receiveRb.selected}"/>
				</s:HGroup>
			</s:VGroup>
			
			
			<s:VGroup width="100%" gap="10">
				<s:HGroup width="100%" verticalAlign="top">
					<s:CheckBox id="headerRb" 
								   label=""
								   enabled="{receiveRb.selected}"/>
					<component:LabelExpanded
						paddingTop="5"
						labelText="{resourceManager.getString('spamassassin','header.label.text')}"
						expandedText="{resourceManager.getString('spamassassin','header.label.expanded')}"
						explainText="{resourceManager.getString('spamassassin','label.explain')}"
						hideText="{resourceManager.getString('spamassassin','label.hide')}"
						width="100%"/>
				</s:HGroup>
				<s:HGroup paddingLeft="24" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('spamassassin','header.label')}"/>
					<s:TextInput id="headerTi" enabled="{receiveRb.selected}"/>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>

		
	</s:VGroup>

</mx:Module>
