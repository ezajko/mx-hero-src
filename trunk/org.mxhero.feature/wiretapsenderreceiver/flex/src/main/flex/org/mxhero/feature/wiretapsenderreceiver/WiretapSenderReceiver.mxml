<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   creationComplete="creationCompleteHandler(event)"
		   implements="org.mxhero.console.commons.feature.IFeature">
	
	<fx:Declarations>
		<mx:EmailValidator id="emailV"/>
		<mx:StringValidator id="requiredV" required="true" source="{emailTi}" property="text"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.StringUtils;
			
			private var initialProperties:ArrayCollection;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				loadData();
			}
			
			public function isValid():Boolean{
				var valArray:Array;
				var valid:String="";
				for each(var email:String in emailTi.text.split(",")){
					if( StringUtils.trim(email).length>0){
						valArray=emailV.validate(email).results;
						if(valArray!=null && valArray.length>0){
							emailTi.errorString=(valArray[0] as ValidationResult).errorMessage;
							return false;
						}
						valid=valid+","+StringUtils.trim(email);
					}
				}
				emailTi.text=valid.substr(1,valid.length);
				emailTi.errorString="";
				return true;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					emailTi.text=PropertyHelper.getProperty(initialProperties,'email.value').propertyValue;
				}
			}
			
			public function setProperties(data:ArrayCollection):void{
				initialProperties = data;
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty = new FeatureRuleProperty();
				property.propertyKey='email.value';
				property.propertyValue=emailTi.text;
				properties.addItem(property);
				return properties;
			}
			
			public function getValidationError():String{
				return emailTi.errorString;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("wiretapsenderreceiver")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout  gap="20"/>
	</s:layout>
	<s:Label text="{resourceManager.getString('wiretapsenderreceiver','first.title')}" fontSize="16" fontWeight="bold"/>
	<s:HGroup verticalAlign="middle" paddingLeft="20">
		<s:Label text="{resourceManager.getString('wiretapsenderreceiver','email.label')}"/>
		<s:TextInput id="emailTi" width="200"/>
	</s:HGroup>
	
</s:Module>
