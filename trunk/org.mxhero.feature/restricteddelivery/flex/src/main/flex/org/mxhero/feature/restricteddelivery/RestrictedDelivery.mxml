<!---
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   creationComplete="creationCompleteHandler(event)"
			verticalGap="20"
		   paddingTop="30"
		   implements="org.mxhero.console.commons.feature.IFeature" xmlns:component="org.mxhero.console.commons.feature.component.*" xmlns:fdg="org.mxhero.console.mails.fdg.*" xmlns:tlf="net.asciiworks.tlf.*">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="blockType"/>
		<mx:EmailValidator id="emailV" required="true"/>
		<mx:RegExpValidator id="domainV" required="true" expression="{Regex.domainRegex}"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.Regex;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			public var validationError:String;
			
			private static const MODULE_NAME:String = "restricteddelivery";
			
			private var initialProperties:ArrayCollection;
			
			[Bindable]
			public var emails:ArrayCollection=new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				editor.textFlow  = TextConverter.importToFlow(resourceManager.getString(MODULE_NAME,'action.return.textarea.text'),TextConverter.PLAIN_TEXT_FORMAT);
				loadData();
			}
			
			protected function addEmailBtt_clickHandler(event:MouseEvent):void
			{
				var textToValidate:String = StringUtil.trim(emailTi.text).replace(/^[@]+/,"");
				var isEmail:Boolean = true;		
				var isDomain:Boolean = true;
				var results:Array=null;
				
				results=emailV.validate(textToValidate).results;
				if(results!=null){
					if(results.length>0){
						for each(var result:ValidationResult in results){
							if(result.isError){
								emailTi.errorString= result.errorMessage;
								isEmail=false;
							}
						}
					}
				}
				
				if(!isEmail){
					results=domainV.validate(textToValidate).results;
					if(results!=null){
						if(results.length>0){
							for each(var domainResult:ValidationResult in results){
								if(domainResult.isError){
									emailTi.errorString= domainResult.errorMessage;
									isDomain=false;
								}
							}
						}
					}
					if(isDomain){
						textToValidate="@"+textToValidate;
					}
				}
				if(!isDomain && !isEmail){
					return;
				}
				
				emailTi.errorString= "";
				
				for each(var object:Object in emails){
					if(object.toString()==textToValidate){
						emailTi.errorString=resourceManager.getString(MODULE_NAME,'duplicate.email.domain');
						return;
					}
				}
				emails.addItem(textToValidate);
				emailTi.text="";
			}
			
			public function isValid():Boolean{
				if(emails.length<1 && !ownDomainCb.selected){
					validationError = resourceManager.getString(MODULE_NAME,'error.emails.empty');
					fdg.emailsDg.errorString = validationError;
					return false;
				}
				fdg.emailsDg.errorString = "";
				
				if(returnRb.selected){
					if(StringUtil.trim(TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString()).length<1){
						validationError = resourceManager.getString(MODULE_NAME,'error.return.message');
						editor.errorString = validationError;
						return false;
					}
				}
				editor.errorString="";
				
				validationError="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					for each(var property:Object in PropertyHelper.getProperties(initialProperties,"email.list")){
						emails.addItem(property.propertyValue);
					}
					
					if(PropertyHelper.getProperty(initialProperties,"own.domain.selected").propertyValue=="true"){
						ownDomainCb.selected=true;
					} else {
						ownDomainCb.selected=false;
					}
					
					var actionSelected:String = PropertyHelper.getProperty(initialProperties,"action.selection").propertyValue;
					if(actionSelected=='discard'){
						discardRb.selected=true;
					} else if(actionSelected=='return'){
						returnRb.selected=true;
						if(PropertyHelper.getProperty(this.initialProperties,"return.text.rte")!=null){
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.text.rte").propertyValue,TextConverter.TEXT_LAYOUT_FORMAT);
						}else if(PropertyHelper.getProperty(this.initialProperties,"return.text")!=null){
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.text").propertyValue,TextConverter.TEXT_FIELD_HTML_FORMAT);
						}else{
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.text.plain").propertyValue,TextConverter.PLAIN_TEXT_FORMAT);
						}
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				for each(var object:Object in emails.source){
					property = new FeatureRuleProperty();
					property.propertyKey = "email.list";
					property.propertyValue = object.toString();
					properties.addItem(property);
				}
				
				property=new FeatureRuleProperty();
				property.propertyKey='own.domain.selected';
				property.propertyValue=ownDomainCb.selected.toString();
				properties.addItem(property);
				
				property = new FeatureRuleProperty();
				property.propertyKey = "action.selection";
				if(discardRb.selected){
					property.propertyValue='discard';
					properties.addItem(property);
				}else if(returnRb.selected){
					property.propertyValue='return';
					properties.addItem(property);
					
					var returnMessage:FeatureRuleProperty = new FeatureRuleProperty();
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.text";
					var t:RteHtmlParser = new RteHtmlParser();
					t.ignoreParagraphSpace=true;
					t.FormatToHTML(TextConverter.export(editor.textFlow,TextConverter.TEXT_FIELD_HTML_FORMAT,ConversionType.STRING_TYPE).toString());
					var str:String = t.StringFormat;
					returnMessage.propertyValue = t.XMLFormat;
					properties.addItem(returnMessage);
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.text.plain";
					returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString();
					properties.addItem(returnMessage);	
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.text.rte";
					returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.TEXT_LAYOUT_FORMAT,ConversionType.STRING_TYPE).toString();
					properties.addItem(returnMessage);	
				}
				
				return properties;
			}
			
			public function getValidationError():String{
				return this.validationError;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return true;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "anyone";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("restricteddelivery")]
	</fx:Metadata>
	
	<s:Label text="{resourceManager.getString(MODULE_NAME,'first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup height="100%" width="400" verticalAlign="bottom" paddingLeft="20">
		
		<mx:Form defaultButton="{addEmailBtt}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<component:LabelExpanded
				labelText="{resourceManager.getString(MODULE_NAME,'email.label.text')}"
				expandedText="{resourceManager.getString(MODULE_NAME,'email.label.expanded')}"
				explainText="{resourceManager.getString(MODULE_NAME,'label.explain')}"
				hideText="{resourceManager.getString(MODULE_NAME,'label.hide')}"
				width="100%"/>
			<s:HGroup width="100%">
				<s:TextInput id="emailTi" 
							 width="100%"/>
				<s:Button id="addEmailBtt" 
						  label="{resourceManager.getString(MODULE_NAME,'email.add')}"
						  buttonMode="true"
						  click="addEmailBtt_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>
		
		<fdg:FilterDataGrid width="100%" id="fdg" dataProvider="{emails}"/>
		
		<mx:Spacer height="20"/>
		<s:HGroup width="100%" verticalAlign="top">
			<s:CheckBox  id="ownDomainCb" label="" selected="true"/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString(MODULE_NAME,'own.domain.label.text')}"
				expandedText="{resourceManager.getString(MODULE_NAME,'own.domain.label.expanded')}"
				explainText="{resourceManager.getString(MODULE_NAME,'label.explain')}"
				hideText="{resourceManager.getString(MODULE_NAME,'label.hide')}"
				width="100%"/>
		</s:HGroup>
		
		
	</s:VGroup>
	
	<s:Label text="{resourceManager.getString(MODULE_NAME,'second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" gap="20">
		<s:VGroup>
			<s:RadioButton id="returnRb" 
						   groupName="blockType"
						   label="{resourceManager.getString(MODULE_NAME,'action.return.label')}"
						   selected="true"/>
			<mx:Spacer/>
			<s:VGroup paddingLeft="18">
				<tlf:TLFTextEditor id="editor" width="470" height="240" 
								   automaticallyExpand="false"
								   textAreaBackgroundColor="#FFFFFF"
								   color="#00000"/>					
			</s:VGroup>
		</s:VGroup>
		<s:RadioButton id="discardRb" 
					   groupName="blockType"
					   label="{resourceManager.getString(MODULE_NAME,'action.discard.label')}"/>
	</s:VGroup>
</mx:Module>
