<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:component="org.mxhero.console.commons.feature.component.*"
		  xmlns:mails="org.mxhero.console.mails.*"
		  width="100%" height="100%" 
		  creationComplete="creationCompleteHandler(event)"
		  implements="org.mxhero.console.commons.feature.IReport" 
		  xmlns:disclaimercontract="org.mxhero.feature.disclaimercontract.*" 
		  xmlns:contract="org.mxhero.feature.disclaimercontract.contract.*" xmlns:history="org.mxhero.feature.disclaimercontract.history.*" xmlns:request="org.mxhero.feature.disclaimercontract.request.*">
	
	<fx:Declarations>
	
		
		<s:Fade id="fadeout" alphaFrom="1" alphaTo="0" duration="100"/>
		<s:Fade id="fadein" alphaFrom="0" alphaTo="1"/>
		
		<mx:DateFormatter id="dateFormatter" formatString="YYYY-MM-DD"/>
		
		<mx:SeriesSlide id="slideIn" direction="up" duration="800"/>
		
		<mx:SeriesSlide id="slideOut" direction="down" duration="800"/>
		
		<fx:Array id="bge">
			<mx:GridLines gridDirection="both" horizontalChangeCount="1" verticalChangeCount="1">
				<mx:horizontalStroke>
					<mx:SolidColorStroke color="#FFFFFF" weight="1"/>
				</mx:horizontalStroke>
				<mx:verticalStroke>
					<mx:SolidColorStroke color="#FFFFFF" weight="1"/>
				</mx:verticalStroke>
				<mx:filters>
					<s:DropShadowFilter alpha=".9" color="0x666666" distance="4"/>
				</mx:filters>
			</mx:GridLines>
		</fx:Array>
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace chartClasses "mx.charts.chartClasses.*"; 
		
		mx|ColumnChart.myChart {
			fontSize:14;
			font-weight:bold;
			data-tip-style-name:myDataTip;
			axisTitleStyleName:axisTitles;
		}

		.axisTitles {
			color:#323232;
			fontWeight:bold;
			fontFamily:Ubuntu;
			fontSize:16;
		}

		
		.myDataTip{
			color:#000000;
			font-style:italic;
			font-weight:bold;
			border-weight:2;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.mxhero.console.commons.feature.IReportService;
			import org.mxhero.console.commons.feature.TimeUtils;
			
			private static const DATA_QUERY:String = "data.query";
			private static const EMAIL_QUERY:String = "email.query";
			
			[Bindable]
			private var _reportService:IReportService;
			
			[Bindable]
			private var _data:ArrayCollection;
			
			private static const DAYSBEFORE:Number = 7*24*60*60*1000; 
			
			[Bindable]
			private static var sinceDate:Date;
			
			[Bindable]
			private var _emails:ArrayCollection;
			[Bindable]
			public var selectedDateLabel:String;
			
			private var _dataQuery:String =	"SELECT COALESCE(SUM(r0.amount),0) as `count`,date(CONVERT_TZ(r0.insert_date, '+00:00', ? )) as `date`" 
				+" FROM mail_stats_grouped r0 " 
				+" WHERE r0.insert_date >= CONVERT_TZ(?, ?, '+00:00' ) "
				+" AND r0.stat_key = 'org.mxhero.feature.disclaimercontract' ";
			
			private var _emailsQuery:String  = "SELECT r0.record_sequence, r0.message_id, r0.from_recipients, r0.sender, r0.recipient, " 
				+" r0.to_recipients, r0.cc_recipients, r0.bcc_recipients, " 
				+" r0.subject, r0.phase, r0.bytes_size, r0.state, " 
				+" r0.state_reason, r0.insert_date " 
				+" FROM mail_records r0 " 
				+" WHERE r0.insert_date BETWEEN CONVERT_TZ(?, ?, '+00:00' ) AND  CONVERT_TZ(?, ?, '+00:00' ) "
				+" AND EXISTS( SELECT 1 FROM mail_stats s "
				+" WHERE s.insert_date = r0.insert_date " 
				+" AND s.record_sequence = r0.record_sequence " 
				+" AND s.stat_key = 'org.mxhero.feature.disclaimercontract' ) ";
			
			public function setResult(queryId:String, result:*):void{
				if(queryId==DATA_QUERY){
					var dataArray:ArrayCollection = new ArrayCollection();
					for each(var dataRow:Object in result){
						var axisDate:Date = dataRow.date;
						axisDate.setTime(axisDate.getTime()+axisDate.timezoneOffset*60*1000);
						dataArray.addItem({Qty:dataRow.count,Date:axisDate});
					}
					this._data=dataArray;
				}else if(queryId==EMAIL_QUERY){
					var emailArray:ArrayCollection = new ArrayCollection();
					for each(var row:Object in result){
						emailArray.addItem({sequence:row.record_sequence,messageId:row.message_id,from:row.from_recipients,sender:row.sender
							,recipient:row.recipient,toRecipients:row.to_recipients
							,ccRecipients:row.cc_recipients,bccRecipients:row.bcc_recipients
							,subject:row.subject,phase:row.phase,bytesSize:row.bytes_size
							,state:row.state,stateReason:row.state_reason,insertDate:row.insert_date});
					}
					this._emails=emailArray;
				}
			}
			
			public function setReportService(service:IReportService):void{
				_reportService=service;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
			}
			
			
			public function refresh():void
			{
				sinceDate=new Date();
				sinceDate.setTime(sinceDate.getTime()-DAYSBEFORE);
				sinceDate.setTime(sinceDate.setHours(0,0,0,0));
				queryForData();
				queryForEmails(new Date());
			}
			
			private function queryForEmails(date:Date):void{
				var domain:String = _reportService.getDomain();
				var params:Array = new Array();
				var emailsQuery:String = _emailsQuery;
				date.setHours(0,0,0,0);
				var untilDate:Date = new Date();
				untilDate.setTime(date.getTime()+24*60*60*1000);
				params.push(dateFormatter.format(date),TimeUtils.offsetToTZ(date.getTimezoneOffset()));
				params.push(dateFormatter.format(untilDate),TimeUtils.offsetToTZ(untilDate.getTimezoneOffset()));
				selectedDateLabel=dateFormatter.format(date);
				if(domain!=null){
					params.push(domain,domain);
					emailsQuery = emailsQuery + " and (r0.recipient_domain_id = ? or r0.sender_domain_id = ?) ";
				}
				
				emailsQuery = emailsQuery + " order by r0.insert_date desc ";
				
				_reportService.processQuery(EMAIL_QUERY,emailsQuery,params,this);
				
			}
			
			private function queryForData():void{
				var domain:String = _reportService.getDomain();
				var params:Array = new Array();
				var dataQuery:String = _dataQuery;
				
				params.push(TimeUtils.offsetToTZ(sinceDate.getTimezoneOffset()));
				params.push(dateFormatter.format(sinceDate),TimeUtils.offsetToTZ(sinceDate.getTimezoneOffset()));

				if(domain!=null){
					params.push(domain,domain);
					dataQuery = dataQuery + " and (r0.recipient_domain_id = ? or r0.sender_domain_id = ?) ";
				}
				dataQuery = dataQuery + " group by date(CONVERT_TZ(r0.insert_date, '+00:00', ? ))";
				params.push(TimeUtils.offsetToTZ(sinceDate.getTimezoneOffset()));
				
				_reportService.processQuery(DATA_QUERY,dataQuery,params,this);
				
			}
			
			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				chartContainer.addEventListener(ChartItemEvent.CHANGE, chartItemEventChange, true, 0, true);
			}
			private function chartItemEventChange(event: Event): void
			{
				event.stopImmediatePropagation();
			}
			
			protected function linechart_itemClickHandler(event:ChartItemEvent):void
			{
				queryForEmails(event.hitData.item.Date);
			}
			
			protected function vs_changeHandler(event:IndexChangedEvent):void
			{
				if(event.newIndex==1){
					if(contracts!=null){
						contracts.enter();
					}
				}else if(event.newIndex==2){
					if(histories!=null){
						histories.enter();
					}
				}else if(event.newIndex==3){
					
				}	
			}


		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("disclaimercontract_report")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<component:NoDisableLinkBar dataProvider="{vs}" styleName="Reports"/>

	<mx:ViewStack id="vs" width="100%" height="100%" change="vs_changeHandler(event)">
		<s:NavigatorContent width="100%" height="100%" 
							label="{resourceManager.getString('disclaimercontract_report','usage.title')}"
							showEffect="{fadein}" hideEffect="{fadeout}">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="5" paddingRight="5" paddingTop="40">
				<s:Label color="#FFFFFF" fontSize="16" fontWeight="bold"
						 text="{resourceManager.getString('disclaimercontract_report','title')}"
						 textDecoration="underline"/>
				<mx:Spacer width="100%"/>
			</s:HGroup>
			
			<s:VGroup id="chartContainer" width="100%" height="100%"
					  creationComplete="vgroup1_creationCompleteHandler(event)">
				<mx:ColumnChart id="linechart" width="100%" height="240" axisTitleStyleName="axisTitles"
								backgroundElements="{bge}" color="0x323232" dataProvider="{_data}"
								itemClick="linechart_itemClickHandler(event)" selectionMode="single"
								showDataTips="true" styleName="myChart">
					
					<mx:filters>
						<s:DropShadowFilter alpha=".9" color="0x666666" distance="4"/>
					</mx:filters>
					
					<mx:horizontalAxis>
						<mx:DateTimeAxis id="dateAxis" autoAdjust="true" dataInterval="1"
										 dataUnits="days" disabledDays="{[]}"
										 displayName="{resourceManager.getString('disclaimercontract_report','date.axis')}"
										 labelUnits="days" maximum="{new Date()}" minimum="{sinceDate}"
										 title="{resourceManager.getString('disclaimercontract_report','date.axis')}"/>
					</mx:horizontalAxis>
					
					<mx:verticalAxis>
						<mx:LinearAxis id="qtyAxis"
									   displayName="{resourceManager.getString('disclaimercontract_report','emails.axis')}"
									   title="{resourceManager.getString('disclaimercontract_report','emails.axis')}"/>
					</mx:verticalAxis>
					
					<mx:verticalAxisRenderers>
						<mx:AxisRenderer axis="{qtyAxis}" color="#FFFFFF" fontSize="14"
										 labelRotation="45"/>	   
					</mx:verticalAxisRenderers>
					
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer axis="{dateAxis}" color="#FFFFFF" fontSize="14"
										 labelRotation="45"/>
					</mx:horizontalAxisRenderers>
					
					<mx:fill>
						<mx:SolidColor alpha="0.0" color="0x66CCFF"/>
					</mx:fill>
					
					<mx:series>
						<mx:ColumnSeries id="cserie" buttonMode="true"
										 displayName="{resourceManager.getString('disclaimercontract_report','hits.axis')}"
										 hideDataEffect="{slideOut}" selectable="true"
										 showDataEffect="{slideIn}" xField="Date" yField="Qty">
							<mx:stroke>
								<s:SolidColorStroke caps="round" color="red"/>
							</mx:stroke>
							<mx:fill>
								<mx:SolidColor alpha="0.6" color="red"/>
							</mx:fill>
							<mx:filters>
								<s:DropShadowFilter alpha=".8" color="0x666666" distance="8"/>
							</mx:filters>
						</mx:ColumnSeries>
					</mx:series>
				</mx:ColumnChart>
				<s:Label fontSize="16" fontWeight="bold" paddingLeft="50"
						 text="{resourceManager.getString('disclaimercontract_report','emails.title')+' ('+selectedDateLabel+')'}"/>
				<s:HGroup width="100%" height="100%" paddingLeft="50">
					<mails:EmailsDataGrid width="100%" height="100%" dataProvider="{_emails}"/>
				</s:HGroup>
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" 
							label="{resourceManager.getString('disclaimercontract_report','contract.title')}"
							showEffect="{fadein}" hideEffect="{fadeout}">
			<contract:Contracts id="contracts" width="100%" height="100%"
				applicationChannelSet="{this._reportService.applicationChannelSet}"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" 
							label="{resourceManager.getString('disclaimercontract_report','history.title')}"
							showEffect="{fadein}" hideEffect="{fadeout}">
			<history:Histories id="histories" width="100%" height="100%"
								applicationChannelSet="{this._reportService.applicationChannelSet}"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" 
							label="{resourceManager.getString('disclaimercontract_report','request.title')}"
							showEffect="{fadein}" hideEffect="{fadeout}">
			<request:Requests id="request" width="100%" height="100%"
							   applicationChannelSet="{this._reportService.applicationChannelSet}"/>
		</s:NavigatorContent>
	</mx:ViewStack>
	


</s:Module>
