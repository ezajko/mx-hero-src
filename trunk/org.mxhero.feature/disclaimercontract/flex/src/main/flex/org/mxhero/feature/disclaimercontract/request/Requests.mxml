<?xml version="1.0" encoding="utf-8"?>
<!--
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  width="100%" height="100%"
					  xmlns:component="org.mxhero.console.commons.feature.component.*"
					  creationComplete="enter()">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.messaging.ChannelSet;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			import mx.utils.StringUtil;
			
			import org.mxhero.console.commons.utils.StringUtils;
			import org.mxhero.feature.disclaimercontract.ImageResources;
			
			[Bindable]
			private var rm:IResourceManager=ResourceManager.getInstance();
			[Bindable]
			public var applicationChannelSet:ChannelSet;
			
			[Bindable]
			public var request:ArrayCollection;
			
			[Bindable]
			public var page:ObjectProxy;
			
			[Bindable]
			public var domain:String;
			
			
			protected function removeContractResultHandler(event:ResultEvent):void
			{
				enter();
			}
			
			public function hasPrev(page:ObjectProxy):Boolean{
				return page.actualPage>1;
			}
			
			public function hasNext(page:ObjectProxy):Boolean{
				return page.actualPage < page.totalPages;
			}
			
			protected function readRequestsResultHandler(event:ResultEvent):void
			{
				if(event.result!=null && event.result.elements!=null){
					page=new ObjectProxy(event.result);
					if(event.result.elements is ArrayCollection){
						request=event.result.elements as ArrayCollection;
					}else if(event.result.elements is Array){
						request=new ArrayCollection(event.result.elements);
					}
				}else{
					request=new ArrayCollection();
					page=new ObjectProxy();
				}
			}
			
			protected function contractService_faultHandler(event:FaultEvent):void
			{
				
			}

			public function enter():void{
				recipientTi.text="";
				contractService.readRequests(domain,null,10,0);
			}
			
			protected function prevButton_clickHandler(event:MouseEvent):void
			{
				var recipient:String = null;
				if(recipientTi.text!=null && StringUtils.trim(recipientTi.text).length>0){
					recipient=StringUtils.trim(recipientTi.text);
				}
				contractService.readRequests(domain,recipient,10,page.actualPage-1);
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				var recipient:String = null;
				if(recipientTi.text!=null && StringUtils.trim(recipientTi.text).length>0){
					recipient=StringUtils.trim(recipientTi.text);
				}
				contractService.readRequests(domain,recipient,10,page.actualPage+1);
			}
			
			protected function requestDateLabelFunction(item:Object,column:DataGridColumn):String{
				return dateFormatter.format(item.requestDate);
			}
			
			protected function dateLabelFunction(item:Object,column:DataGridColumn):String{
				return dateFormatter.format(item.approvedDate);
			}
			
			protected function vetoDateLabelFunction(item:Object,column:DataGridColumn):String{
				return dateFormatter.format(item.vetoDate);
			}
			
			protected function filter_clickHandler(event:MouseEvent):void
			{
				var recipient:String = null;
				if(recipientTi.text!=null && StringUtils.trim(recipientTi.text).length>0){
					recipient=StringUtils.trim(recipientTi.text);
				}
				contractService.readRequests(domain,recipient,10,0);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:DateTimeFormatter id="dateFormatter" timeStyle="short" dateStyle="short"/>
		<s:RemoteObject id="contractService" 
						destination="contractService" 
						showBusyCursor="true" 
						channelSet="{applicationChannelSet}"
						fault="contractService_faultHandler(event)">
			<s:method name="readRequests" result="readRequestsResultHandler(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<s:Panel width="100%" 
			 height="100%"
			 cornerRadius="0"
			 skinClass="org.mxhero.console.commons.feature.component.TitleLessPanel">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:HGroup verticalAlign="middle" paddingTop="5" paddingLeft="5" paddingRight="5">
			<s:Label text="{rm.getString('disclaimercontract_report','recipient.label')}"/>
			<s:TextInput id="recipientTi"/>
			<s:Button id="filter" click="filter_clickHandler(event)" label="{rm.getString('disclaimercontract_report','filter.label')}" />
		</s:HGroup>
		<mx:DataGrid width="100%" height="100%" dataProvider="{request}" sortableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="{rm.getString('disclaimercontract_report','request.date.label')}" dataField="requestDate" labelFunction="{requestDateLabelFunction}"/>
				<mx:DataGridColumn headerText="{rm.getString('disclaimercontract_report','approved.date.label')}" dataField="approvedDate" labelFunction="{dateLabelFunction}"/>
				<mx:DataGridColumn headerText="{rm.getString('disclaimercontract_report','rejected.date.label')}" dataField="vetoDate" labelFunction="{vetoDateLabelFunction}"/>
				<mx:DataGridColumn headerText="{rm.getString('disclaimercontract_report','sender.label')}" dataField="senderDomain"/>
				<mx:DataGridColumn headerText="{rm.getString('disclaimercontract_report','recipient.label')}" dataField="recipient"/>
				<mx:DataGridColumn resizable="false">
					<mx:itemRenderer>
						<fx:Component>
							<s:MXDataGridItemRenderer>
								<fx:Declarations>
									<mx:Glow id="glowOn"
											 alphaFrom="{minAlpha}"
											 alphaTo="{maxAlpha}"
											 blurXFrom="{minGlow}"
											 blurXTo="{maxGlow}"
											 blurYFrom="{minGlow}"
											 blurYTo="{maxGlow}"
											 color="{glowColor}"
											 duration="{duration}"/>
									
									<mx:Glow id="glowOff" 
											 alphaFrom="{maxAlpha}"
											 alphaTo="{minAlpha}"
											 blurXFrom="{maxGlow}"
											 blurXTo="{minGlow}"
											 blurYFrom="{maxGlow}"
											 blurYTo="{minGlow}"
											 color="{glowColor}"
											 duration="{duration}"/>
								</fx:Declarations>
								<fx:Script>
									<![CDATA[
										import mx.core.FlexGlobals;
										import mx.managers.PopUpManager;
										import mx.resources.IResourceManager;
										import mx.resources.ResourceManager;
										
										[Bindable]
										private var rm:IResourceManager=ResourceManager.getInstance();
										
										[Bindable]
										public var glowColor:Number=0xFFFFFF;
										
										[Bindable]
										public var minGlow:Number=1.0;
										
										[Bindable]
										public var maxGlow:Number=10.0;
										
										[Bindable]
										public var minAlpha:Number=0.0;
										
										[Bindable]
										public var maxAlpha:Number=0.5;
										
										[Bindable]
										public var duration:Number=300;
										
										private var lastColor:*;
										
										private function showEmail():void{
											var requestWindow:RequestView = new RequestView();
											requestWindow.request=data;
											PopUpManager.addPopUp(requestWindow,outerDocument.parentDocument as DisplayObject,true);
											PopUpManager.centerPopUp(requestWindow);
										}
										
										private function onRollOverHandler():void{
											lastColor=childLabel.getStyle("color");
											childLabel.setStyle("color",glowColor);
										}
										
										private function onRollOutHandler():void{
											childLabel.setStyle("color",lastColor);
										}
										
									]]>
								</fx:Script>
								
								<s:Label id="childLabel"
										 text="{rm.getString('disclaimercontract_report','details.label')}"
										 rollOver="{onRollOverHandler();}"
										 rollOut="{onRollOutHandler();}"
										 buttonMode="true"
										 mouseEnabled="true"
										 click="{showEmail()}"
										 rollOverEffect="{glowOn}"
										 rollOutEffect="{glowOff}"
										 fontSize="14"
										 fontWeight="bold"
										 textAlign="left"
										 textDecoration="underline"
										 paddingBottom="4"
										 paddingLeft="4"
										 paddingRight="4"
										 paddingTop="4"
										 />
								
							</s:MXDataGridItemRenderer>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		<s:controlBarContent>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Spacer width="100%"/>
				<component:GlowButton id="prevButton"
									  maxGlow="10.0" 
									  source="{ImageResources.LEFT_ICO}"
									  enabled="{hasPrev(page)}"
									  click="prevButton_clickHandler(event)"
									  />
				<s:Label text="{(page.totalElements==0)?0:(page.actualPage)}"/>
				<s:Label text="{'/'}"/>
				<s:Label text="{(page.totalElements==0)?0:(page.totalPages)}"/>
				<component:GlowButton id="nextButton"
									  maxGlow="10.0" 
									  source="{ImageResources.RIGHT_ICO}"
									  enabled="{hasNext(page)}"
									  click="nextButton_clickHandler(event)"/>
			</s:HGroup>	
		</s:controlBarContent>
	</s:Panel>

</s:Group>
