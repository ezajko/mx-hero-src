<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  gap="20" 
		  xmlns:FromTo="org.mxhero.console.commons.FromTo.*" 
		  xmlns:element="org.mxhero.console.commons.FromTo.element.*"
		  currentStateChange="{notifyChange()}" 
		  xmlns:component="org.mxhero.console.commons.component.*"
		  verticalAlign="middle"
		  creationComplete="creationCompleteHandler(event)" xmlns:component1="org.mxhero.console.commons.feature.component.*">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import org.mxhero.console.features.application.resources.FeaturesImages;
			import org.mxhero.console.features.application.resources.RuleViewProperties;
			import org.mxhero.console.frontend.domain.FeatureRuleDirection;
			
			public var checkRestrictionFunction:Function;
			
			[Bindable]
			public var direction:FeatureRuleDirection;

			[Bindable]
			private var effectsEnabled:Boolean = true;
			
			private var _isRestricted:Boolean=false;
					
			public function chechRestriction():void{
				if(checkRestrictionFunction!=null){
					checkRestrictionFunction();
				}
			}
			
			protected function clickHandler(fromState:String):void
			{
				if(currentState==fromState){
					currentState="all";
				} else {
					currentState=fromState;
				}
			}
			
			[Bindable(event="stateChanged")]
			public function get isDomainManaged():Boolean
			{
				if(currentState=="all" || currentState=="anyone"){
					return false;
				} else if (currentState=="domain" && 
							domainFT.ipeComboBox != null &&
							domainFT.ipeComboBox.selectedItem!=null &&
							domainFT.ipeComboBox.currentState=="show"){
					return true;
				} else if (currentState=="group" && 
							groupFT.ipeDropDownList!=null &&
							groupFT.ipeDropDownList.selectedItem!=null &&
							groupFT.ipeDropDownList.currentState=="show"){
					return true;
				} else if (currentState=="individual" && 
							individualFT.ipeComboBox!=null &&
							individualFT.ipeComboBox.selectedItem!=null &&
							individualFT.ipeComboBox.currentState=="show"){
					return true;
				}
				return false;
			}
			
			[Bindable(event="stateChanged")]
			public function get isSelected():Boolean
			{
				if(currentState=="anyone"){
					return true;
				} else if (currentState=="domain" &&
					domainFT.ipeComboBox!=null &&
					domainFT.ipeComboBox.currentState=="show"){
					return true;
				} else if (currentState=="group" &&
					groupFT.ipeDropDownList!=null &&
					groupFT.ipeDropDownList.currentState=="show"){
					return true;
				} else if (currentState=="individual" &&
					individualFT.ipeComboBox!=null &&
					individualFT.ipeComboBox.currentState=="show"){
					return true;
				}
				return false;
			}
			
			protected function notifyChange():void
			{
				dispatchEvent(new Event("stateChanged"));
				chechRestriction();
				if(currentState=="anyone"){
					if(anyoneFT.isSelected){
						direction.directionType=FeatureRuleDirection.ANYONEELSE;
						direction.freeValue=FeatureRuleDirection.ANYONEELSE;
						direction.valueId=-1;
					} else {
						direction.directionType=FeatureRuleDirection.ANYONE;
						direction.freeValue=FeatureRuleDirection.ANYONE;
						direction.valueId=-1;
					}
				} else if (currentState=="domain" &&
					domainFT.ipeComboBox != null &&
					domainFT.ipeComboBox.currentState=="show"){
					direction.directionType=FeatureRuleDirection.DOMAIN;
					direction.freeValue=domainFT.ipeComboBox.selectedLabel;
					if(domainFT.ipeComboBox.selectedItem!=null){
						direction.valueId=domainFT.ipeComboBox.selectedItem.id;
					} else {
						direction.valueId=-1;
					}
				} else if (currentState=="group" &&
					groupFT.ipeDropDownList!=null &&
					groupFT.ipeDropDownList.currentState=="show"){
					direction.directionType=FeatureRuleDirection.GROUP;
					direction.freeValue=groupFT.ipeDropDownList.selectedLabel;
					if(groupFT.ipeDropDownList.selectedItem!=null){
						direction.valueId=groupFT.ipeDropDownList.selectedItem.id;
					}else {
						direction.valueId=-1;
					}
				} else if (currentState=="individual" && 
					individualFT.ipeComboBox!=null &&
					individualFT.ipeComboBox.currentState=="show"){
					direction.directionType=FeatureRuleDirection.INDIVIDUAL;
					direction.freeValue=individualFT.ipeComboBox.selectedLabel;
					if(individualFT.ipeComboBox.selectedItem!=null){
						direction.valueId=individualFT.ipeComboBox.selectedItem.id;
					}else {
						direction.valueId=-1;
					}
				}
			}

			private function elementNextState(isRestricted:Boolean):String{
				if(isRestricted){
					return "restricted";
				}
				return "active";
			}
			
			[Bindable(event="stateChanged")]
			private function isRestrictedVisible(isSelected:Boolean,isRestricted:Boolean):Boolean{
				return (!isSelected && isRestricted);
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if(direction==null){
					return;
				}
				domainFT.currentState="inactive";
				individualFT.currentState="inactive";
				groupFT.currentState="inactive";
				
				if(direction.directionType==FeatureRuleDirection.ANYONE){
					currentState="anyone";
					anyoneFT.isSelected=false;
				} else if(direction.directionType==FeatureRuleDirection.ANYONEELSE){
					currentState="anyone";
					anyoneFT.isSelected=true;
				} else if(direction.directionType==FeatureRuleDirection.DOMAIN && 
					domainFT !=null){
					if(!isNaN(direction.valueId) && direction.valueId>-1){
						for each(var domain:Object in domainFT.ipeComboBox.comboBox.dataProvider){
							if(domain.id==direction.valueId){
								domainFT.ipeComboBox.comboBox.selectedItem=domain;
								domainFT.ipeComboBox.selectedItem=domain;
								break;
							}
						}
					}
					domainFT.ipeComboBox.selectedLabel=direction.freeValue;
					domainFT.ipeComboBox.currentState="show";
					currentState="domain";
				}else if(direction.directionType==FeatureRuleDirection.GROUP &&
					groupFT!=null && groupFT.ipeDropDownList!=null){
					if(!isNaN(direction.valueId) && direction.valueId>-1){
						for each(var group:Object in groupFT.ipeDropDownList.dropDownList.dataProvider){
							if(group.id==direction.valueId){
								groupFT.ipeDropDownList.dropDownList.selectedItem=group;
								groupFT.ipeDropDownList.selectedItem=group;
								break;
							}
						}
					}
					groupFT.ipeDropDownList.selectedLabel=direction.freeValue;
					groupFT.ipeDropDownList.currentState="show";
					currentState="group";
				} else if(direction.directionType==FeatureRuleDirection.INDIVIDUAL && 
					individualFT !=null && individualFT.ipeComboBox!=null){
					if(!isNaN(direction.valueId) && direction.valueId>-1){
						for each(var account:Object in individualFT.ipeComboBox.comboBox.dataProvider){
							if(account.id==direction.valueId){
								individualFT.ipeComboBox.comboBox.selectedItem=account;
								individualFT.ipeComboBox.selectedItem=account;
								break;
							}
						}
					} 
					individualFT.ipeComboBox.selectedLabel=direction.freeValue;		
					individualFT.ipeComboBox.currentState="show";
					currentState="individual";
				}
			}

			[Bindable]
			public function get isRestricted():Boolean
			{
				return _isRestricted;
			}
			
			public function set isRestricted(value:Boolean):void
			{
				dispatchEvent(new Event("stateChanged"));
				if(value==true && _isRestricted==false){
					if(currentState=="anyone"){
						currentState="all";
					} else if(currentState=="domain"){
						domainFT.currentState="restricted";
						if(domainFT.ipeComboBox.comboBox.selectedItem==null){
							domainFT.ipeComboBox.currentState="edit";
							domainFT.ipeComboBox.comboBox.textInput.text="";
						}
					} else if(currentState=="individual"){
						individualFT.currentState="restricted";
						if(individualFT.ipeComboBox.comboBox.selectedItem==null){
							individualFT.ipeComboBox.currentState="edit";
						}
					} 
				}else if(value==false && _isRestricted==true){
					if (currentState=="domain"){
						domainFT.currentState="active";
					} else if (currentState=="individual"){
						individualFT.currentState="active";
					}
				}
				_isRestricted = value;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Fade id="fadeout" alphaFrom="1" alphaTo="0"/>
		<s:Fade id="fadein" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="all"/>
		<s:State name="anyone"/>
		<s:State name="domain"/>
		<s:State name="group"/>
		<s:State name="individual"/>
	</s:states>
	
	<element:Anyone id="anyoneFT" 
					parentStateFunction="{clickHandler}"
					childState="anyone"
					excludeFrom="domain,group,individual" 
					currentState.anyone="active"
					notifyChange="{notifyChange}"
					enabled="{!isRestricted}"/>
	
	<element:Domain id="domainFT" 
					parentStateFunction="{clickHandler}"
					childState="domain"
					excludeFrom="anyone,group,individual"
					notifyChange="{notifyChange}"/>
	<element:AccountsGroup id="groupFT" 
						   parentStateFunction="{clickHandler}"
						   childState="group"
						   excludeFrom="anyone,domain,individual"
						   notifyChange="{notifyChange}"/>
	<element:Individual id="individualFT" 
						parentStateFunction="{clickHandler}"
						childState="individual"
						excludeFrom="anyone,domain,group"
						notifyChange="{notifyChange}"/>
	
	<component1:GlowButton 
		source="{FeaturesImages.RESTRICTED}" 
		visible="{isRestrictedVisible(isSelected,isRestricted)}" 
		maxGlow="15.0"
		toolTip="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.RESTRICTED_TOOLTIP)}"
		showEffect="{fadein}"
		hideEffect="{fadeout}"/>
	
	<s:transitions>
		<s:Transition fromState="all" toState="anyone"> 
			<s:Sequence effectStart="{anyoneFT.currentState='active'}" suspendBackgroundProcessing="true">
				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{domainFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="anyone" toState="all"> 
			<s:Sequence effectStart="{anyoneFT.currentState='inactive'}" suspendBackgroundProcessing="true">
				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{domainFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="all" toState="domain"> 
			<s:Sequence effectEnd="{domainFT.currentState=elementNextState(isRestricted)}" suspendBackgroundProcessing="true">
				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="domain" toState="all"> 
			<s:Sequence effectStart="{domainFT.currentState='inactive'}" suspendBackgroundProcessing="true">
				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="all" toState="group"> 
			<s:Sequence effectEnd="{groupFT.currentState='active'}" suspendBackgroundProcessing="true">
				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="group" toState="all"> 
			<s:Sequence effectStart="{groupFT.currentState='inactive'}" suspendBackgroundProcessing="true">
				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{individualFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="all" toState="individual"> 
			<s:Sequence effectEnd="{individualFT.currentState=elementNextState(isRestricted)}" suspendBackgroundProcessing="true">
				<s:Parallel suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="1" alphaTo="0" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="individual" toState="all"> 
			<s:Sequence effectStart="{individualFT.currentState='inactive'}" suspendBackgroundProcessing="true">
				<s:Parallel startDelay="100" suspendBackgroundProcessing="true">
					<s:Fade target="{anyoneFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{domainFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
					<s:Fade target="{groupFT}" alphaFrom="0" alphaTo="1" suspendBackgroundProcessing="true"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
</s:HGroup>
