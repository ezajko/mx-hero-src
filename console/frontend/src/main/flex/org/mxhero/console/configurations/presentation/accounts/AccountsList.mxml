<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:parsley="http://www.spicefactory.org/parsley" 
		 xmlns:component="org.mxhero.console.commons.component.*" 
		 xmlns:component1="org.mxhero.console.commons.feature.component.*"
		 currentState="{model.accountsState}">
	
	<fx:Declarations>
		<parsley:Configure/>
		
		<mx:DateFormatter id="creationDateFormatter" 
						  formatString="DD-MM-YYYY JJ:NN"/>
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="default"/>
		<s:State name="sync"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import mx.events.DataGridEvent;
			import mx.events.ListEvent;
			import mx.utils.ObjectUtil;
			
			import org.mxhero.console.commons.infrastructure.parser.StringUtils;
			import org.mxhero.console.commons.resources.ImageResources;
			import org.mxhero.console.commons.skin.TitleLessPanel;
			import org.mxhero.console.configurations.application.resources.AccountsProperties;
			import org.mxhero.console.frontend.domain.EmailAccount;
			import org.mxhero.console.frontend.domain.EmailAccountAlias;
			
			[Inject]
			[Bindable]
			public var model:AccountsViewPM;

			protected function updatedDateLabelFunction(item:Object,column:DataGridColumn):String{
				return creationDateFormatter.format(item.updatedDate);
			}
			
			protected function dataSourceLabelFunction(item:Object,column:DataGridColumn):String{
				var label:String="";
				if(item!=null){
					var ea:EmailAccount = item as EmailAccount;
					if(ea.dataSource!=EmailAccount.MANUAL 
						&& model.context.selectedDomain!=null
						&& model.context.selectedDomain.adLdap!=null){
						label=typeDdl_labelFunc(model.context.selectedDomain.adLdap.directoryType);
					}else{
						label=ea.dataSource;
					}
				}
				return label;
			}
			
			private function typeDdl_labelFunc(item:Object):String {
				var label:String="";
				if( item!=null && item is String){
					label=this.resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_RESOURCE+item as String);
					if(label==null || label.length<1){
						label=item as String;
					}
				}
				return label;
			}
			
			protected function dateLabelFunction(item:Object,column:DataGridColumn):String{
				return creationDateFormatter.format(item.createdDate);
			}
			
			protected function filterBtt_clickHandler(event:MouseEvent):void
			{
				var groupId:String;
				if(groupDdl.selectedItem==null){
					groupId=null;
				} else {
					groupId=groupDdl.selectedItem.name;
				}
				model.filterEmailAccounts(emailTI.text,groupId);
			}
			
			protected function clearBtt_clickHandler(event:MouseEvent):void
			{
				emailTI.text="";
				groupDdl.selectedIndex=-1;
				model.filterEmailAccounts(emailTI.text,null);
			}
			
			
			protected function newAccountLink_clickHandler(event:MouseEvent):void
			{
				model.newEmailAccount(this);
			}

			protected function uploadAccounstLink_clickHandler(event:MouseEvent):void
			{
				model.uploadAccount(this);
			}
			
			protected function grouplabelFunction(item:Object, column:DataGridColumn):String{
				if(item.group!=null){
					for each (var group:Object in model.context.groups){
						if(group.name==item.group){
							return group.name;
						}
					}
				}
				return "";
			}

			protected function aliaseslabelFunction(item:Object, column:DataGridColumn):String{
				var label:String="";
				if(item.aliases!=null){
					for each (var alias:Object in item.aliases){
						var accountAlias:EmailAccountAlias = alias as EmailAccountAlias;
						label=label+accountAlias.name+"@"+accountAlias.domain+'\n';
					}
					label=StringUtils.trimRight(label);
				}
				return label;
			}

			protected function datagrid1_itemDoubleClickHandler(event:ListEvent):void
			{
				model.editEmailAccount(this);
			}


			protected function ldapLink_clickHandler(event:MouseEvent):void
			{
				model.configureAdLdap(this)
			}


			protected function refreshBtt_clickHandler(event:MouseEvent):void
			{
				model.refreshAdLdap();
			}

		]]>
	</fx:Script>
	<s:layout>
		<s:HorizontalLayout paddingLeft="8" paddingTop="8" paddingRight="8" paddingBottom="8" gap="20"/>
	</s:layout>
	<s:BorderContainer backgroundAlpha="1.0" 
					   contentBackgroundAlpha="1.0" 
					   dropShadowVisible="true" 
					   borderStyle="solid" 
					   borderColor="#000000" 
					   contentBackgroundColor="#7C7B7B" 
					   backgroundColor="#696969">
		<s:layout>
			<s:VerticalLayout gap="20"/>
		</s:layout>
		<s:VGroup width="100%" paddingTop="10" 
				  horizontalAlign="left" 
				  paddingLeft="4" 
				  paddingRight="4">
			<s:BorderContainer
					minHeight="0"
					minWidth="0"
					styleName="action"
					width="100%">
				<s:layout>
					<s:VerticalLayout paddingBottom="2" paddingTop="2"/>
				</s:layout>
				<mx:LinkButton id="newAccountLink"
							   textAlign="left"
							   label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADD_NEW_EMAIL_LABEL)}" 
							   icon="{ImageResources.ADD_ICO}"
							   click="newAccountLink_clickHandler(event)"
							   styleName="action"
							   width="100%"/>
			</s:BorderContainer>
			<s:BorderContainer
				minHeight="0"
				minWidth="0"
				styleName="action"
				width="100%">
				<s:layout>
					<s:VerticalLayout paddingBottom="2" paddingTop="2"/>
				</s:layout>
			<mx:LinkButton id="uploadAccounstLink"
						   label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.UPLOAD_EMAILS_LABEL)}" 
						   icon="{ImageResources.UPLOAD_ICO}"
						   styleName="action"
						   click="uploadAccounstLink_clickHandler(event)"
						   width="100%"/>
			</s:BorderContainer>
			<s:BorderContainer
				minHeight="0"
				minWidth="0"
				styleName="action"
				width="100%">
				<s:layout>
					<s:VerticalLayout paddingBottom="2" paddingTop="2"/>
				</s:layout>
				<mx:LinkButton id="ldapLink"
							   icon="{(model.context.selectedDomain.adLdap!=null)?ImageResources.ENABLED_ICO:ImageResources.DISABLED_ICO}"
							   label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.LDAP_EMAILS_LABEL)}" 
							   styleName="action"
							   click="ldapLink_clickHandler(event)"
							   width="100%"/>
			</s:BorderContainer>			
		</s:VGroup>
		<mx:Form defaultButton="{filterBtt}" paddingTop="0" width="100%">
			<mx:FormHeading
				label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FILTER_TITLE)}"/>
			<s:Label 
				fontWeight="bold"
				text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FILTER_ACCOUNT_LABEL)}"/>
			<s:TextInput id="emailTI" width="100%"/>
			<s:Label 
				fontWeight="bold"
				text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FORM_GROUP_LABEL)}"/>
			<s:ComboBox id="groupDdl" dataProvider="{model.context.groups}" labelField="name" width="100%"/>
			<mx:Spacer height="5"/>
			<s:HGroup horizontalAlign="right" width="100%">
				<s:Button id="clearBtt" 
						  label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FILTER_BUTTON_CLEAR_LABEL)}" 
						  click="clearBtt_clickHandler(event)"
						  buttonMode="true"/>	

				<s:Button id="filterBtt" 
						  label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.FILTER_BUTTON_LABEL)}" 
						  click="filterBtt_clickHandler(event)"
						  buttonMode="true"/>
			</s:HGroup>			
		</mx:Form>		
	</s:BorderContainer>
	
	<s:VGroup width="100%" 
			  height="100%">
		<s:HGroup includeIn="sync">
			<component1:GlowButton
				id="refreshBtt"
				source="{ImageResources.REFRESH_ICON}"
				click="refreshBtt_clickHandler(event)"/>
			<s:Label text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_SCHEDULED_LABEL)}" fontWeight="bold"/>
			<s:Label text="{creationDateFormatter.format(model.context.selectedDomain.adLdap.nextUpdate)}"/>
			<mx:Spacer width="5"/>
			<s:Label text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_LAST_LABEL)}" fontWeight="bold"/>
			<s:Label text="{creationDateFormatter.format(model.context.selectedDomain.adLdap.lastUpdate)}"/>
			<mx:Spacer width="5"/>
			<mx:Image source="{ImageResources.ALERT_ICON}" 
					  visible="{model.context.selectedDomain.adLdap.error!=null}"
					  toolTip="{model.context.selectedDomain.adLdap.error}"/>
		</s:HGroup>
		<s:Panel width="100%" 
				 height="100%"
				 minWidth="600"
				 skinClass="{TitleLessPanel}"
				 cornerRadius="0">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<mx:DataGrid dataProvider="{model.accounts}" 
						 width="100%" 
						 height="100%"
						 borderStyle="none"
						 variableRowHeight="true"
						 dropShadowVisible="false"
						 selectedItem="@{model.selectedEmailAccount}"
						 itemDoubleClick="datagrid1_itemDoubleClickHandler(event)"
						 doubleClickEnabled="true"
						 mouseChildren="true">
				<mx:columns>
					<mx:DataGridColumn dataField="account" 
									   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ACCOUNT_LABEL)}" 
									   minWidth="100"/>
					<mx:DataGridColumn dataField="group"
									   labelFunction="{grouplabelFunction}"
									   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_GROUP_LABEL)}" 
									   minWidth="100"/>
					<mx:DataGridColumn dataField="dataSource"
									   labelFunction="dataSourceLabelFunction"
									   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_DATASOURCE_LABEL)}" 
									   minWidth="100"/>
					<mx:DataGridColumn dataField="aliases"
									   labelFunction="{aliaseslabelFunction}"
									   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ALIASES_LABEL)}" 
									   minWidth="100"
									   sortable="false"/>
					<mx:DataGridColumn dataField="updatedDate" 
									   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_UPDATED_LABEL)}" 
									   labelFunction="updatedDateLabelFunction"
									   width="130" resizable="false"/>
					<mx:DataGridColumn dataField="createdDate" 
									   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_CREATED_LABEL)}"
									   labelFunction="dateLabelFunction"
									   width="130" resizable="false"/>
					<mx:DataGridColumn  width="72" sortable="false" resizable="false">
						<mx:itemRenderer>
							<fx:Component>
								<mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle">
									<fx:Script>
										<![CDATA[
											import org.mxhero.console.commons.resources.ImageResources;
											import org.mxhero.console.frontend.domain.EmailAccount;
											import org.mxhero.console.configurations.application.resources.AccountsProperties;
											
										]]>
									</fx:Script>
									<component1:GlowButton maxGlow="10.0" 
														   click="{outerDocument.model.editEmailAccount(outerDocument)}"
														   source="{ImageResources.EDIT_ICO}" toolTip="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_CREATED_EDIT_LABEL)}"/>
									<component1:GlowButton maxGlow="10.0" 
														   click="{outerDocument.model.removeEmailAccount()}"
														   source="{ImageResources.DELETE_ICO}" 
														   enabled="{data.DataSource==EmailAccount.MANUAL}"
														   toolTip="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_CREATED_REMOVE_LABEL)}"/>						
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</s:Panel>
	</s:VGroup>

</s:Group>
