<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   creationComplete="creationCompleteHandler(event)"
		   xmlns:component="org.mxhero.console.commons.feature.component.*"
		   implements="org.mxhero.console.commons.feature.IFeature" xmlns:tlf="net.asciiworks.tlf.*">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="action"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			private var initialProperties:ArrayCollection;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				editor.textFlow  = TextConverter.importToFlow(resourceManager.getString('clamav','return.default.message'),TextConverter.PLAIN_TEXT_FORMAT);
				loadData();
			}
			
			public function isValid():Boolean{
				if(returnRb.selected){
					if(StringUtil.trim(TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString()).length<1){
						editor.errorString=resourceManager.getString('clamav','return.message.error');
						return false;
					}
				}
				editor.errorString="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					var selectedAction:String=PropertyHelper.getProperty(initialProperties,'action.selection').propertyValue;
					if(selectedAction=='reject'){
						dropRb.selected=true;
					} else if(selectedAction=='return'){
						returnRb.selected=true;
						if(PropertyHelper.getProperty(this.initialProperties,"return.message")!=null){
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.message").propertyValue,TextConverter.TEXT_FIELD_HTML_FORMAT);
						}else{
							editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.message.plain").propertyValue,TextConverter.PLAIN_TEXT_FORMAT);
						}
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				property = new FeatureRuleProperty();
				property.propertyKey = "action.selection";
				
				if(dropRb.selected){
					property.propertyValue="reject";
				} else if(returnRb.selected){
					property.propertyValue="return";
					
					var returnMessage:FeatureRuleProperty = new FeatureRuleProperty();
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.message";
					var t:RteHtmlParser = new RteHtmlParser();
					t.ignoreParagraphSpace=true;
					t.FormatToHTML(TextConverter.export(editor.textFlow,TextConverter.TEXT_FIELD_HTML_FORMAT,ConversionType.XML_TYPE).toString());
					var str:String = t.StringFormat;
					returnMessage.propertyValue = t.XMLFormat;
					properties.addItem(returnMessage);
					returnMessage = new FeatureRuleProperty();
					returnMessage.propertyKey = "return.message.plain";
					returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString();
					properties.addItem(returnMessage);	
					
				}

				properties.addItem(property);
				
				return properties;
			}
			
			public function getValidationError():String{
				return editor.errorString;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("clamav")]
		[ResourceBundle("textLayout")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout  gap="20"/>
	</s:layout>
	<s:Label text="{resourceManager.getString('clamav','first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup width="100%" gap="10">
		<s:HGroup width="100%" verticalAlign="top">
			<s:RadioButton id="dropRb"
						   groupName="action"
						   label=""
						   selected="true"/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString('clamav','reject.label.text')}"
				expandedText="{resourceManager.getString('clamav','reject.label.expanded')}"
				explainText="{resourceManager.getString('clamav','label.explain')}"
				hideText="{resourceManager.getString('clamav','label.hide')}"
				width="100%"/>
		</s:HGroup>
	</s:VGroup>
	<s:VGroup width="100%">
		<s:HGroup width="100%">
			<s:RadioButton id="returnRb" 
						   groupName="action"
						   label=""/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString('clamav','return.label.text')}"
				expandedText="{resourceManager.getString('clamav','return.label.expanded')}"
				explainText="{resourceManager.getString('clamav','label.explain')}"
				hideText="{resourceManager.getString('clamav','label.hide')}"
				width="100%"/>			
		</s:HGroup>
		<s:VGroup paddingLeft="24" width="100%">
			<tlf:TLFTextEditor id="editor" width="470" height="240" 
							   automaticallyExpand="false"
							   textAreaBackgroundColor="#FFFFFF"
							   color="#00000"/>		
		</s:VGroup>
	</s:VGroup>
	
</s:Module>
