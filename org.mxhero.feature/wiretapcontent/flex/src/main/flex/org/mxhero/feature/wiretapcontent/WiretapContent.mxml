<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   creationComplete="creationCompleteHandler(event)"
		   xmlns:component="org.mxhero.console.commons.feature.component.*"
		   implements="org.mxhero.console.commons.feature.IFeature">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="andor"/>
		<s:RadioButtonGroup id="actionGroup"/>
		<mx:EmailValidator id="emailV" />
		<mx:StringValidator id="requiredCopyV" required="true" source="{emailTi}" property="text"/>
		<mx:StringValidator id="requiredRedirectV" required="true" source="{redirectTi}" property="text"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.StringUtils;
			
			[Bindable]
			public var words:ArrayCollection = new ArrayCollection();
			
			private var initProperties:ArrayCollection;
			
			private var errorMessage:String;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				loadData();
			}

			public function isValid():Boolean{
				var valArray:Array;
				if(words.length<1){
					errorMessage=resourceManager.getString('wiretapcontent','no.words.error');
					wordsDg.errorString=errorMessage;
					return false;
				}
				
				if(copyRb.selected){
					valArray=requiredCopyV.validate().results;
					if(valArray!=null && valArray.length>0){
						errorMessage= (valArray[0] as ValidationResult).errorMessage;
						emailTi.errorString=errorMessage;
						return false;
					}
					var valid:String="";
					for each(var email:String in emailTi.text.split(",")){
						if( StringUtils.trim(email).length>0){
							valArray=emailV.validate(email).results;
							if(valArray!=null && valArray.length>0){
								errorMessage=(valArray[0] as ValidationResult).errorMessage
								emailTi.errorString=errorMessage;
								return false;
							}
							valid=valid+","+StringUtils.trim(email);
						}
					}
					emailTi.text=valid.substr(1,valid.length);
					valArray=requiredCopyV.validate().results;
					if(valArray!=null && valArray.length>0){
						errorMessage= (valArray[0] as ValidationResult).errorMessage;
						emailTi.errorString=errorMessage;
						return false;
					}
				}
				emailTi.errorString="";
				
				if(redirecRb.selected){
					valArray=requiredRedirectV.validate().results;
					if(valArray!=null && valArray.length>0){
						errorMessage= (valArray[0] as ValidationResult).errorMessage;
						redirectTi.errorString=errorMessage;
						return false;
					}
					var validR:String="";
					for each(var emailR:String in redirectTi.text.split(",")){
						if( StringUtils.trim(emailR).length>0){
							valArray=emailV.validate(emailR).results;
							if(valArray!=null && valArray.length>0){
								errorMessage=(valArray[0] as ValidationResult).errorMessage
								redirectTi.errorString=errorMessage;
								return false;
							}
							validR=validR+","+StringUtils.trim(emailR);
						}
					}
					redirectTi.text=validR.substr(1,validR.length);
					valArray=requiredRedirectV.validate().results;
					if(valArray!=null && valArray.length>0){
						errorMessage= (valArray[0] as ValidationResult).errorMessage;
						redirectTi.errorString=errorMessage;
						return false;
					}
				}
				emailTi.errorString="";
				redirectTi.errorString="";
				wordsDg.errorString="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initProperties = data;
			}
			
			private function loadData():void{
				if(initProperties!=null){
					var property:FeatureRuleProperty;
					property=PropertyHelper.getProperty(initProperties,'andor.selection');
					if(property!=null && property.propertyValue=='and'){
						andRd.selected=true;
						orRd.selected=false;
					} else if (property!=null && property.propertyValue=='or'){
						orRd.selected=true;
						andRd.selected=false;
					}
					
					for each(var wordProperty:Object in PropertyHelper.getProperties(initProperties,'word.list')){
						words.addItem(wordProperty.propertyValue);
					}
					
					if(PropertyHelper.getProperty(initProperties,'found.action')!=null
						&& PropertyHelper.getProperty(initProperties,'found.action').propertyValue!="copy"){
						if(PropertyHelper.getProperty(initProperties,'found.action').propertyValue=="redirect"){
							property=PropertyHelper.getProperty(initProperties,'email.value');
							if(property!=null){
								redirecRb.selected=true;
								redirectTi.text = property.propertyValue;
							}
						}else if(PropertyHelper.getProperty(initProperties,'found.action').propertyValue=="drop"){
							dropRb.selected=true;
						}
					}else{
						property=PropertyHelper.getProperty(initProperties,'email.value');
						if(property!=null){
							emailTi.text = property.propertyValue;
							copyRb.selected=true;
						}
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				property=new FeatureRuleProperty();
				property.propertyKey='andor.selection';
				if(andRd.selected){
					property.propertyValue="and";
				} else if(orRd.selected){
					property.propertyValue="or";
				}
				properties.addItem(property);
				
				for each(var word:Object in words){
					property=new FeatureRuleProperty();
					property.propertyKey='word.list';
					property.propertyValue=word.toString();
					properties.addItem(property);
				}
				
				if(copyRb.selected){
					property=new FeatureRuleProperty();
					property.propertyKey='email.value';
					property.propertyValue=emailTi.text;
					properties.addItem(property);
					
					property=new FeatureRuleProperty();
					property.propertyKey='found.action';
					property.propertyValue='copy';
					properties.addItem(property);
				}else if(redirecRb.selected){
					property=new FeatureRuleProperty();
					property.propertyKey='email.value';
					property.propertyValue=redirectTi.text;
					properties.addItem(property);
					
					property=new FeatureRuleProperty();
					property.propertyKey='found.action';
					property.propertyValue='redirect';
					properties.addItem(property);
				}else if(dropRb.selected){
					property=new FeatureRuleProperty();
					property.propertyKey='found.action';
					property.propertyValue='drop';
					properties.addItem(property);
				}

				
				return properties;
			}
			
			public function getValidationError():String{
				return errorMessage;
			}
			
			protected function addWordBtt_clickHandler(event:MouseEvent):void
			{
				var newWord:String = StringUtil.trim(wordTi.text);
				if(newWord.length<1){
					wordTi.errorString=resourceManager.getString('wiretapcontent','word.empty.error');
					return;
				}
				
				for each(var object:Object in words){
					if(object.toString()==newWord){
						wordTi.errorString=resourceManager.getString('wiretapcontent','word.already.error');
						return;
					}
				}
				words.addItem(newWord);
				wordTi.text="";
				wordTi.errorString="";
			}

			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("wiretapcontent")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout  gap="20"/>
	</s:layout>
	<s:Label text="{resourceManager.getString('wiretapcontent','first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20">
		<s:RadioButton id="orRd"
					   groupName="andor" 
					   selected="true"
					   label="{resourceManager.getString('wiretapcontent','or.label')}"/>
		<s:RadioButton id="andRd"
					   groupName="andor" 
					   label="{resourceManager.getString('wiretapcontent','and.label')}"/>
		
		<mx:Spacer height="10"/>
		
		<component:LabelExpanded labelText="{resourceManager.getString('wiretapcontent','word.label.text')}"
								 explainText="{resourceManager.getString('wiretapcontent','label.explain')}"
								 hideText="{resourceManager.getString('wiretapcontent','label.hide')}"
								 expandedText="{resourceManager.getString('wiretapcontent','word.label.expanded')}"
								 width="100%"/>
		<s:VGroup width="400">
			<mx:Form defaultButton="{addWordBtt}" width="100%"
					 paddingBottom="0"
					 paddingLeft="0"
					 paddingRight="0"
					 paddingTop="0">
				<s:HGroup width="100%">
					<s:TextInput id="wordTi" width="100%"/>
					<s:Button id="addWordBtt" 
							  label="{resourceManager.getString('wiretapcontent','add.button')}" 
							  height="100%" 
							  click="addWordBtt_clickHandler(event)"/>
				</s:HGroup>				
			</mx:Form>
			<s:DataGrid id="wordsDg"
						 dataProvider="{words}" 
						 width="100%"
						 height="250">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="data" headerText="{resourceManager.getString('wiretapcontent','word.label.text')}"/>
						<s:GridColumn width="48" sortable="false" >
							<s:itemRenderer>
								<fx:Component>
									<s:GridItemRenderer width="100%">
										<s:layout>
											<s:HorizontalLayout horizontalAlign="center"/>
										</s:layout>
										<fx:Script>
											<![CDATA[
												import flash.events.MouseEvent;
												
												[Bindable]
												[Embed(source="/org/mxhero/feature/wiretapcontent/delete.png")]
												public static var DELETE:Class;
												
												protected function remove_clickHandler(event:MouseEvent):void
												{
													outerDocument.words.removeItemAt(outerDocument.words.getItemIndex(outerDocument.wordsDg.selectedItem));
												}
											]]>
										</fx:Script>
										<s:Image source="{DELETE}"
												 buttonMode="true"
												 toolTip="{resourceManager.getString('wiretapcontent','remove.tooltip')}"
												 click="remove_clickHandler(event)"/>	
									</s:GridItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>						
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>		
		</s:VGroup>
	</s:VGroup>
	
	<mx:Spacer/>

	<s:Label text="{resourceManager.getString('wiretapcontent','second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" verticalAlign="middle" gap="15">
		<s:VGroup>
			<s:RadioButton id="copyRb" 
						   selected="true" 
						   groupName="actionGroup"
						   label="{resourceManager.getString('wiretapcontent','copy.label')}"/>
			<s:HGroup paddingLeft="20">
				<s:TextInput  id="emailTi" width="240"/>
			</s:HGroup>
		</s:VGroup>
		
		<s:VGroup>
			<s:RadioButton id="redirecRb" 
						   selected="false" 
						   groupName="actionGroup"
						   label="{resourceManager.getString('wiretapcontent','redirect.label')}"/>
			<s:HGroup paddingLeft="20">
				<s:TextInput  id="redirectTi" width="240"/>
			</s:HGroup>
		</s:VGroup>
		<s:RadioButton id="dropRb" 
					   selected="false" 
					   groupName="actionGroup"
					   label="{resourceManager.getString('wiretapcontent','drop.label')}"/>
	</s:VGroup>
	
	
	
</s:Module>
