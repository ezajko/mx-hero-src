<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   layout="vertical"
		   creationComplete="creationCompleteHandler(event)"
		   verticalGap="20"
		   paddingTop="30"
		   implements="org.mxhero.console.commons.feature.IFeature">
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		mx|RichTextEditor.editor{
			backgroundColor:#FFFFFF;
			textAreaStyleName:editorArea;
		}
		
		.editorArea{
			backgroundColor:#FFFFFF;
		}
		
	</fx:Style>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="blockType"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIFTETextField;
			import mx.core.UITextField;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.utils.StringUtil;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			public var validationError:String;
			
			[Bindable]
			public var fileTypes:ArrayCollection=new ArrayCollection([{data:"application"},
																		{data:"image"},
																		{data:"audio"},
																		{data:"video"}]);
			
			[Bindable]
			public var extensions:ArrayCollection=new ArrayCollection();
			
			private var properties:ArrayCollection;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				if(properties!=null){
					loadData();
				}
			}

			protected function addFileName_clickHandler(event:MouseEvent):void
			{
				if(extensionTi.text!=null && StringUtil.trim(extensionTi.text).length>0){
					if(addExtension({data:StringUtil.trim(extensionTi.text),
									type:"name"})){
						extensionTi.text="";
						extensionTi.errorString="";
						validationError="";
						extensionsDg.errorString="";
					}else{
						extensionTi.errorString=resourceManager.getString("attachmentblock","add.list.error");
					}
				}
			}

			public function addExtension(object:Object):Boolean{
				for each(var extension:Object in extensions){
					if(extension.data==object.data && 
						extension.type==object.type){
						return false;
					}
				}
				extensions.addItem(object);
				return true;
			}		
			
			protected function addFileType_clickHandler(event:MouseEvent):void
			{
				if(typesDdl.selectedItem!=null){
					if(addExtension({data:typesDdl.selectedItem.data,
									type:"type"})){
						typesDdl.selectedIndex=-1;
						typesDdl.errorString="";
						validationError="";
						extensionsDg.errorString="";
					}else{
						typesDdl.errorString=resourceManager.getString("attachmentblock","add.list.error");
					}
				}
			}

			public function typeLabelFunction(item:Object, column:DataGridColumn):String{
				if(item.type=="name"){
					return resourceManager.getString("attachmentblock","name.type.label");
				} else if(item.type=="type"){
					return resourceManager.getString("attachmentblock","type.type.label");
				} else if (item.type=="extension"){
					return resourceManager.getString("attachmentblock","type.extension.label");
				}
				
				return item.type;
			}

			

			protected function loadDefault_clickHandler(event:MouseEvent):void
			{
				addExtension({data:"asd",type:"extension"});
				addExtension({data:"bat",type:"extension"});
				addExtension({data:"chm",type:"extension"});
				addExtension({data:"cmd",type:"extension"});
				addExtension({data:"com",type:"extension"});
				addExtension({data:"dll",type:"extension"});
				addExtension({data:"do",type:"extension"});
				addExtension({data:"exe",type:"extension"});
				addExtension({data:"hlp",type:"extension"});
				addExtension({data:"hta",type:"extension"});
				addExtension({data:"js",type:"extension"});
				addExtension({data:"jse",type:"extension"});
				addExtension({data:"lnk",type:"extension"});
				addExtension({data:"mov",type:"extension"});
				addExtension({data:"ocx",type:"extension"});
				addExtension({data:"pif",type:"extension"});
				addExtension({data:"reg",type:"extension"});
				addExtension({data:"rm",type:"extension"});
				addExtension({data:"scr",type:"extension"});
				addExtension({data:"shb",type:"extension"});
				addExtension({data:"shm",type:"extension"});
				addExtension({data:"shs",type:"extension"});
				addExtension({data:"vbe",type:"extension"});
				addExtension({data:"vbs",type:"extension"});
				addExtension({data:"vbx",type:"extension"});
				addExtension({data:"vxd",type:"extension"});
				addExtension({data:"wav",type:"extension"});
				addExtension({data:"wmf",type:"extension"});
				addExtension({data:"wsf",type:"extension"});
				addExtension({data:"wsh",type:"extension"});
				addExtension({data:"xl",type:"extension"});
			}

			
			public function isValid():Boolean{
				if(extensions.length<1){
					validationError=resourceManager.getString("attachmentblock","error.extensions.list.empty");
					extensionsDg.errorString=resourceManager.getString("attachmentblock","error.extensions.list.empty");
					return false;
				}else{
					validationError="";
					extensionsDg.errorString="";
				}
				if(returnRb.selected==true && 
					(rte.text==null || StringUtil.trim(rte.text).length<0)){
					validationError=resourceManager.getString("attachmentblock","error.return.textarea.empty");
					rte.errorString=resourceManager.getString("attachmentblock","error.return.textarea.empty");
					return false;
				}else{
					validationError=resourceManager.getString("attachmentblock","");
					rte.errorString=resourceManager.getString("attachmentblock","");					
				}
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				this.properties=data;
			}
			
			private function loadData():void{
				var property:FeatureRuleProperty;
				
				this.extensions=new ArrayCollection();
				
				for each (var fileType:Object in PropertyHelper.getProperties(this.properties,"file.type")){
					extensions.addItem({data:fileType.propertyValue,type:"type"});
				}
				
				for each (var fileName:Object in PropertyHelper.getProperties(this.properties,"file.name")){
					extensions.addItem({data:fileName.propertyValue,type:"name"});
				}	
				
				for each (var fileExtension:Object in PropertyHelper.getProperties(this.properties,"file.extension")){
					extensions.addItem({data:fileExtension.propertyValue,type:"extension"});
				}	
				
				property = PropertyHelper.getProperty(this.properties,"return.action");
				if(property!=null && property.propertyValue=="true"){
					returnRb.selected=true;
					if(PropertyHelper.getProperty(this.properties,"return.action.text.rte")!=null){
						rte.htmlText=PropertyHelper.getProperty(this.properties,"return.action.text.rte").propertyValue;
					}else{
						property = PropertyHelper.getProperty(this.properties,"return.action.text");
						rte.text= property.propertyValue;
					}
				} else {
					property = PropertyHelper.getProperty(this.properties,"discard.action");
					if(property!=null && property.propertyValue=="true"){
						discardRb.selected=true;
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				for each (var object:Object in extensions){
					property = new FeatureRuleProperty();
					property.propertyValue=object.data;
					if(object.type=="type"){
						property.propertyKey="file.type";
					}else if(object.type=="name"){
						property.propertyKey="file.name";
					}else if(object.type=="extension"){
						property.propertyKey="file.extension";
					}
					properties.addItem(property);
				}
				
				if(returnRb.selected){
					property = new FeatureRuleProperty();
					property.propertyKey = "return.action";
					property.propertyValue = "true";
					properties.addItem(property);
					property = new FeatureRuleProperty();
					property.propertyKey = "return.action.text";
					var t:RteHtmlParser = new RteHtmlParser();
					t.ParseToHTML(rte.htmlText);
					var str:String = t.StringFormat;
					property.propertyValue = t.XMLFormat;
					properties.addItem(property);
					property = new FeatureRuleProperty();
					property.propertyKey = "return.action.text.plain";
					property.propertyValue = rte.text;
					properties.addItem(property);	
					property = new FeatureRuleProperty();
					property.propertyKey = "return.action.text.rte";
					property.propertyValue = rte.htmlText;
					properties.addItem(property);	
				} else if(discardRb.selected){
					property = new FeatureRuleProperty();
					property.propertyKey = "discard.action";
					property.propertyValue = "true";
					properties.addItem(property);
				}
				
				return properties;
			}
			
			public function getValidationError():String{
				return this.validationError;
			}
			
			protected function returnRb_changeHandler(event:Event):void
			{
				if(!returnRb.selected){
					validationError=resourceManager.getString("attachmentblock","");
					rte.errorString=resourceManager.getString("attachmentblock","");
				}
			}


			protected function addFileExtension_clickHandler(event:MouseEvent):void
			{
				
				if(fileExtensionTi.text!=null){
					var newExtension:String = StringUtil.trim(fileExtensionTi.text).replace(/^[.]+/,"");
					if(newExtension.length>0 && addExtension({data:StringUtil.trim(newExtension),
						type:"extension"})){
						fileExtensionTi.text="";
						fileExtensionTi.errorString="";
						validationError="";
						extensionsDg.errorString="";
					}else{
						fileExtensionTi.errorString=resourceManager.getString("attachmentblock","add.list.error");
					}
				}
			}

			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
				}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("attachmentblock")]
	</fx:Metadata>
	
	<s:Label text="{resourceManager.getString('attachmentblock','first.title')}" fontSize="16" fontWeight="bold"/>

	<s:VGroup height="100%" width="400" verticalAlign="bottom" paddingLeft="20">

		<mx:Form defaultButton="{addFileName}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<s:Label text="{resourceManager.getString('attachmentblock','name.label')+':'}"/>
			<s:HGroup width="100%">
				<s:TextInput id="extensionTi" 
							 width="100%"/>
				<s:Button id="addFileName" 
						  label="{resourceManager.getString('attachmentblock','add.name.button')}"
						  buttonMode="true"
						  click="addFileName_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>
		<mx:Form defaultButton="{addFileExtension}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<s:HGroup width="100%">
				<s:TextInput id="fileExtensionTi" 
							 width="100%"/>
				<s:Button id="addFileExtension" 
						  label="{resourceManager.getString('attachmentblock','add.extension.button')}"
						  buttonMode="true"
						  click="addFileExtension_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>
		<mx:Form defaultButton="{addFileType}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<s:HGroup width="100%">
				<s:DropDownList
					id="typesDdl"
					prompt="{resourceManager.getString('attachmentblock','types.prompt')}"
					dataProvider="{fileTypes}"
					width="100%"
					labelField="data"/>
				<s:Button id="addFileType" 
						  label="{resourceManager.getString('attachmentblock','add.type.button')}"
						  buttonMode="true"
						  click="addFileType_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>
		<mx:DataGrid id="extensionsDg"
					 dataProvider="{this.extensions}" 
					 width="100%"
					 height="250">
			<mx:columns>
				<mx:DataGridColumn dataField="data" 
								   headerText="{resourceManager.getString('attachmentblock','name.label')}"/>
				<mx:DataGridColumn dataField="type" 
								   width="152" 
								   headerText="{resourceManager.getString('attachmentblock','type.label')}"
								   labelFunction="{typeLabelFunction}"/>
				<mx:DataGridColumn width="48" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox width="100%" horizontalAlign="center">
								<fx:Script>
									<![CDATA[
										import flash.events.MouseEvent;
										
										[Bindable]
										[Embed(source="/org/mxhero/feature/attachmentblock/delete.png")]
										public static var DELETE:Class;
										
										protected function remove_clickHandler(event:MouseEvent):void
										{
											outerDocument.extensions.removeItemAt(outerDocument.extensions.getItemIndex(outerDocument.extensionsDg.selectedItem));
										}
									]]>
								</fx:Script>
								<mx:Image source="{DELETE}"
										  buttonMode="true"
										  toolTip="{resourceManager.getString('attachmentblock','remove.tooltip')}"
										  click="remove_clickHandler(event)"/>
							</mx:HBox>		  
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>		
		<s:HGroup width="100%" horizontalAlign="right">
			<s:Label id="loadDefault" 
					 text="{resourceManager.getString('attachmentblock','default.list.button')}"
					 fontWeight="bold"
					 textDecoration="underline"
					 buttonMode="true"
					 toolTip="{resourceManager.getString('attachmentblock','default.list.button.tooltip')}"
					 click="loadDefault_clickHandler(event)"/>					
		</s:HGroup>
 
	</s:VGroup>

	<s:Label text="{resourceManager.getString('attachmentblock','second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" gap="20">
		<s:VGroup>
			<s:RadioButton id="returnRb" 
						   groupName="blockType"
						   label="{resourceManager.getString('attachmentblock','action.return.label')}"
						   selected="true"
						   change="returnRb_changeHandler(event)"/>
			<s:VGroup paddingLeft="18">
				<mx:RichTextEditor id="rte" 
								   width="400"
								   title="{resourceManager.getString('attachmentblock','action.return.textarea.title')}"
								   text="{resourceManager.getString('attachmentblock','action.return.textarea.text')}">
				</mx:RichTextEditor>
			</s:VGroup>
		</s:VGroup>

		<s:RadioButton id="discardRb" 
					   groupName="blockType"
					   label="{resourceManager.getString('attachmentblock','action.discard.label')}"/>
	</s:VGroup>
</mx:Module>
