<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   creationComplete="creationCompleteHandler(event)"
		   implements="org.mxhero.console.commons.feature.IFeature">
	
	<fx:Declarations>
		<mx:NumberValidator id="sizeV" 
							required="true" 
							allowNegative="false" 
							source="{sizeTi}" 
							property="text"
							/>
		<mx:NumberFormatter id="numberFormatter"
							useThousandsSeparator="false"
							useNegativeSign="true"
							/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.formatters.NumberFormatter;
			import mx.managers.DragManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			import mx.validators.NumberValidatorDomainType;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			public var validationError:String;
			
			private var initialProperties:ArrayCollection;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				loadData();
			}
			
			public function isValid():Boolean{
				var valResult:Array = sizeV.validate().results;
				if(valResult!=null && valResult.length>0){
					validationError = sizeTi.errorString;
					return false;
				}
				if(returnCb.selected){
					if(StringUtil.trim(rte.text).length<1){
						validationError = resourceManager.getString('attachmentlink','error.return.message');
						return false;
					}
				}
				validationError="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				this.initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					var property:FeatureRuleProperty;
					property=PropertyHelper.getProperty(initialProperties,'max.size');
					if(property!=null){
						sizeTi.text=property.propertyValue;
					}
					property=PropertyHelper.getProperty(initialProperties,'action.selection');
					if(property!=null && property.propertyValue=='return'){
						returnCb.selected=true;
						if(PropertyHelper.getProperty(this.initialProperties,"return.message.rte")!=null){
							rte.htmlText=PropertyHelper.getProperty(this.initialProperties,"return.message.rte").propertyValue;
						}else{
							property = PropertyHelper.getProperty(this.initialProperties,"return.message");
							rte.text= property.propertyValue;
						}
					} else {
						returnCb.selected=false;
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty = new FeatureRuleProperty();
				numberFormatter.decimalSeparatorFrom=sizeV.decimalSeparator;
				numberFormatter.decimalSeparatorTo=sizeV.decimalSeparator;
				numberFormatter.thousandsSeparatorFrom=sizeV.thousandsSeparator;
				numberFormatter.thousandsSeparatorTo=sizeV.thousandsSeparator;
				property.propertyKey='max.size';
				property.propertyValue=numberFormatter.format(sizeTi.text).replace(sizeV.decimalSeparator,".");
				properties.addItem(property);
				
				ResourceManager.getInstance().localeChain[0];
				if(returnCb.selected){
					property = new FeatureRuleProperty();
					property.propertyKey='action.selection';
					property.propertyValue='return';
					properties.addItem(property);
					property = new FeatureRuleProperty();
					property.propertyKey = "return.message";
					var t:RteHtmlParser = new RteHtmlParser();
					t.ParseToHTML(rte.htmlText);
					var str:String = t.StringFormat;
					property.propertyValue = t.XMLFormat;
					properties.addItem(property);
					property = new FeatureRuleProperty();
					property.propertyKey = "return.message.plain";
					property.propertyValue = rte.text;
					properties.addItem(property);	
					property = new FeatureRuleProperty();
					property.propertyKey = "return.message.rte";
					property.propertyValue = rte.htmlText;
					properties.addItem(property);	
				} 
				
				property = new FeatureRuleProperty();
				property.propertyKey='locale';
				property.propertyValue=ResourceManager.getInstance().localeChain[0];
				properties.addItem(property);
				
				return properties;
			}
			
			public function getValidationError():String{
				return this.validationError;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("attachmentlink")]
	</fx:Metadata>
	
	<s:layout>
		<s:VerticalLayout  gap="20"/>
	</s:layout>
	
	<s:Label text="{resourceManager.getString('attachmentlink','first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:HGroup verticalAlign="middle" paddingLeft="24">
		<s:Label text="{resourceManager.getString('attachmentlink','size.label.start')}"/>
		<s:TextInput id="sizeTi" width="50" text="10"/>
		<s:Label text="{resourceManager.getString('attachmentlink','size.label.end')}"/>
	</s:HGroup>
	
	<s:Label text="{resourceManager.getString('attachmentlink','second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" gap="20">
		<s:VGroup>
			<s:CheckBox id="returnCb" 
						   label="{resourceManager.getString('attachmentlink','action.return.label')}"
						   selected="true"/>
			<s:VGroup paddingLeft="18">
				<mx:RichTextEditor id="rte" 
								   width="400"
								   enabled="{returnCb.selected}"
								   title="{resourceManager.getString('attachmentlink','action.return.textarea.title')}"
								   text="{resourceManager.getString('attachmentlink','action.return.textarea.text')}">
				</mx:RichTextEditor>		
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
</s:Module>
