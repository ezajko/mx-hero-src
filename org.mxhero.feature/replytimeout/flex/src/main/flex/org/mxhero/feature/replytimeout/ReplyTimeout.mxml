<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   layout="vertical"
		   creationComplete="creationCompleteHandler(event)"
		   verticalGap="20"
		   paddingTop="30" 
		   xmlns:component="org.mxhero.console.commons.feature.component.*"
		   implements="org.mxhero.console.commons.feature.IFeature">
	
	<fx:Declarations>
	</fx:Declarations>
	
	<mx:states>
		<s:State name="default"/>
		<s:State name="explain"/>
	</mx:states>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			[Embed(source="/images/warning.png")] 
			[Bindable]
			public static var WARNING:Class;
			
			private var initialProperties:ArrayCollection;
			
			[Bindable]
			private var dateFormats:ArrayCollection = new ArrayCollection(['dd/mm','mm/dd']);
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				loadData();
			}
			
			public function isValid():Boolean{
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					var formatProperty:FeatureRuleProperty = PropertyHelper.getProperty(initialProperties,"date.format");
					if(formatProperty!=null){
						if(formatProperty.propertyValue=='dd/mm'){
							dateFormatDdl.selectedIndex=0;
						}else{
							dateFormatDdl.selectedIndex=1;
						}
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				
				var property:FeatureRuleProperty = new FeatureRuleProperty();
				property = new FeatureRuleProperty();
				property.propertyKey = "locale";
				property.propertyValue = ResourceManager.getInstance().localeChain[0];;
				properties.addItem(property);
				
				property = new FeatureRuleProperty();
				property.propertyKey="date.format";
				property.propertyValue=dateFormatDdl.selectedItem;
				properties.addItem(property);
				
				return properties;
			}
			
			public function getValidationError():String{
				return "";
			}
			
			public function fixedTo():Boolean{
				return true;
			}
			
			public function fixedFrom():Boolean{
				return true;
			}
			
			public function fixedToValue():String{
				return "anyone";
			}
			
			public function fixedFromValue():String{
				return "owndomain";
			}
			
			protected function explainLink_clickHandler(event:MouseEvent):void
			{
				if(currentState=='default'){
					currentState='explain';
				}else{
					currentState='default';
				}
				
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("replytimeout")]
		[ResourceBundle("textLayout")]
	</fx:Metadata>

	<s:VGroup width="100%">
		
		<s:HGroup verticalAlign="bottom">
			<s:HGroup verticalAlign="bottom" paddingBottom="2">
				<mx:Image source="{WARNING}"/>
				<s:Label text="{resourceManager.getString('replytimeout','warning.message')}"/>
			</s:HGroup>
			<mx:LinkButton 	id="explainLink"
							label.default="{resourceManager.getString('replytimeout','label.explain')}" 
						   label.explain="{resourceManager.getString('replytimeout','label.hide')}"
						   click="explainLink_clickHandler(event)"
						   fontWeight="bold"
						   color="#70B2EE"
						   paddingLeft="0" 
						   paddingRight="0"
						   textRollOverColor="#FFFFFF"
						   textSelectedColor="#FFFFFF"/>
		</s:HGroup>
		<s:VGroup width="100%" excludeFrom="default" paddingLeft="30">
			<mx:Spacer height="10"/>
			<s:Label text="{resourceManager.getString('replytimeout','explain.client.support')}" 
					 fontSize="16" fontWeight="bold" textDecoration="underline"/>
			<mx:Text text="{resourceManager.getString('replytimeout','explain.client.support.text')}" 
					 width="100%" minWidth="500"/>
			<mx:Spacer/>
			<s:Label text="{resourceManager.getString('replytimeout','explain.subject.shortcode')}" 
					 fontSize="16" 
					 fontWeight="bold"
					 textDecoration="underline"/>
			<mx:Text text="{resourceManager.getString('replytimeout','explain.subject.shortcode.text')}" width="100%" minWidth="500"/>
		</s:VGroup>
	</s:VGroup>		
		<s:HGroup verticalAlign="bottom" paddingLeft="30">
			<s:Label text="{resourceManager.getString('replytimeout','date.format.label')}" fontWeight="bold"/>
			<s:DropDownList id="dateFormatDdl" 
							width="85" 
							selectedIndex="0"
							dataProvider="{dateFormats}"/>
		</s:HGroup>
		



</mx:Module>
