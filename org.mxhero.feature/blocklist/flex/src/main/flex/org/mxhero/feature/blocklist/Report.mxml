<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   layout="vertical"
		   creationComplete="creationCompleteHandler(event)"
		   width="100%"
		   height="100%" 
		   xmlns:component="org.mxhero.console.commons.feature.component.*"
		   implements="org.mxhero.console.commons.feature.IReport" xmlns:mails="org.mxhero.console.mails.*">
	
	<fx:Declarations>
	
		<mx:DateFormatter id="dateFormatter" formatString="YYYY-MM-DD"/>
		
		<mx:SeriesSlide id="slideIn" 
						duration="800" 
						direction="up"/>
		
		<mx:SeriesSlide id="slideOut" 
						duration="800" 
						direction="down"/>
		
		<fx:Array id="bge">
			<mx:GridLines 
				horizontalChangeCount="1" 
				verticalChangeCount="1"
				gridDirection="both"
				>
				<mx:horizontalStroke>
					<mx:SolidColorStroke weight="1" color="#FFFFFF"/>
				</mx:horizontalStroke>
				<mx:verticalStroke>
					<mx:SolidColorStroke weight="1" color="#FFFFFF"/>
				</mx:verticalStroke>
				<mx:filters>
					<s:DropShadowFilter
						distance="4"
						color="0x666666"
						alpha=".9"/>
				</mx:filters>
			</mx:GridLines>
		</fx:Array>
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace chartClasses "mx.charts.chartClasses.*"; 
		
		mx|ColumnChart.myChart {
			fontSize:14;
			font-weight:bold;
			data-tip-style-name:myDataTip;
			axisTitleStyleName:axisTitles;
		}

		.axisTitles {
			color:#323232;
			fontWeight:bold;
			fontFamily:Ubuntu;
			fontSize:16;
		}

		
		.myDataTip{
			color:#000000;
			font-style:italic;
			font-weight:bold;
			border-weight:2;
		}
		
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.mxhero.console.commons.feature.IReport;
			import org.mxhero.console.commons.feature.IReportService;
			import org.mxhero.console.commons.feature.TimeUtils;
			
			import spark.events.IndexChangeEvent;
			
			private static const WEEK:String = "week";
			private static const TODAY:String = "today";
			private static const DATA_QUERY:String = "data.query";
			private static const EMAIL_QUERY:String = "email.query";
			
			private var selectedPeriod:String = TODAY;
			
			private var _reportService:IReportService;
			
			[Bindable]
			private var _data:ArrayCollection;
			
			private static const DAYSBEFORE:Number = 24*60*60*1000; 
			
			[Bindable]
			private static var sinceDate:Date;
			
			[Bindable]
			private var _emails:ArrayCollection;
			
			[Bindable]
			private var options:ArrayCollection;
			
			private var _dataQuery:String =	"SELECT COUNT(*) as `count`, s.stat_value as `label`" 
				+" FROM mail_records r0 " 
				+" INNER JOIN mail_stats s"
				+" ON s.insert_date = r0.insert_date AND s.record_sequence = r0.record_sequence AND s.stat_key = 'org.mxhero.feature.blocklist.email' "
				+" WHERE r0.insert_date > CONVERT_TZ(?, ?, '+00:00' ) ";
			
			private var _emailsQuery:String  = "SELECT r0.record_sequence, r0.message_id, r0.from_recipients, r0.sender, r0.recipient, " 
				+" r0.to_recipients, r0.cc_recipients, r0.bcc_recipients, " 
				+" r0.subject, r0.phase, r0.bytes_size, r0.state, " 
				+" r0.state_reason, r0.insert_date " 
				+" FROM mail_records r0 " 
				+" WHERE r0.insert_date > CONVERT_TZ(?, ?, '+00:00' )  "
				+" AND EXISTS( SELECT 1 FROM mail_stats s "
				+" WHERE s.insert_date = r0.insert_date " 
				+" AND s.record_sequence = r0.record_sequence " 
				+" AND s.stat_key = 'org.mxhero.feature.blocklist.email' ) ";

				
			public function setResult(queryId:String, result:*):void{
				if(queryId==DATA_QUERY){
					var dataArray:Array = new Array();
					for each(var dataRow:Object in result){
						dataArray.push({Qty:dataRow.count,Email:dataRow.label});
					}
					this._data=new ArrayCollection(dataArray.reverse());
				}else if(queryId==EMAIL_QUERY){
					var emailArray:ArrayCollection = new ArrayCollection();
					for each(var row:Object in result){
						emailArray.addItem({sequence:row.record_sequence,messageId:row.message_id,from:row.from_recipients,sender:row.sender
							,recipient:row.recipient,toRecipients:row.to_recipients
							,ccRecipients:row.cc_recipients,bccRecipients:row.bcc_recipients
							,subject:row.subject,phase:row.phase,bytesSize:row.bytes_size
							,state:row.state,stateReason:row.state_reason,insertDate:row.insert_date});
					}
					this._emails=emailArray;
				}
			}
			
			public function setReportService(service:IReportService):void{
				_reportService=service;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				options = 
					new ArrayCollection([{label:resourceManager.getString('blocklist_report','last.week'),value:'week'}, 
						{label:resourceManager.getString('blocklist_report','today'),value:'today'}]);
				periodBar.selectedIndex=1;
			}
			
			
			public function refresh():void
			{
				sinceDate=new Date();
				if(selectedPeriod==TODAY){
					sinceDate.setTime(sinceDate.getTime()-DAYSBEFORE);
				}else if(selectedPeriod==WEEK){
					sinceDate.setTime(sinceDate.getTime()-7*DAYSBEFORE);
				}
				sinceDate.setHours(0,0,0,0);
				queryForData();
				queryForEmails();
			}
			
			private function queryForEmails():void{
				var domain:String = _reportService.getDomain();
				var params:Array = new Array();
				var emailsQuery:String = _emailsQuery;

				params.push(dateFormatter.format(sinceDate),TimeUtils.offsetToTZ(sinceDate.getTimezoneOffset()));

				if(domain!=null){
					params.push(domain,domain);
					emailsQuery = emailsQuery + " and (r0.recipient_domain_id = ? or r0.sender_domain_id = ?) ";
				}
				
				emailsQuery = emailsQuery + " order by r0.insert_date desc ";
				
				_reportService.processQuery(EMAIL_QUERY,emailsQuery,params,this);
				
			}
			
			private function queryForData():void{
				var domain:String = _reportService.getDomain();
				var params:Array = new Array();
				var dataQuery:String = _dataQuery;
				
				params.push(dateFormatter.format(sinceDate),TimeUtils.offsetToTZ(sinceDate.getTimezoneOffset()));

				if(domain!=null){
					params.push(domain,domain);
					dataQuery = dataQuery + " and (r0.recipient_domain_id = ? or r0.sender_domain_id = ?) ";
				}
				dataQuery = dataQuery + " group by s.stat_key ORDER BY 1 DESC  limit 10";
				_reportService.processQuery(DATA_QUERY,dataQuery,params,this);
				
			}


			protected function buttonbar1_changeHandler(event:IndexChangeEvent):void
			{
				selectedPeriod=ButtonBar(event.target).selectedItem.value;
				refresh();
			}

		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("blocklist_report")]
	</fx:Metadata>
	
	<s:HGroup horizontalAlign="right" 
			  width="100%"
			  paddingRight="5"
			  paddingBottom="5"
			  paddingTop="40">
		<s:Label 
			fontSize="18" fontWeight="bold" 
			text="{resourceManager.getString('blocklist_report','title')}" />
		<mx:Spacer width="100%"/>
		<s:ButtonBar id="periodBar"
					 buttonMode="true" 
					 change="buttonbar1_changeHandler(event)"
					 dataProvider="{options}"
					 requireSelection="true"
					 selectedIndex="1"/>
	</s:HGroup>
	
	<s:VGroup width="100%" height="100%">
		<mx:BarChart id="linechart" color="0x323232" 
					 width="100%"
					 minHeight="200"
					 height="100%"
					 showDataTips="true" 
					 styleName="myChart"
					 dataProvider="{_data}"
					 axisTitleStyleName="axisTitles"
					 backgroundElements="{bge}">
			
			<mx:filters>
				<s:DropShadowFilter
					distance="4"
					color="0x666666"
					alpha=".9"/>
			</mx:filters>
			
			<mx:horizontalAxis>
				
				<mx:LinearAxis id="qtyAxis" 
							   displayName="{resourceManager.getString('blocklist_report','amount.axis')}"  
							   title="{resourceManager.getString('blocklist_report','amount.axis')}" 
							   />
			</mx:horizontalAxis>
			
			<mx:verticalAxis>
				
				<mx:CategoryAxis
					id="emailAxis"
					categoryField="Email"
					displayName="{resourceManager.getString('blocklist_report','emails.axis')}"
					title="{resourceManager.getString('blocklist_report','emails.axis')}"
					/>
			</mx:verticalAxis>
			
			<mx:verticalAxisRenderers>
				<mx:AxisRenderer 
					axis="{emailAxis}" 
					color="#FFFFFF" 
					fontSize="14"
					/>
			</mx:verticalAxisRenderers>
			
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer 
					axis="{qtyAxis}" 
					color="#FFFFFF" 
					fontSize="14"
					/>	  
				
				
			</mx:horizontalAxisRenderers>
			
			<mx:fill>
				<mx:SolidColor color="0x66CCFF" alpha="0.0"/>
			</mx:fill>
			
			<mx:series>
				<mx:BarSeries xField="Qty" 
							  yField="Email" 
							  showDataEffect="{slideIn}" 
							  hideDataEffect="{slideOut}"
							  id="cserie"
							  >
					<mx:stroke>
						<s:SolidColorStroke color="#FFFFFF" caps="round" />
					</mx:stroke>
					<mx:fills>
						<mx:SolidColor color="0x800080" alpha=".6"/>
						<mx:SolidColor color="0x990099" alpha=".6"/>
						<mx:SolidColor color="0xB300B3" alpha=".6"/>
						<mx:SolidColor color="0xCC00CC" alpha=".6"/>
						<mx:SolidColor color="0xE600E6" alpha=".6"/>
						<mx:SolidColor color="0xFF00FF" alpha=".6"/>
						<mx:SolidColor color="0xFF1AFF" alpha=".6"/>
						<mx:SolidColor color="0xFF33FF" alpha=".6"/>
						<mx:SolidColor color="0xFF4DFF" alpha=".6"/>
						<mx:SolidColor color="0xFF66FF" alpha=".6"/>
					</mx:fills>
					<mx:filters>
						<s:DropShadowFilter
							distance="8"
							color="0x666666"
							alpha=".8"/>
					</mx:filters>
				</mx:BarSeries>
			</mx:series>
			
		</mx:BarChart>
		<s:Label text="{resourceManager.getString('blocklist_report','emails.title')}" 
				 fontWeight="bold" fontSize="16"
				 paddingLeft="50"/>
		<s:HGroup width="100%" paddingLeft="50" height="100%">
			<mails:EmailsDataGrid dataProvider="{_emails}" height="100%" width="100%"/>
		</s:HGroup>
		
	</s:VGroup>
</mx:Module>
