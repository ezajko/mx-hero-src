<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   creationComplete="creationCompleteHandler(event)"
		   implements="org.mxhero.console.commons.feature.IFeature" xmlns:component="org.mxhero.console.commons.feature.component.*" xmlns:fdg="org.mxhero.console.mails.fdg.*">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="blockType"/>
		<mx:EmailValidator id="emailV" required="true"/>
		<mx:RegExpValidator id="domainV" required="true" expression="{Regex.domainRegex}"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.Regex;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			public var validationError:String;
			
			private static const MODULE_NAME:String = "limituserdestinations";
			
			private var initialProperties:ArrayCollection;
			
			[Bindable]
			public var emails:ArrayCollection=new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				loadData();
			}

			protected function addEmailBtt_clickHandler(event:MouseEvent):void
			{
				var textToValidate:String = StringUtil.trim(emailTi.text).replace(/^[@]+/,"");
				var isEmail:Boolean = true;		
				var isDomain:Boolean = true;
				var results:Array=null;
				
				results=emailV.validate(textToValidate).results;
				if(results!=null){
					if(results.length>0){
						for each(var result:ValidationResult in results){
							if(result.isError){
								emailTi.errorString= result.errorMessage;
								isEmail=false;
							}
						}
					}
				}
				
				if(!isEmail){
					results=domainV.validate(textToValidate).results;
					if(results!=null){
						if(results.length>0){
							for each(var domainResult:ValidationResult in results){
								if(domainResult.isError){
									emailTi.errorString= domainResult.errorMessage;
									isDomain=false;
								}
							}
						}
					}
					if(isDomain){
						textToValidate="@"+textToValidate;
					}
				}
				if(!isDomain && !isEmail){
					return;
				}
				
				emailTi.errorString= "";
				
				for each(var object:Object in emails){
					if(object.toString()==textToValidate){
						emailTi.errorString=resourceManager.getString(MODULE_NAME,'duplicate.email.domain');
						return;
					}
				}
				emails.addItem(textToValidate);
				emailTi.text="";
			}
			
			public function isValid():Boolean{
				if(emails.length<1 && !ownDomainCb.selected){
					validationError = resourceManager.getString(MODULE_NAME,'error.emails.empty');
					fdg.emailsDg.errorString = validationError;
					return false;
				}
				fdg.emailsDg.errorString = "";
				
				if(returnRb.selected){
					if(StringUtil.trim(rte.text).length<1){
						validationError = resourceManager.getString(MODULE_NAME,'error.return.message');
						rte.errorString = validationError;
						return false;
					}
				}
				rte.errorString="";
				
				validationError="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					for each(var property:Object in PropertyHelper.getProperties(initialProperties,"email.list")){
						emails.addItem(property.propertyValue);
					}
					
					if(PropertyHelper.getProperty(initialProperties,"own.domain.selected").propertyValue=="true"){
						ownDomainCb.selected=true;
					} else {
						ownDomainCb.selected=false;
					}
					
					var actionSelected:String = PropertyHelper.getProperty(initialProperties,"action.selection").propertyValue;
					if(actionSelected=='discard'){
						discardRb.selected=true;
					} else if(actionSelected=='return'){
						returnRb.selected=true;
						if(PropertyHelper.getProperty(this.initialProperties,"return.text.rte")!=null){
							rte.htmlText=PropertyHelper.getProperty(this.initialProperties,"return.text.rte").propertyValue;
						}else{
							rte.text= PropertyHelper.getProperty(this.initialProperties,"return.text").propertyValue;
						}
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty;
				
				for each(var object:Object in emails.source){
					property = new FeatureRuleProperty();
					property.propertyKey = "email.list";
					property.propertyValue = object.toString();
					properties.addItem(property);
				}
				
				property=new FeatureRuleProperty();
				property.propertyKey='own.domain.selected';
				property.propertyValue=ownDomainCb.selected.toString();
				properties.addItem(property);
				
				property = new FeatureRuleProperty();
				property.propertyKey = "action.selection";
				if(discardRb.selected){
					property.propertyValue='discard';
					properties.addItem(property);
				}else if(returnRb.selected){
					property.propertyValue='return';
					properties.addItem(property);
					
					property = new FeatureRuleProperty();
					property.propertyKey = "return.text";
					var t:RteHtmlParser = new RteHtmlParser();
					t.ParseToHTML(rte.htmlText);
					var str:String = t.StringFormat;
					property.propertyValue = t.XMLFormat;
					properties.addItem(property);
					property = new FeatureRuleProperty();
					property.propertyKey = "return.text.plain";
					property.propertyValue = rte.text;
					properties.addItem(property);	
					property = new FeatureRuleProperty();
					property.propertyKey = "return.text.rte";
					property.propertyValue = rte.htmlText;
					properties.addItem(property);	
				}
				
				return properties;
			}
			
			public function getValidationError():String{
				return this.validationError;
			}
			
			public function fixedTo():Boolean{
				return true;
			}
			
			public function fixedFrom():Boolean{
				return false;
			}
			
			public function fixedToValue():String{
				return "anyone";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("limituserdestinations")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout  gap="20"/>
	</s:layout>
	<s:Label text="{resourceManager.getString(MODULE_NAME,'first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup height="100%" width="400" verticalAlign="bottom" paddingLeft="20">
		
		<mx:Form defaultButton="{addEmailBtt}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<component:LabelExpanded
				labelText="{resourceManager.getString(MODULE_NAME,'email.label.text')}"
				expandedText="{resourceManager.getString(MODULE_NAME,'email.label.expanded')}"
				explainText="{resourceManager.getString(MODULE_NAME,'label.explain')}"
				hideText="{resourceManager.getString(MODULE_NAME,'label.hide')}"
				width="100%"/>
			<s:HGroup width="100%">
				<s:TextInput id="emailTi" 
							 width="100%"/>
				<s:Button id="addEmailBtt" 
						  label="{resourceManager.getString(MODULE_NAME,'email.add')}"
						  buttonMode="true"
						  click="addEmailBtt_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>
		
		<fdg:FilterDataGrid width="100%" id="fdg" dataProvider="{emails}"/>
		
		<mx:Spacer height="20"/>
		<s:HGroup width="100%" verticalAlign="top">
			<s:CheckBox  id="ownDomainCb" label="" selected="true"/>
			<component:LabelExpanded
				paddingTop="5"
				labelText="{resourceManager.getString(MODULE_NAME,'own.domain.label.text')}"
				expandedText="{resourceManager.getString(MODULE_NAME,'own.domain.label.expanded')}"
				explainText="{resourceManager.getString(MODULE_NAME,'label.explain')}"
				hideText="{resourceManager.getString(MODULE_NAME,'label.hide')}"
				width="100%"/>
		</s:HGroup>

		
	</s:VGroup>
	
	<s:Label text="{resourceManager.getString(MODULE_NAME,'second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" gap="20">
		<s:VGroup>
			<s:RadioButton id="returnRb" 
						   groupName="blockType"
						   label="{resourceManager.getString(MODULE_NAME,'action.return.label')}"
						   selected="true"/>
			<mx:Spacer/>
			<s:VGroup paddingLeft="18">
				<mx:RichTextEditor id="rte" 
								   width="400"
								   title="{resourceManager.getString(MODULE_NAME,'action.return.textarea.title')}"
								   text="{resourceManager.getString(MODULE_NAME,'action.return.textarea.text')}">
				</mx:RichTextEditor>			
			</s:VGroup>
		</s:VGroup>
		<s:RadioButton id="discardRb" 
					   groupName="blockType"
					   label="{resourceManager.getString(MODULE_NAME,'action.discard.label')}"/>
	</s:VGroup>
</s:Module>
