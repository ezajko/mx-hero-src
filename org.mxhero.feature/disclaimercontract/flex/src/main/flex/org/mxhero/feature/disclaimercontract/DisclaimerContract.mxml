<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   creationComplete="creationCompleteHandler(event)"
		   implements="org.mxhero.console.commons.feature.IFeature" xmlns:tlf="net.asciiworks.tlf.*" xmlns:component="org.mxhero.console.commons.feature.component.*" xmlns:fdg="org.mxhero.console.mails.fdg.*">
	
	<fx:Declarations>
		<mx:EmailValidator id="emailV" required="true"/>
		<mx:RegExpValidator id="domainV" required="true" expression="{Regex.domainRegex}"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.formatters.NumberFormatter;
			import mx.managers.DragManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			import mx.validators.NumberValidatorDomainType;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.Regex;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			public var validationError:String;
			
			private var initialProperties:ArrayCollection;
			
			[Bindable]
			public var emails:ArrayCollection=new ArrayCollection();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				editor.textFlow  = TextConverter.importToFlow(resourceManager.getString('disclaimercontract','action.return.textarea.text'),TextConverter.PLAIN_TEXT_FORMAT);
				loadData();
			}
			
			protected function addEmailBtt_clickHandler(event:MouseEvent):void
			{
				var textToValidate:String = StringUtil.trim(emailTi.text).replace(/^[@]+/,"");
				var isEmail:Boolean = true;		
				var isDomain:Boolean = true;
				var results:Array=null;
				
				results=emailV.validate(textToValidate).results;
				if(results!=null){
					if(results.length>0){
						for each(var result:ValidationResult in results){
							if(result.isError){
								emailTi.errorString= result.errorMessage;
								isEmail=false;
							}
						}
					}
				}
				
				if(!isEmail){
					results=domainV.validate(textToValidate).results;
					if(results!=null){
						if(results.length>0){
							for each(var domainResult:ValidationResult in results){
								if(domainResult.isError){
									emailTi.errorString= domainResult.errorMessage;
									isDomain=false;
								}
							}
						}
					}
					if(isDomain){
						textToValidate="@"+textToValidate;
					}
				}
				if(!isDomain && !isEmail){
					return;
				}
				
				emailTi.errorString= "";
				
				for each(var object:Object in emails){
					if(object.toString()==textToValidate){
						emailTi.errorString=resourceManager.getString('disclaimercontract','duplicate.email.domain');
						return;
					}
				}
				emails.addItem(textToValidate);
				emailTi.text="";
			}
			
			public function isValid():Boolean{
				if(StringUtil.trim(TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString()).length<1){
					validationError = resourceManager.getString('disclaimercontract','error.return.message');
					return false;
				}
				if(!TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString().match(".*\{accept:.*\}.*")){
					validationError=resourceManager.getString('disclaimercontract','accept.link.present');
					return false;
				}
				validationError="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				this.initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					if(PropertyHelper.getProperty(this.initialProperties,"return.message")!=null){
						editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.message").propertyValue,TextConverter.TEXT_FIELD_HTML_FORMAT);
					}else{
						editor.textFlow  = TextConverter.importToFlow(PropertyHelper.getProperty(this.initialProperties,"return.message.plain").propertyValue,TextConverter.PLAIN_TEXT_FORMAT);
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty = new FeatureRuleProperty();

				for each(var object:Object in emails.source){
					property = new FeatureRuleProperty();
					property.propertyKey = "email.list";
					property.propertyValue = object.toString();
					properties.addItem(property);
				}
				
				var returnMessage:FeatureRuleProperty = new FeatureRuleProperty();
				returnMessage = new FeatureRuleProperty();
				returnMessage.propertyKey = "return.message";
				var t:RteHtmlParser = new RteHtmlParser();
				t.ignoreParagraphSpace=true;
				t.FormatToHTML(TextConverter.export(editor.textFlow,TextConverter.TEXT_FIELD_HTML_FORMAT,ConversionType.XML_TYPE).toString());
				var str:String = t.StringFormat;
				returnMessage.propertyValue = t.XMLFormat;
				properties.addItem(returnMessage);
				returnMessage = new FeatureRuleProperty();
				returnMessage.propertyKey = "return.message.plain";
				returnMessage.propertyValue = TextConverter.export(editor.textFlow,TextConverter.PLAIN_TEXT_FORMAT,ConversionType.STRING_TYPE).toString();
				properties.addItem(returnMessage);	
	
				return properties;
			}
			
			public function getValidationError():String{
				return this.validationError;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return true;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("disclaimercontract")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout  gap="20"/>
	</s:layout>
	
	<s:Label text="{resourceManager.getString('disclaimercontract','first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup height="100%" width="400" verticalAlign="bottom" paddingLeft="20">
		
		<mx:Form defaultButton="{addEmailBtt}" 
				 paddingLeft="0" paddingRight="0" 
				 paddingTop="0" paddingBottom="0"
				 width="100%">
			<component:LabelExpanded
				labelText="{resourceManager.getString('disclaimercontract','email.label.text')}"
				expandedText="{resourceManager.getString('disclaimercontract','email.label.expanded')}"
				explainText="{resourceManager.getString('disclaimercontract','label.explain')}"
				hideText="{resourceManager.getString('disclaimercontract','label.hide')}"
				width="100%"/>
			<s:HGroup width="100%">
				<s:TextInput id="emailTi" 
							 width="100%"/>
				<s:Button id="addEmailBtt" 
						  label="{resourceManager.getString('disclaimercontract','email.add')}"
						  buttonMode="true"
						  click="addEmailBtt_clickHandler(event)"/>							
			</s:HGroup>
		</mx:Form>
		
		<fdg:FilterDataGrid id="fdg" dataProvider="{emails}" width="100%"/>	
	</s:VGroup>
	
	<s:Label text="{resourceManager.getString('disclaimercontract','second.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" gap="20" width="600">
		<mx:Text htmlText="{resourceManager.getString('disclaimercontract','description.text.html')}" width="100%"/>
		<s:VGroup>
			<tlf:TLFTextEditor id="editor" width="470" height="240" 
							   automaticallyExpand="false"
							   textAreaBackgroundColor="#FFFFFF"
							   color="#00000"/>	
			<s:HGroup width="100%" horizontalAlign="right">
				<s:Label id="loadDefault" 
						 text="{resourceManager.getString('disclaimercontract','default.disclaimer.button')}"
						 fontWeight="bold"
						 textDecoration="underline"
						 buttonMode="true"
						 click="{editor.textFlow  = TextConverter.importToFlow(resourceManager.getString('disclaimercontract','action.return.textarea.text'),TextConverter.PLAIN_TEXT_FORMAT)}"/>		
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</s:Module>
