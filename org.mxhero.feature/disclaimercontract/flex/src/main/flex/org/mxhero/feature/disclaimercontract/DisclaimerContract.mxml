<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   creationComplete="creationCompleteHandler(event)"
		   implements="org.mxhero.console.commons.feature.IFeature">
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.formatters.NumberFormatter;
			import mx.managers.DragManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			import mx.validators.NumberValidatorDomainType;
			
			import org.mxhero.console.commons.feature.FeatureRuleProperty;
			import org.mxhero.console.commons.feature.IFeature;
			import org.mxhero.console.commons.feature.PropertyHelper;
			import org.mxhero.console.commons.utils.RteHtmlParser;
			
			public var validationError:String;
			
			private var initialProperties:ArrayCollection;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				styleManager.loadStyleDeclarations("styles/mxhero.swf",true,false,ApplicationDomain.currentDomain);
				loadData();
			}
			
			public function isValid():Boolean{
				if(StringUtil.trim(rte.text).length<1){
					validationError = resourceManager.getString('disclaimer','error.return.message');
					return false;
				}
				if(!rte.text.match(".*\{accept:.*\}.*")){
					validationError="Accept link must be present.";
					return false;
				}
				validationError="";
				return true;
			}
			
			public function setProperties(data:ArrayCollection):void{
				this.initialProperties=data;
			}
			
			private function loadData():void{
				if(initialProperties!=null){
					if(PropertyHelper.getProperty(this.initialProperties,"return.message.rte")!=null){
						rte.htmlText=PropertyHelper.getProperty(this.initialProperties,"return.message.rte").propertyValue;
					}else{
						rte.text= PropertyHelper.getProperty(this.initialProperties,"return.message").propertyValue;
					}
				}
			}
			
			public function getProperties():ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				var property:FeatureRuleProperty = new FeatureRuleProperty();

				property.propertyKey = "return.message";
				var t:RteHtmlParser = new RteHtmlParser();
				t.ParseToHTML(rte.htmlText);
				var str:String = t.StringFormat;
				property.propertyValue = t.XMLFormat;
				properties.addItem(property);
				property = new FeatureRuleProperty();
				property.propertyKey = "return.message.plain";
				property.propertyValue = rte.text;
				properties.addItem(property);	
				property = new FeatureRuleProperty();
				property.propertyKey = "return.message.rte";
				property.propertyValue = rte.htmlText;
				properties.addItem(property);	
				return properties;
			}
			
			public function getValidationError():String{
				return this.validationError;
			}
			
			public function fixedTo():Boolean{
				return false;
			}
			
			public function fixedFrom():Boolean{
				return true;
			}
			
			public function fixedToValue():String{
				return "";
			}
			
			public function fixedFromValue():String{
				return "";
			}
			
			public function set applicationContext(ap:Object):void{
			}
			
			public function get applicationContext():Object{
				return null;
			}
		]]>
	</fx:Script>
	
	<fx:Metadata>
		[ResourceBundle("disclaimercontract")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout  gap="20"/>
	</s:layout>
	<s:Label text="{resourceManager.getString('disclaimercontract','first.title')}" fontSize="16" fontWeight="bold"/>
	
	<s:VGroup paddingLeft="20" gap="20" width="600">
		<mx:Text htmlText="{resourceManager.getString('disclaimercontract','description.text.html')}" width="100%"/>
		<s:VGroup>
			<mx:RichTextEditor id="rte" 
							   width="400"
							   title="{resourceManager.getString('disclaimercontract','action.return.textarea.title')}"
							   text="{resourceManager.getString('disclaimercontract','action.return.textarea.text')}">
			</mx:RichTextEditor>	
			<s:HGroup width="100%" horizontalAlign="right">
				<s:Label id="loadDefault" 
						 text="{resourceManager.getString('disclaimercontract','default.disclaimer.button')}"
						 fontWeight="bold"
						 textDecoration="underline"
						 buttonMode="true"
						 click="{rte.text=resourceManager.getString('disclaimercontract','action.return.textarea.text')}"/>		
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</s:Module>
