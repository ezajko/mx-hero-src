<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 close="{cancelBtt_clickHandler()}"
		 title="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.LDAP_EMAILS_LABEL)}" 
		 xmlns:component="org.mxhero.console.commons.component.*" 
		 xmlns:component1="org.mxhero.console.commons.feature.component.*"
		 creationComplete="titlewindow1_creationCompleteHandler(event)"
		 currentStateChange="titlewindow1_currentStateChangeHandler(event)"
		 preinitialize="{loadXMLFile()}"
		 maxHeight="500">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.validation.ValidatorGroup;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.StateChangeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import org.mxhero.console.commons.infrastructure.parser.StringUtils;
			import org.mxhero.console.commons.resources.CommonsProperties;
			import org.mxhero.console.configurations.application.resources.AccountsProperties;
			import org.mxhero.console.frontend.domain.DomainAdLdap;
			import org.mxhero.console.frontend.domain.DomainAdLdapProperty;
			
			import spark.events.IndexChangeEvent;

			[Bindable]
			public var model:AccountsViewPM;
			
			[Bindable]
			public var defaultProperties:ArrayCollection;
			
			private var lastState:String;
			
			[Bindable]
			public var adLdap:DomainAdLdap;
			
			private var customVG:ValidatorGroup = new ValidatorGroup();
			
			private var ldapVG:ValidatorGroup = new ValidatorGroup();
			
			private var gappsVG:ValidatorGroup = new ValidatorGroup();
			
			protected function saveBtt_clickHandler(event:MouseEvent):void
			{
				if(checkValid()){
					model.updateAdLdap(adLdap);
				}
			}

			private function checkValid():Boolean{
				var isValid:Boolean=false;
				if(currentState=='zimbra' ||
					currentState=='exchange'){
					this.customVG.validate();
					if(customVG.isValid){
						isValid=true;
					}
				}else if(currentState=='ldap'){
					this.ldapVG.validate();
					if(ldapVG.isValid){
						isValid=true;
					}
				}else if(currentState=='gapps'){
					this.gappsVG.validate();
					if(gappsVG.isValid){
						isValid=true;
					}
				}else if(currentState=='none'){
					isValid=true;
				}
				return isValid;
			}
			

			protected function cancelBtt_clickHandler(event:MouseEvent=null):void
			{
				PopUpManager.removePopUp(this);
			}

			[Bindable]
			protected var resources:ArrayCollection = new ArrayCollection(['none','exchange','zimbra','ldap','gapps']);
			

			protected function typeDdl_valueCommitHandler(event:FlexEvent):void
			{
				this.currentState=typeDdl.selectedItem;
				selectType(typeDdl.selectedItem);
				PopUpManager.centerPopUp(this);
			}


			protected function typeDdl_changeHandler(event:IndexChangeEvent):void
			{
				this.currentState=typeDdl.selectedItem;
				selectType(typeDdl.selectedItem);
				PopUpManager.centerPopUp(this);
			}
			
			private function typeDdl_labelFunc(item:Object):String {
				var label:String="";
				if( item!=null && item is String){
					label=this.resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_RESOURCE+item as String);
					if(label==null || label.length<1){
						label=item as String;
					}
				}
				return label;
			}


			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				lastState=currentState;
				
				customVG.addValidator(addressV);
				customVG.addValidator(portV);
				customVG.addValidator(userV);
				customVG.addValidator(passwordV);
				customVG.addValidator(baseV);
				
				ldapVG.addValidator(addressV);
				ldapVG.addValidator(portV);
				ldapVG.addValidator(userV);
				ldapVG.addValidator(passwordV);
				ldapVG.addValidator(filterV);
				ldapVG.addValidator(baseV);
				
				gappsVG.addValidator(userV);
				gappsVG.addValidator(passwordV);
				
				//if this is an empty entity
				if(adLdap.directoryType==null){
					typeDdl.selectedIndex=resources.getItemIndex("none");
				}else{
					selectType(adLdap.directoryType);
				}
			}
			
			private function selectType(type:String):void{
				adLdap.directoryType=type;
				if(type!="ldap"){
					adLdap.filter=null;
				}
				typeDdl.selectedIndex=resources.getItemIndex(type);
			}


			protected function testBtt_clickHandler(event:MouseEvent):void
			{
				if(checkValid()){
					currentState="result";
					model.testAdLdap(adLdap);
				}
			}


			protected function okBtt_clickHandler(event:MouseEvent):void
			{
				currentState=lastState;
				model.testAccounts=null;
				model.accountsAdLdap.errorText.hideError();
			}


			protected function titlewindow1_currentStateChangeHandler(event:StateChangeEvent):void
			{
				lastState=event.oldState;
				if(event.newState=="result"){
					okBtt.label=Alert.okLabel;
				}
				if(adLdap.accountProperties==null){
					adLdap.accountProperties=new ArrayCollection();
				}
				if(adLdap.accountProperties.length<1 && model.context.selectedDomain.adLdap!=null){
					if(event.newState=="zimbra"){
						adLdap.accountProperties.addAll(getDefaults(event.newState));
					}else if(event.newState=="exchange"){
						adLdap.accountProperties.addAll(getDefaults(event.newState));
					}else if(event.newState=="ldap"){
						adLdap.accountProperties.addAll(getDefaults(event.newState));
					}
				}
			}
			
			protected function getDefaults(type:String):ArrayCollection{
				var properties:ArrayCollection = new ArrayCollection();
				for each(var property:Object in defaultProperties){
					if(property.type==type){
						var propertyToAdd:DomainAdLdapProperty = new DomainAdLdapProperty();
						propertyToAdd.name=property.name;
						propertyToAdd.key=property.key;
						properties.addItem(propertyToAdd);
					}
				}
				return properties;
			}
			
			protected function emailslabelFunction(item:Object, column:GridColumn):String{
				var label:String="";
				if(item.emails!=null){
					for each (var alias:Object in item.emails){
						label=label+alias.toString()+'\n';
					}
					label=StringUtils.trimRight(label);
				}
				return label;
			}

			protected function addPropertyBtt_clickHandler(event:MouseEvent):void
			{
				for each(var property:DomainAdLdapProperty in adLdap.accountProperties){
					if(StringUtils.trim(property.name.toLocaleLowerCase())==StringUtils.trim(propertyNameTi.text.toLocaleLowerCase())){
						propertyNameTi.errorString=resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_ACCOUNT_PROPERTIES_ERROR);
						return;
					}
				}
				propertyNameTi.errorString="";
				var newProperty:DomainAdLdapProperty = new DomainAdLdapProperty();
				newProperty.name=StringUtils.trim(propertyNameTi.text.toLocaleLowerCase());
				if(adLdap.accountProperties==null){
					adLdap.accountProperties = new ArrayCollection();
				}
				propertyNameTi.text="";
				adLdap.accountProperties.addItem(newProperty);
			}
			
			private function resultHandler(event:ResultEvent):void {
				defaultProperties=event.result.property;
			}
			
			private function loadXMLFile():void {
				propertiesService.headers["Pragma"] = "no-cache";
				propertiesService.headers["Cache-Control"] = "no-cache";
				propertiesService.send();
			}
			
			protected function defaultsBtt_clickHandler(event:MouseEvent):void
			{
				adLdap.accountProperties.removeAll();
				adLdap.accountProperties.addAll(getDefaults(currentState));
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:StringValidator id="addressV" required="true" property="text" source="{addressTi}"/>
		<mx:NumberValidator id="portV" required="true" property="text" source="{portTi}"/>
		<mx:StringValidator id="userV" required="true" property="text" source="{userTi}"/>
		<mx:StringValidator id="passwordV" required="true" property="text" source="{passwordTi}"/>
		<mx:StringValidator id="filterV" required="true" property="text" source="{filterTi}"/>
		<mx:StringValidator id="baseV" required="true" property="text" source="{baseTi}"/>
		<s:HTTPService id="propertiesService" 
					   url="org/mxhero/console/configurations/adldap_properties.xml" 
					   result="resultHandler(event);"/>
	</fx:Declarations>
	
	<s:states> 
		<s:State name="none"/>    
		<s:State name="zimbra"/>
		<s:State name="exchange"/>
		<s:State name="ldap"/>
		<s:State name="gapps"/>
		<s:State name="result"/>
	</s:states> 
	
	<s:layout>
		<s:VerticalLayout paddingLeft="0" paddingBottom="5" paddingRight="0" paddingTop="0" gap="0"/>
	</s:layout>
	<component:ErrorText id="errorText" width="100%" soundEnabled="{model.context.applicationUser.soundsEnabled}"/>
	<s:Scroller height="100%">
	<s:VGroup height="100%" gap="0">
		<s:Form excludeFrom="result">
			<s:layout>
				<s:FormLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
			</s:layout>
			<component1:LabelExpanded
				width="100%"
				labelExplainStyleName="labelexpanded_explain_right"
				expandedText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_EXPANDED_TEXT)}"
				explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" 
				hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" />
			
			<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_SERVER_TYPE_LABEL)}" width="100%">
				<s:DropDownList id="typeDdl"
								dataProvider="{resources}" 
								width="100%"
								valueCommit="typeDdl_valueCommitHandler(event)"
								change="typeDdl_changeHandler(event)"
								labelFunction="{typeDdl_labelFunc}"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_SERVER_ADDRESS)}" excludeFrom="none,result,gapps">
				<s:HGroup verticalAlign="middle">
					<s:Label text="ldap://"/>
					<s:TextInput id="addressTi" text="@{adLdap.addres}"/>
					<s:Label text=":"/>
					<s:TextInput id="portTi" width="30" text="@{adLdap.port}"/>
					<s:CheckBox label="ssl" selected="@{adLdap.sslFlag}"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_USER)}" width="100%" excludeFrom="none,result">
				<s:TextInput id="userTi" width="100%" text="@{adLdap.user}"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_PASSWORD)}" width="100%" excludeFrom="none,result">
				<s:TextInput id="passwordTi" width="100%" text="@{adLdap.password}" displayAsPassword="true"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_FILTER)}" width="100%" excludeFrom="none,exchange,zimbra,result,gapps">
				<s:TextArea id="filterTi" width="100%" heightInLines="3" text="@{adLdap.filter}"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_SEARCH)}" width="100%" excludeFrom="none,result,gapps">
				<s:TextArea id="baseTi" width="100%" heightInLines="3" text="@{adLdap.base}"/>
			</s:FormItem>
			<s:FormItem label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_BIND_AUTHENTICATE_LABEL)}" width="100%" excludeFrom="none,result,gapps">
				<s:TextArea id="dnAuthenticate" width="100%" heightInLines="3" text="@{adLdap.dnAuthenticate}"/>
			</s:FormItem>
			<s:FormItem width="100%" excludeFrom="none,result">
				<s:HGroup verticalAlign="top" width="100%">
					<s:CheckBox selected="@{adLdap.overrideFlag}"/>
					<component1:LabelExpanded 
						labelText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_OVERRIDE)}"
						explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}" 
						hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}"
						expandedText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_OVERRIDE_EXPLAIN)}"
						width="100%"/>
				</s:HGroup>
			</s:FormItem>

			<s:VGroup width="100%" excludeFrom="none,result,gapps">
				<s:Line width="100%" height="2" />
				<s:Label fontWeight="bold" 
						 text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_ACCOUNT_PROPERTIES)}"/>
				<s:Form defaultButton="{addPropertyBtt}">
					<s:layout>
						<s:FormLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
					</s:layout>
					<s:HGroup>
						<s:TextInput id="propertyNameTi"/>
						<s:Button id="addPropertyBtt" 
								  label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_ACCOUNT_PROPERTIES_ADD)}" 
								  click="addPropertyBtt_clickHandler(event)"/>
					</s:HGroup>
				</s:Form>

				<s:DataGrid dataProvider="{adLdap.accountProperties}" 
							 id="accountPropertiesDG"
							 width="100%" 
							 height="100%"
							 variableRowHeight="false"
							 mouseChildren="true"
							 editable="true">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="name" 
										headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_ACCOUNT_PROPERTIES_NAME)}"
										minWidth="120"/>
							<s:GridColumn dataField="key" 
											   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_ACCOUNT_PROPERTIES_KEY)}"
											   editable="true"
											   minWidth="120"/>
							<s:GridColumn  width="42" sortable="false" resizable="false" editable="false">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer width="100%">
											<s:layout>
												<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
											</s:layout>
											<fx:Script>
												<![CDATA[
													import org.mxhero.console.commons.resources.ImageResources;
													import org.mxhero.console.configurations.application.resources.AccountsProperties;
													
													protected function deleteAccountBtt_clickHandler(event:MouseEvent):void
													{
														outerDocument.adLdap.accountProperties.removeItemAt(outerDocument.adLdap.accountProperties.getItemIndex(data));
													}
													
												]]>
											</fx:Script>
											<component1:GlowButton id="deleteAccountBtt"
																   maxGlow="10.0" 
																   click="deleteAccountBtt_clickHandler(event)"
																   source="{ImageResources.DELETE_ICO}" 
																   toolTip="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.ADLDAP_ACCOUNT_PROPERTIES_REMOVE)}"/>						

										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
				<s:HGroup width="100%" horizontalAlign="right">
					<s:Label id="defaultsBtt" fontStyle="italic" textDecoration="underline" 
							 text="load defaults" 
							 buttonMode="true" 
							 click="defaultsBtt_clickHandler(event)"/>
				</s:HGroup>
				
			</s:VGroup >	

			
			<s:HGroup horizontalAlign="right" width="100%" paddingTop="15">
				<s:Button id="testBtt" 
						  label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.TEST_LABEL)}" 
						  click="testBtt_clickHandler(event)"
						  excludeFrom="none,result,gapps"
						  buttonMode="true"/>
				<s:Button id="saveBtt" 
						  label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.SAVE_LABEL)}" 
						  click="saveBtt_clickHandler(event)"
						  buttonMode="true"/>
				<s:Button id="cancelBtt" 
						  label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.CANCEL_LABEL)}" 
						  click="cancelBtt_clickHandler(event)"
						  buttonMode="true"/>
			</s:HGroup>
		</s:Form>
		<s:Form includeIn="result">
			<s:layout>
				<s:FormLayout gap="0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
			</s:layout>
			<s:VGroup horizontalAlign="right">
				<s:DataGrid id="resultDG" 
							 height="250" 
							 variableRowHeight="true"
							 dataProvider="{model.testAccounts}">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="uid" 
										  headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ACCOUNT_LABEL)}" 
										  width="150"/>
							<s:GridColumn dataField="emails"
										  labelFunction="{emailslabelFunction}"
										  headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ALIASES_LABEL)}" 
										  width="300"
										  sortable="false"/>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
				<s:Button id="okBtt"
						  buttonMode="true"
						  enabled="{!model.isTestting}"
						  click="okBtt_clickHandler(event)"/>
			</s:VGroup>
		</s:Form>
	</s:VGroup>
	</s:Scroller>
</s:TitleWindow>
