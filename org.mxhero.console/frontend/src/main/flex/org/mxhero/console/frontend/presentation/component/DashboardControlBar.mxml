<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="42" 
		 dropShadowVisible="true"
		 xmlns:parsley="http://www.spicefactory.org/parsley" 
		 xmlns:component1="org.mxhero.console.commons.component.*" 
		 xmlns:component2="org.mxhero.console.commons.feature.component.*"
		 >
	<s:layout>
		<s:VerticalLayout paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0"/>
	</s:layout>

	<fx:Declarations>
		<parsley:Configure/>
		<s:Sequence id="showEffect">
			<mx:Glow alphaFrom="{minAlpha}"
					 alphaTo="{maxAlpha}"
					 blurXFrom="{minGlow}"
					 blurXTo="{maxGlow}"
					 blurYFrom="{minGlow}"
					 blurYTo="{maxGlow}"
					 color="{glowColor}"
					 duration="{duration}"/>
			
			<mx:Glow alphaFrom="{maxAlpha}"
					 alphaTo="{minAlpha}"
					 blurXFrom="{maxGlow}"
					 blurXTo="{minGlow}"
					 blurYFrom="{maxGlow}"
					 blurYTo="{minGlow}"
					 color="{glowColor}"
					 duration="{duration}"/>		
		</s:Sequence>

	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.navigation.NavigationEvent;
			
			import mx.containers.ViewStack;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.resources.IResourceManager;
			
			import org.mxhero.console.commons.resources.ImageResources;
			import org.mxhero.console.configurations.Configurations;
			import org.mxhero.console.configurations.application.ConfigurationsDestinations;
			import org.mxhero.console.features.application.FeaturesDestinations;
			import org.mxhero.console.frontend.application.MainDestination;
			import org.mxhero.console.frontend.application.resources.DashboardProperties;
			import org.mxhero.console.frontend.domain.ApplicationContext;
			import org.mxhero.console.frontend.domain.Configuration;
			import org.mxhero.console.frontend.presentation.DashboardPM;
			import org.mxhero.console.reports.application.ReportsDestinations;
			
			[Inject]
			[Bindable]
			public var model:DashboardPM;
			
			[Bindable]
			public var dataProvider:Object;
			
			[Inject]
			[Bindable]
			public var applicationContext:ApplicationContext;
			
			[Bindable]
			public var glowColor:Number=0xFFFFFF;
			
			[Bindable]
			public var minGlow:Number=1.0;
			
			[Bindable]
			public var maxGlow:Number=15.0;
			
			[Bindable]
			public var minAlpha:Number=0.0;
			
			[Bindable]
			public var maxAlpha:Number=0.8;
			
			[Bindable]
			public var duration:Number=1000;
			
			private var prevIndex:Number=0;
			
			protected function linkBar_itemClickHandler(event:ItemClickEvent):void
			{
				if(prevIndex==event.index || event.index==0){
					if(event.index==0){
						model.dispatcher(NavigationEvent.createNavigateToEvent(MainDestination.HOME));
					} else if (event.index==1){
						model.dispatcher(NavigationEvent.createNavigateToEvent(FeaturesDestinations.LIST));
					} else if(event.index==2){
						model.dispatcher(NavigationEvent.createNavigateToEvent(ReportsDestinations.LIST));
					} else if(event.index==3){
						model.dispatcher(NavigationEvent.createNavigateToEvent(ConfigurationsDestinations.LIST));
					}
				}
				prevIndex=event.index;
			}
			
			protected function getLogoImage(configuration:Configuration):Object{
				if(configuration!=null
				&& configuration.logoPath!=null
				&& configuration.logoPath.length>1){
					return applicationContext.configuration.logoPath;
				}else{
					return ImageResources.LOGO_IMG;
				}
			}


		]]>
	</fx:Script>
	<s:backgroundFill>
		<s:SolidColor color="#70B2EE" alpha="0.6"/>
	</s:backgroundFill>
	<s:HGroup width="100%" height="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5">
		<s:Image source="{getLogoImage(applicationContext.configuration)}" height="32" width="130"/>
		<s:Spacer width="20"/>
		<component1:NoDisabledLinkBar id="linkBar" 
									  styleName="Dashboard" 
									  itemClick="linkBar_itemClickHandler(event)"
									  dataProvider="{dataProvider}">
		</component1:NoDisabledLinkBar>
		<s:Spacer width="100%"/>
		
		<s:Label text="{resourceManager.getString(DashboardProperties.NAME,DashboardProperties.DOMAIN_LABEL)}" 
				 visible="{model.hasToShowDomain(applicationContext.selectedDomain)}" 
				 fontWeight="bold"
				 showEffect="{showEffect}"
				 color="#FFFFFF"/>
		<s:Label text="{applicationContext.selectedDomain.domain}" 
				 visible="{model.hasToShowDomain(applicationContext.selectedDomain)}"
				 showEffect="{showEffect}"
				 color="#FFFFFF"/>
		
		<s:Label text="{resourceManager.getString(DashboardProperties.NAME,DashboardProperties.USER_LABEL)}" 
				 fontWeight="bold" color="#FFFFFF"/>
		<s:Label text="{applicationContext.applicationUser.userName}" color="#FFFFFF"/>
		<s:Spacer width="5"/>
		<s:Group>
			<component2:GlowButton source="{ImageResources.LOGOUT_ICON}" 
								   glowColor="#ff0000" 
								   maxGlow="15.0" 
								   click="{model.logout()}" 
								   visible="{!model.hasToShowDomain(applicationContext.selectedDomain)}"
								   toolTip="{resourceManager.getString(DashboardProperties.NAME,DashboardProperties.LOGOUT_TOOLTIP)}"/>
			<component2:GlowButton source="{ImageResources.BACK_TO_ADMIN}" 
								   maxGlow="15.0" 
								   click="{model.logout()}" 
								   visible="{model.hasToShowDomain(applicationContext.selectedDomain)}"
								   toolTip="{resourceManager.getString(DashboardProperties.NAME,DashboardProperties.LOGOUT_DOMAIN_TOOLTIP)}"/>
		</s:Group>
	</s:HGroup>
</s:BorderContainer>
