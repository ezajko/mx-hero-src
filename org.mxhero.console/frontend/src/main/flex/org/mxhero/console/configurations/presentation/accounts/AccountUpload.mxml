<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 close="cancelBtt_clickHandler()" minWidth="550" minHeight="350"
		 title="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.UPLOAD_EMAILS_LABEL)}" 
		 creationComplete="{init()}"
		 xmlns:component="org.mxhero.console.commons.component.*" xmlns:component1="org.mxhero.console.commons.feature.component.*">
	<fx:Declarations>
		<mx:EmailValidator id="emailV" required="true"/>
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import org.mxhero.console.commons.infrastructure.parser.CSV;
			import org.mxhero.console.commons.infrastructure.parser.StringUtils;
			import org.mxhero.console.commons.resources.CommonsProperties;
			import org.mxhero.console.configurations.application.resources.AccountsProperties;
			import org.mxhero.console.frontend.domain.EmailAccount;
			import org.mxhero.console.frontend.domain.EmailAccountAlias;
			
			[Bindable]
			public var model:AccountsViewPM;

			private var fileLoader:FileReference=new FileReference();
			
			[Bindable]
			public var uploadedAccounts:ArrayCollection;
			
			private function init():void{
				fileLoader.addEventListener(Event.SELECT,selectHandler);
				fileLoader.addEventListener(Event.COMPLETE,completeHandle);
				
			}

			[Bindable]
			private var fileLoading:Boolean=false;
			
			private var csv:CSV = new CSV();
			
			private function selectHandler(event:Event):void{
				fileName.text=fileLoader.name;
				fileLoader.load();
				fileLoading=true;
			}
			
			private function completeHandle(event:Event):void{
				csv.data=fileLoader.data.readUTFBytes(fileLoader.data.length);
				csv.fieldSeperator=";";
				csv.embededHeader=false;
				csv.decode();
				uploadedAccounts=new ArrayCollection();
				for each(var row:Array in csv.data){
					if(StringUtil.trim(row[0].toString()).length>0){
						var account:EmailAccount = new EmailAccount();
						account.account=StringUtils.trim(row[0].toString().toLowerCase()).split("@")[0];
						account.dataSource=EmailAccount.MANUAL;
						account.domain=model.context.selectedDomain.domain;
 						if(row.length>1){
							var emails:Array = StringUtils.trim(row[1].toString().toLowerCase()).split(",");
							for each(var email:String in emails){
								email=StringUtils.trim(email);
								var result:ValidationResultEvent = emailV.validate(email);
								var isValid:Boolean=true;
								if(result!=null && result.results!=null && result.results.length>0){
									for each(var resultValue:ValidationResult in result.results){
										if(resultValue.isError){
											isValid=false;
										}
									}
								}
								if(isValid){
									var alias:EmailAccountAlias = new EmailAccountAlias();
									alias.dataSource=EmailAccount.MANUAL;
									alias.name=email.split("@")[0];
									alias.domain=email.split("@")[1];
									if(account.aliases==null){
										account.aliases=new ArrayCollection();
									}
									account.aliases.addItem(alias);
								}
							}
						}
						uploadedAccounts.addItem(account);
					}
				}
				fileLoading=false;
			}
			
			public function cancelBtt_clickHandler(event:MouseEvent=null):void
			{
				PopUpManager.removePopUp(this);
			}


			protected function saveBtt_clickHandler(event:MouseEvent):void
			{
				model.uploadAllAccounts(uploadedAccounts,failOnError.selected);
			}
			
			protected function aliaseslabelFunction(item:Object, column:GridColumn):String{
				var label:String="";
				if(item.aliases!=null){
					for each (var alias:Object in item.aliases){
						var accountAlias:EmailAccountAlias = alias as EmailAccountAlias;
						label=label+accountAlias.name+"@"+accountAlias.domain+'\n';
					}
					label=StringUtils.trimRight(label);
				}
				return label;
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<component:ErrorText id="errorText" width="100%" soundEnabled="{model.context.applicationUser.soundsEnabled}"/>
	<s:VGroup paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="0" gap="10">
		<component1:LabelExpanded width="100%" 
								 labelText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.UPLOAD_FILE_LABEL)}"
								 explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPLAIN_LABEL)}"
								 hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.HIDE_LABEL)}"
								 expandedText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.UPLOAD_FILE_LABEL_EXPLAIN)}"/>		
		
		<s:HGroup width="100%" verticalAlign="bottom">
			<s:TextInput editable="false" id="fileName" width="240"/>
			<s:Button label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.UPLOAD_SELECT_FILE_LABEL)}"
					  enabled="{!(model.isLoading || fileLoading)}"
					  click="{fileLoader.browse()}"/>
			<mx:Spacer width="100%"/>
			<mx:ProgressBar width="100%" labelPlacement="center" indeterminate="true" visible="{(model.isLoading || fileLoading)}"/>
		</s:HGroup>
		
		<s:DataGrid width="100%" 
					 height="100%"
					 maxHeight="300"
					 id="dg"
					 dataProvider="{uploadedAccounts}"
					 editable="true"
					 styleName="editable">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn 	dataField="account"
										headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ACCOUNT_LABEL)}" 
										minWidth="100"
										editable="true"/>
					<s:GridColumn dataField="aliases"
									   labelFunction="{aliaseslabelFunction}"
									   headerText="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.COLUMN_ALIASES_LABEL)}" 
									   minWidth="100"
									   sortable="false"/>
					<s:GridColumn  width="42" sortable="false" resizable="false" editable="false">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer width="100%">
									<s:layout>
										<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
									</s:layout>
									<fx:Script>
										<![CDATA[
											import org.mxhero.console.commons.resources.ImageResources;
											
										]]>
									</fx:Script>
									<component1:GlowButton maxGlow="10.0" 
														  click="{outerDocument.uploadedAccounts.removeItemAt(outerDocument.uploadedAccounts.getItemIndex(outerDocument.dg.selectedItem))}"
														  source="{ImageResources.DELETE_ICO}"/>						
								</s:GridItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:CheckBox id="failOnError" label="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.UPLOAD_CHECK_FAIL_ON_ERROR)}" selected="true"/>
		<s:HGroup  width="100%">
			<s:Label text="{resourceManager.getString(AccountsProperties.NAME,AccountsProperties.UPLOAD_TOTAL_ACCOUNTS)+uploadedAccounts.length}"/>
			<s:Spacer width="100%"/>
			<s:Button id="saveBtt" label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.SAVE_LABEL)}" 
					  click="saveBtt_clickHandler(event)"
					  enabled="{!(model.isLoading || fileLoading)}"/>
			<s:Button id="cancelBtt" label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.CANCEL_LABEL)}" 
					  click="cancelBtt_clickHandler(event)"
					  enabled="{!(model.isLoading || fileLoading)}"/>
		</s:HGroup>		
	</s:VGroup>
</s:TitleWindow>
