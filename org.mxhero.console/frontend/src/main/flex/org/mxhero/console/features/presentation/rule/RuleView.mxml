<?xml version="1.0" encoding="utf-8"?>
<!--
mxHero is a platform that intends to provide a single point of development 
and single point of distribution for email solutions and enhancements. It does this
by providing an extensible framework for rapid development and deployment of
email solutions.

Copyright (C) 2012  mxHero Inc.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<s:Scroller xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:component="org.mxhero.console.commons.component.*" 
		 xmlns:parsley="http://www.spicefactory.org/parsley" 
		 xmlns:FromTo="org.mxhero.console.commons.FromTo.*"
		 enabled="{!model.isUpdating}"
		 horizontalScrollPolicy="off" 
		 xmlns:loader="org.mxhero.console.features.presentation.loader.*" 
		 xmlns:component1="org.mxhero.console.commons.feature.component.*"
		 creationComplete="scroller1_creationCompleteHandler(event)"
		 visible="{featureLoader.loaded}">

	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import org.mxhero.console.commons.resources.CommonsProperties;
			import org.mxhero.console.features.application.resources.FeaturesImages;
			import org.mxhero.console.features.application.resources.RuleViewProperties;
			import org.mxhero.console.frontend.application.message.ApplicationErrorMessage;

			[Inject]
			[Bindable]
			public var model:RuleViewPM;
			
			protected function topCancelBtt_clickHandler(event:MouseEvent):void
			{
				Alert.show(resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.CANCEL_CHANGES_TEXT),"",Alert.OK|Alert.CANCEL,null,cancelHandler);
			}

			public function cancelHandler(event:CloseEvent):void{
				if(event.detail==Alert.OK){
					model.cancel();
					saveBtt.errorString="";
				}
			}
			
			protected function cancelBtt_clickHandler(event:MouseEvent):void
			{
				model.cancel();
				saveBtt.errorString="";
			}


			protected function saveBtt_clickHandler(event:MouseEvent):void
			{

				if(!fromTo.isValid()){
					saveBtt.errorString=fromTo.errorMessage;
					model.dispatcher(new ApplicationErrorMessage(fromTo.errorMessage,true));
					return;
				}

				if(!featureLoader.featureModule.isValid()){
					saveBtt.errorString=featureLoader.featureModule.getValidationError();
					return;
				}
				model.rule.properties=featureLoader.featureModule.getProperties();
				saveBtt.errorString="";
				model.save();
			}


			protected function fromTo_creationCompleteHandler(event:FlexEvent):void
			{
				RuleViewPM.refreshFunction=this.refresh;
			}
			
			public function refresh():void{
				callLater(labelTi.setFocus);
				fromTo.refresh();
			}
			
			protected function scroller1_creationCompleteHandler(event:FlexEvent):void
			{
				this.addEventListener(MouseEvent.MOUSE_WHEEL,handleWheel,true,50);
			}
			
			public function changeAccountFunction(accountFilter:String):void{
				model.filterAccount(accountFilter);
			}
			
			public function changeDomainFunction(domainFilter:String):void{
				model.filterDomain(domainFilter);
			}
			
			protected function handleWheel(event:MouseEvent):void{
				event.delta = event.delta > 0 ? 1 : -1;
			}

		]]>
	</fx:Script>

	<s:Group width="100%" visible="{featureLoader.loaded}">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center"/>
		</s:layout>
		
		<s:VGroup width="800" 
				  horizontalAlign="center"
				  gap="20"  
				  paddingLeft="10" paddingRight="10" 
				  paddingBottom="20" paddingTop="20">

				<s:HGroup verticalAlign="top" width="100%">
					<component:TitleExpanded width="100%"
											 title="{model.feature.simpleLabel}"
											 description="{model.feature.description}"
											 expandedDescription="{model.feature.explain}"
											 expandedLabel="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPAND_LABEL)}"
											 reducedLabel="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.REDUCED_LABEL)}"
											 enableExpanded="true"/>	
					<component1:GlowButton id="topCancelBtt" source="{FeaturesImages.CANCEL}" buttonMode="true" click="topCancelBtt_clickHandler(event)"/>
				</s:HGroup>
				
				
				<s:VGroup paddingLeft="30" width="100%" height="100%" gap="30">
					<s:VGroup verticalAlign="top" gap="4" width="100%">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label 
								fontWeight="bold"
								text="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.RULE_LABEL)}"/>
							<s:TextInput id="labelTi" text="@{model.rule.name}" width="450"/>
						</s:HGroup>
						<component1:LabelExpanded width="100%"
												  explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPLAIN_LABEL)}"
												  hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.HIDE_LABEL)}"
												  expandedText="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.RULE_LABEL_EXPLAIN)}"/>		
					</s:VGroup>
					
					<s:VGroup gap="0" width="100%">
						<component1:LabelExpanded
							id="fromToTitle"
							width="100%"
							expandedLabelStyleName="labelexpanded_label_fromto"
							explainText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.EXPLAIN_LABEL)}"
							hideText="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.HIDE_LABEL)}"
							labelText="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.MAIL_FROM_TO_LABEL)}"	
							expandedText="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.MAIL_FROM_TO_LABEL_EXPANDED)}"/>

					</s:VGroup>
					
					<s:VGroup width="100%" height="100%" gap="0">
						<FromTo:FromTo id="fromTo" 
									   feature="{featureLoader.featureModule}"
									   fromDirection="{model.rule.fromDirection}"
									   toDirection="{model.rule.toDirection}"
									   adminOrder="@{model.rule.adminOrder}"
									   twoWays="@{model.rule.twoWays}"
									   showAdminPriority="false"
									   visible="{featureLoader.loaded}"
									   changeAccountFunction="{this.changeAccountFunction}"
									   changeDomainFunction="{this.changeDomainFunction}"
									   creationComplete="fromTo_creationCompleteHandler(event)"/>
						
						<loader:FeatureLoader id="featureLoader" 
											  url="{model.feature.moduleUrl}" 
											  width="100%"
											  />
					</s:VGroup>

					
					<mx:Spacer height="100%"/>
					<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" paddingBottom="20">
						<s:Button id="saveBtt" 
								  click="saveBtt_clickHandler(event)"
								  buttonMode="true"
								  label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.SAVE_LABEL)}"
								  enabled="{featureLoader.currentState=='loaded'}"/>		
						<s:Button id="cancelBtt" 
								  click="cancelBtt_clickHandler(event)"
								  buttonMode="true"
								  label="{resourceManager.getString(CommonsProperties.NAME,CommonsProperties.CANCEL_LABEL)}"/>
					</s:HGroup>		
				</s:VGroup>	

		</s:VGroup>
	</s:Group>
</s:Scroller>
