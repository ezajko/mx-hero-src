<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:FromTo="org.mxhero.console.commons.FromTo.*" 
				   gap="20"
				   verticalAlign="middle" 
				   xmlns:parsley="http://www.spicefactory.org/parsley" 
				   xmlns:element="org.mxhero.console.commons.FromTo.element.*">

	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import org.mxhero.console.features.application.resources.RuleViewProperties;
			import org.mxhero.console.frontend.domain.ApplicationContext;
			
			public var parentStateFunction:Function;
			
			public var childState:String;
			
			[Bindable]
			public var isClickEnabled:Boolean = true;
			
			public var notifyChange:Function;
			
			[Bindable]
			public var isSelected:Boolean;
			
			[Inject]
			[Bindable]
			public var model:ApplicationContext;
			
			protected function item_clickHandler(event:MouseEvent):void
			{
				if(parentStateFunction!=null){
					parentStateFunction(childState);
				}
			}

			protected function anyoneelse_valueCommitHandler(event:FlexEvent):void
			{
				this.isSelected=anyoneelse.selected;
				notifyChange();
			}
			
			[Bindalbe]
			public function checkboxLabel(selectedDomain:Object):String{
				var label:String=null;
				if(selectedDomain==null){
					label = resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ANYONE_CHECKBOX_LABEL);
				}else{
					label = resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ANYONE_CHECKBOX_DOMAIN_START_LABEL) 
						+" "+selectedDomain.domain+" "
						+resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ANYONE_CHECKBOX_DOMAIN_END_LABEL);
				}
				return label;
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>

	<s:states>
		<s:State name="inactive"/>
		<s:State name="active"/>
		<s:State name="restricted"/>
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="inactive" toState="active">
			<s:Fade target="{checkBox}" alphaFrom="0" alphaTo="1"/>
		</s:Transition>
		<s:Transition fromState="inactive" toState="restricted">
			<s:Fade target="{checkBox}" alphaFrom="0" alphaTo="1"/>
		</s:Transition>
	</s:transitions>
	
		<element:Item text="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ANYONE_LABEL)}" 
					 toolTip.inactive="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ITEM_SELECT_ANYONE_TOOLTIP)}" 
					 toolTip.active="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ITEM_CLEAR_TOOLTIP)}"
					 width="150"
					 click="item_clickHandler(event)"
					 enabled.restricted="false"/>
	
	<s:BorderContainer id="checkBox" 
					   excludeFrom="inactive"
					   backgroundColor="#7c7b7b"  
					   borderVisible="true" 
					   dropShadowVisible="true"
					   borderStyle="solid"
					   minHeight="0"
					   buttonMode="true"
					   borderColor="#cccccc" 
					   cornerRadius="4"
					   minWidth="340"
					   height="100%">
		<s:VGroup height="100%" width="100%" 
				  horizontalAlign="center" 
				  verticalAlign="middle"
				  paddingLeft="5"
				  paddingRight="5">
			<mx:CheckBox 
						id="anyoneelse"
						enabled="{isClickEnabled}"
						selected="@{isSelected}"
						disabledColor="#FFFFFF"
						label="{checkboxLabel(model.selectedDomain)}"
						valueCommit="anyoneelse_valueCommitHandler(event)"
						toolTip="{resourceManager.getString(RuleViewProperties.NAME,RuleViewProperties.ANYONE_CHECKBOX_TOOLTIP)}"/>
		</s:VGroup>
	</s:BorderContainer>
</s:HGroup>
