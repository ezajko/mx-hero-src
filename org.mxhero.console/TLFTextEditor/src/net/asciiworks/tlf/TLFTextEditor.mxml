<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="creationCompleteHandler(event)"
         xmlns:supportClasses="net.asciiworks.tlf.supportClasses.*" width="100%">

    <s:layout>
        <s:VerticalLayout gap="0"/>
    </s:layout>

    <fx:Metadata>
		[Event(name="textFlowChanged",type="flash.events.Event")]
	</fx:Metadata>

    <fx:Script>
        <![CDATA[
            import flashx.textLayout.conversion.ConversionType;
            import flashx.textLayout.conversion.TextConverter;
            import flashx.textLayout.edit.EditManager;
            import flashx.textLayout.elements.FlowElement;
            import flashx.textLayout.elements.FlowLeafElement;
            import flashx.textLayout.elements.ParagraphElement;
            import flashx.textLayout.elements.SpanElement;
            import flashx.textLayout.elements.TextFlow;
            import flashx.textLayout.formats.ITextLayoutFormat;
            import flashx.textLayout.formats.TextLayoutFormat;

            import mx.events.ColorPickerEvent;
            import mx.events.FlexEvent;

            import net.asciiworks.tlf.supportClasses.ColorListSkin;
            import net.asciiworks.tlf.supportClasses.ContentDropDownListEvent;
            import net.asciiworks.tlf.supportClasses.Icons;

            import spark.events.DropDownEvent;
            import spark.events.IndexChangeEvent;

            private var editManager:EditManager;

            //--------------------------------------------------------------------------
            //
            //  Constants
            //
            //--------------------------------------------------------------------------

            private static const BULLET_TEXT:String = "  â€¢  ";

            private static const INDENTATION_PIXELS:int = 30;

            //--------------------------------------------------------------------------
            //
            //  Variables
            //
            //--------------------------------------------------------------------------

            private var enterKeyPressed:Boolean = false;

            //--------------------------------------------------------------------------
            //
            //  Properties
            //
            //--------------------------------------------------------------------------

            //--------------------------------------
            //  automaticallyExpand
            //--------------------------------------

            private var _automaticallyExpand:Boolean = true;

            /**
             * When <code>true</code>, automatically resizes the height of the editor as the
             * user types, to fit the content.  When <code>false</code>, sets the height of the
             * editor to the height set by the parent.<br>
             * <br>
             * Note: When <code>true</code>, the height that the implementing class sets will be
             * the initial height for the editor.  It will then expand beyond that height if the
             * user types more content.<br>
             * <br>
             * Default is <code>true</code>.
             */
            public function get automaticallyExpand():Boolean {
                return _automaticallyExpand;
            }

            public function set automaticallyExpand(value:Boolean):void {
                if (_automaticallyExpand == value)
                    return;

                _automaticallyExpand = value;

                updateHeight();
            }

            //--------------------------------------
            //  availableTextColors
            //--------------------------------------

            private var _availableTextColors:Array;

            /**
             * An array of uints representing colors which to populate the text color drop
             * down box.  If this property is null, the full spectrum of colors will be
             * available.
             */
            public function get availableTextColors():Array {
                return _availableTextColors;
            }

            public function set availableTextColors(value:Array):void {
                if (_availableTextColors == value)
                    return;

                colorList.visible = value != null;
                colorList.includeInLayout = value != null;
                colorPicker.visible = value == null;
                colorPicker.includeInLayout = value == null;

                if (value)
                    colorList.dataProvider = new ArrayCollection(value);
            }

            //--------------------------------------
            //  initialTextColor
            //--------------------------------------

            private var _initialTextColor:uint = 0x000000;

            /**
             * The initial text color selected when the editor is first loaded.
             */
            public function get initialTextColor():uint {
                return _initialTextColor;
            }

            public function set initialTextColor(value:uint):void {
                if (_initialTextColor == value)
                    return;

                if (editManager) {
                    var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                    colorStyle.color = value;
                    editManager.applyLeafFormat(colorStyle);
                }

                _initialTextColor = value;
            }

            //--------------------------------------
            //  lineHeight
            //--------------------------------------

            private var _lineHeight:Object;

            /**
             * The lineHeight for the generated TextFlow object.
             */
            public function get lineHeight():Object {
                return _lineHeight;
            }

            public function set lineHeight(value:Object):void {
                if (_lineHeight == value)
                    return;

                if (editManager) {
                    var containerStyle:TextLayoutFormat = new TextLayoutFormat();
                    containerStyle.lineHeight = value;
                    editManager.applyContainerFormat(containerStyle);
                }

                _lineHeight = value;
            }

            //--------------------------------------
            //  textAreaBackgroundColor
            //--------------------------------------

            /**
             * This sets the editor text area background color.  It will not update
             * the TextFlow with any background colors.
             *
             * This is useful if you are using the editor in a CMS and you want the editor
             * to match the content pages.
             */
            public function get textAreaBackgroundColor():uint {
                return display.getStyle("backgroundColor");
            }

            public function set textAreaBackgroundColor(value:uint):void {
                display.setStyle("backgroundColor", value);
            }

            //--------------------------------------
            //  textFlow
            //--------------------------------------

            [Bindable(event="textFlowChanged")]

            /**
             * The generated TextFlow object.  This is updated whenever the user makes
             * a change to the editor text.
             *
             * This can also be used to set the initial TextFlow data when the editor first
             * loads.
             *
             * When this changes, it will dispatch the "textFlowChanged" event.
             */
            public function get textFlow():TextFlow {
                return display.textFlow.deepCopy() as TextFlow;
            }

            public function set textFlow(value:TextFlow):void {
                if (display.textFlow == value)
                    return;

                display.textFlow = value;
                updateEditManager();
                dispatchEvent(new Event('textFlowChanged'));
            }

            //--------------------------------------
            //  textFlowMarkup
            //--------------------------------------

            [Bindable(event="textFlowChanged")]

            /**
             * The generated TextFlow in String format.  This is updated whenever the
             * user makes a change to the editor text.
             *
             * This can also be used to set the initial TextFlow data when the editor first
             * loads.
             *
             * When this changes, it will dispatch the "textFlowChanged" event.
             */
            public function get textFlowMarkup():String {
                return TextConverter.export(display.textFlow, TextConverter.TEXT_LAYOUT_FORMAT, ConversionType.STRING_TYPE) as String;
            }

            public function set textFlowMarkup(value:String):void {
                var flow:TextFlow = TextConverter.importToFlow(value, TextConverter.TEXT_LAYOUT_FORMAT);

                if (display.textFlow == flow)
                    return;

                display.textFlow = flow;
                updateEditManager();
                dispatchEvent(new Event('textFlowChanged'));
            }

            //--------------------------------------------------------------------------
            //
            //  Methods
            //
            //--------------------------------------------------------------------------

            private function updateEditManager():void {
                editManager = display.textFlow.interactionManager as EditManager;

                // reset initial text color
                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = initialTextColor;
                editManager.applyLeafFormat(colorStyle);
                colorList.selectedItem = initialTextColor;
                colorPicker.selectedColor = initialTextColor;

                // reset line height
                var containerStyle:TextLayoutFormat = new TextLayoutFormat();
                containerStyle.lineHeight = lineHeight;
                editManager.applyParagraphFormat(containerStyle);
            }

            private function bulletListSelected():void {
                var paragraphs:Array = getSelectedParagraphElements();

                var span:SpanElement = new SpanElement();
                span.text = BULLET_TEXT;
                span.color = paragraphs[0].getFirstLeaf().color;
                span.fontSize = 15;

                paragraphs[0].addChildAt(0, span);
                shiftSelection(BULLET_TEXT.length, BULLET_TEXT.length);

                for (var i:int = 1; i < paragraphs.length; i++) {
                    paragraphs[i].addChildAt(0, span.deepCopy());
                    shiftSelection(0, BULLET_TEXT.length);
                }

                dispatchEvent(new Event('textFlowChanged'));

                display.setFocus();
            }

            private function bulletListDeselected():void {
                var paragraphs:Array = getSelectedParagraphElements();

                var firstLeaf:FlowLeafElement = paragraphs[0].getFirstLeaf();
                var bulletFound:Boolean = firstLeaf.text.indexOf(BULLET_TEXT) == 0;
                var spanElement:SpanElement;
                if (bulletFound && firstLeaf is SpanElement) {
                    spanElement = firstLeaf as SpanElement;
                    spanElement.text = spanElement.text.substring(BULLET_TEXT.length);

                    // Move the selection back over to the left.  Compensate for cases
                    // where part of the bullet text is selected.
                    var paragraphStart:int = paragraphs[0].getAbsoluteStart();
                    var selectionStart:int = editManager.absoluteStart;
                    var initialMoveOffset:int = selectionStart - paragraphStart;
                    shiftSelection(-Math.min(BULLET_TEXT.length, initialMoveOffset), -BULLET_TEXT.length);
                }

                for (var i:int = 1; i < paragraphs.length; i++) {
                    firstLeaf = paragraphs[i].getFirstLeaf();
                    bulletFound = firstLeaf.text.indexOf(BULLET_TEXT) == 0;
                    if (bulletFound && firstLeaf is SpanElement) {
                        spanElement = firstLeaf as SpanElement;
                        spanElement.text = spanElement.text.substring(BULLET_TEXT.length);
                        shiftSelection(0, -BULLET_TEXT.length);
                    }
                }

                dispatchEvent(new Event('textFlowChanged'));

                display.setFocus();
            }

            private function shiftSelection(startIndex:int, endIndex:int):void {
                if (display.selectionActivePosition > display.selectionAnchorPosition)
                    display.selectRange(display.selectionAnchorPosition + startIndex, display.selectionActivePosition + endIndex);
                else
                    display.selectRange(display.selectionAnchorPosition + endIndex, display.selectionActivePosition + startIndex);
            }

            private function getSelectedParagraphElements():Array {
                var paragraphs:Array = new Array();

                var start:int = editManager.getSelectionState().absoluteStart;
                var end:int = editManager.getSelectionState().absoluteEnd;
                var firstElement:FlowElement = editManager.textFlow.findLeaf(start);
                var firstElementParagraph:ParagraphElement = firstElement.getParagraph();
                var lastElement:FlowElement = editManager.textFlow.findLeaf(end);
                var lastElementParagraph:ParagraphElement = lastElement.getParagraph();

                paragraphs.push(firstElementParagraph);

                var currentElementParagraph:ParagraphElement = firstElementParagraph;
                while (currentElementParagraph != lastElementParagraph) {
                    currentElementParagraph = currentElementParagraph.getNextParagraph();
                    paragraphs.push(currentElementParagraph);
                }

                return paragraphs;
            }

            private function resetAlignButtons():void {
                var paragraphs:Array = getSelectedParagraphElements();

                var align:String = paragraphs[0].textAlign;

                // if paragraph element does not contain a textAlign, default to left
                if (!align)
                    align = "left";

                for (var i:int = 1; i < paragraphs.length; i++) {
                    var curAlign:String = paragraphs[i].textAlign;
                    if (curAlign && curAlign != align) {
                        align = null;
                        break;
                    }
                }

                leftAlign.selected = align == "left";
                centerAlign.selected = align == "center";
                rightAlign.selected = align == "right";
                justifyAlign.selected = align == "justify";
            }

            private function updateHeight():void {
                if (automaticallyExpand)
                    scroller.height = Math.max(height - toolbar.height, display.contentHeight);
                else
                    scroller.percentHeight = 100;
            }

            //--------------------------------------------------------------------------
            //
            //  Event handlers
            //
            //--------------------------------------------------------------------------

            private function creationCompleteHandler(event:Event):void {
                colorList.addEventListener(DropDownEvent.CLOSE, list_closeHandler);
                fontSize.addEventListener(DropDownEvent.CLOSE, list_closeHandler);
                fontFamily.addEventListener(DropDownEvent.CLOSE, list_closeHandler);
                updateEditManager();
                dispatchEvent(new Event('textFlowChanged'));
            }

            private function bold_clickHandler(event:MouseEvent):void {
                var boldFormat:TextLayoutFormat = new TextLayoutFormat();
                boldFormat.fontWeight = bold.selected ? "bold" : "normal";
                editManager.applyLeafFormat(boldFormat);
                display.setFocus();
            }

            private function italic_clickHandler(event:MouseEvent):void {
                var italicFormat:TextLayoutFormat = new TextLayoutFormat();
                italicFormat.fontStyle = italic.selected ? "italic" : "normal";
                editManager.applyLeafFormat(italicFormat);
                display.setFocus();
            }

            private function underline_clickHandler(event:MouseEvent):void {
                var underlineFormat:TextLayoutFormat = new TextLayoutFormat();
                underlineFormat.textDecoration = underline.selected ? "underline" : "none";
                editManager.applyLeafFormat(underlineFormat);
                display.setFocus();
            }

            private function bulletList_clickHandler(event:MouseEvent):void {
                if (event.currentTarget.selected)
                    bulletListSelected();
                else
                    bulletListDeselected();
            }

            private function align_clickHandler(event:MouseEvent):void {
                var align:String;
                if (event.currentTarget == leftAlign)
                    align = "left";
                if (event.currentTarget == centerAlign)
                    align = "center";
                if (event.currentTarget == rightAlign)
                    align = "right";
                if (event.currentTarget == justifyAlign)
                    align = "justify";

                var paragraphs:Array = getSelectedParagraphElements();

                for each (var paragraph:ParagraphElement in paragraphs) {
                    paragraph.textAlign = align;
                }

                resetAlignButtons();

                dispatchEvent(new Event('textFlowChanged'));

                display.setFocus();
            }

            private function indent_clickHandler(event:MouseEvent):void {
                var increaseMultiplier:int = event.currentTarget == increaseIndent ? 1 : -1;
                var paragraphs:Array = getSelectedParagraphElements();

                for each (var paragraph:ParagraphElement in paragraphs) {
                    var indentation:int = increaseMultiplier * INDENTATION_PIXELS;
                    if (paragraph.textIndent > 0)
                        indentation += paragraph.textIndent;
                    paragraph.textIndent = Math.max(0, indentation);
                }

                display.setFocus();
            }

            private function fontSize_changeHandler(event:IndexChangeEvent):void {
                var item:Object = event.currentTarget.selectedItem;
                var fontStyle:TextLayoutFormat = new TextLayoutFormat();
                fontStyle.fontSize = item;
                editManager.applyLeafFormat(fontStyle);
            }

            private function fontFamily_changeHandler(event:IndexChangeEvent):void {
                var item:Object = event.currentTarget.selectedItem;
                var fontStyle:TextLayoutFormat = new TextLayoutFormat();
                fontStyle.fontFamily = item;
                editManager.applyLeafFormat(fontStyle);
            }

            private function link_submitHandler(event:ContentDropDownListEvent):void {
                var link:Object = event.payload;
                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = 0xFFD87D;
                editManager.clearFormat(colorStyle, null, null);
                editManager.applyLink(link.url, link.destinationWindow, true);
                display.setFocus();
            }

            private function unlink_clickHandler(event:MouseEvent):void {
                // clear the link
                editManager.applyLink("", null, true);

                // Set color, first try to set it same as the element before the link,
                // if it exists.  If not, use the initialTextColor.
                var start:int = editManager.getSelectionState().absoluteStart;
                var previousEl:FlowElement = editManager.textFlow.findLeaf(start - 1);
                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = previousEl ? previousEl.color : initialTextColor;
                editManager.applyLeafFormat(colorStyle);

                display.setFocus();
            }

            private function image_submitHandler(event:ContentDropDownListEvent):void {
                var payload:Object = event.payload;
                editManager.insertInlineGraphic(payload.url, (payload.width)?payload.width:"auto", (payload.height)?payload.height:"auto");
            }

            private function colorPicker_changeHandler(event:Event):void {
                var colorFormat:Object;
                if (event is ColorPickerEvent)
                    colorFormat = event.currentTarget.selectedColor;
                else if (event is IndexChangeEvent)
                    colorFormat = event.currentTarget.selectedItem;

                var colorStyle:TextLayoutFormat = new TextLayoutFormat();
                colorStyle.color = colorFormat;
                editManager.applyLeafFormat(colorStyle);
            }

            private function list_closeHandler(event:DropDownEvent):void {
                display.setFocus();
            }

            private function display_selectionChangeHandler(event:FlexEvent):void {
                if (!editManager)
                    return;

                var format:ITextLayoutFormat = editManager.getCommonCharacterFormat();

                // bold, italic, underline
                var boldFormat:* = format.fontWeight;
                bold.selected = boldFormat == "bold";
                var italicFormat:* = format.fontStyle;
                italic.selected = italicFormat == "italic";
                var underlineFormat:* = format.textDecoration;
                underline.selected = underlineFormat == "underline";

                // bullets
                var paragraphs:Array = getSelectedParagraphElements();

                var spanText:String = BULLET_TEXT;

                var firstLeaf:FlowLeafElement = paragraphs[0].getFirstLeaf();
                var bulletFound:Boolean = firstLeaf.text.indexOf(spanText) == 0;

                for (var i:int = 1; i < paragraphs.length && !bulletFound; i++) {
                    firstLeaf = paragraphs[i].getFirstLeaf();
                    bulletFound = firstLeaf.text.indexOf(spanText) == 0;
                }

                bulletList.selected = bulletFound;

                // align
                resetAlignButtons();

                // font size
                var size:* = format.fontSize;
                if (size == undefined)
                    fontSize.selectedIndex = -1;
                else
                    fontSize.selectedItem = format.fontSize;

                // font family
                var family:* = format.fontFamily;
                if (family == undefined)
                    fontFamily.selectedIndex = -1;
                else
                    fontFamily.selectedItem = format.fontFamily;

                // color
                var colorFormat:* = format.color;
                if (colorFormat == undefined) {
                    colorPicker.selectedColor = 0x000000;
                    colorList.selectedItem = null;
                } else {
                    colorPicker.selectedColor = colorFormat;
                    colorList.selectedItem = colorFormat;
                }

                // enter key pressed, check for bullets
                if (enterKeyPressed) {
                    enterKeyPressed = false;
                    var index:int = editManager.getSelectionState().absoluteStart;
                    var leaf:FlowLeafElement = editManager.textFlow.findLeaf(index);
                    var currentParagraph:ParagraphElement = leaf.getParagraph();
                    var previousParagraph:ParagraphElement = currentParagraph.getPreviousParagraph();
                    firstLeaf = previousParagraph.getFirstLeaf();
                    bulletFound = firstLeaf.text.indexOf(spanText) == 0;
                    if (bulletFound) {
                        var span:SpanElement = new SpanElement();
                        span.text = BULLET_TEXT;
                        span.color = leaf.color;
                        span.fontSize = 15;

                        currentParagraph.addChildAt(0, span);

                        index += BULLET_TEXT.length;
                        display.selectRange(index, index);

                        var fontStyle:TextLayoutFormat = new TextLayoutFormat();
                        var newFontSize:* = leaf.getStyle("fontSize");
                        fontStyle.fontSize = newFontSize;
                        editManager.applyLeafFormat(fontStyle);
                        fontSize.selectedItem = newFontSize;
                    }
                }
            }

            /**
             * Sets up a trigger that the change handler deals with.
             */
            private function display_keyDownHandler(event:KeyboardEvent):void {
                if (event.keyCode == Keyboard.ENTER) {
                    enterKeyPressed = true;
                }
            }
        ]]>
    </fx:Script>

    <!--- @private -->
    <s:Group id="toolbar" width="100%">
        <s:layout>
            <s:HorizontalLayout gap="0"/>
        </s:layout>
        <!--- @private -->
        <s:ToggleButton id="bold" width="23" height="23" cornerRadius="0"
                        click="bold_clickHandler(event)"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(3)}" toolTip="Bold"/>
        <!--- @private -->
        <s:ToggleButton id="italic" width="23" height="23" cornerRadius="0"
                        click="italic_clickHandler(event)"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(7)}" toolTip="Italic"/>
        <!--- @private -->
        <s:ToggleButton id="underline" width="23" height="23" cornerRadius="0"
                        click="underline_clickHandler(event)"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(19)}" toolTip="Underline"/>
        <!--- @private -->
        <s:ToggleButton id="bulletList" width="23" height="23" cornerRadius="0"
                        click="bulletList_clickHandler(event)"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(18)}" toolTip="Bulleted list"/>
        <!--- @private -->
        <s:ToggleButton id="leftAlign" width="23" height="23" cornerRadius="0"
                        click="align_clickHandler(event)" selected="true"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(9)}" toolTip="Left align"/>
        <!--- @private -->
        <s:ToggleButton id="centerAlign" width="23" height="23" cornerRadius="0"
                        click="align_clickHandler(event)"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(4)}" toolTip="Center align"/>
        <!--- @private -->
        <s:ToggleButton id="rightAlign" width="23" height="23" cornerRadius="0"
                        click="align_clickHandler(event)"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(13)}" toolTip="Right align"/>
        <!--- @private -->
        <s:ToggleButton id="justifyAlign" width="23" height="23" cornerRadius="0"
                        click="align_clickHandler(event)"
                        skinClass="net.asciiworks.tlf.supportClasses.IconToggleButtonSkin"
                        content="{Icons.getIcon(8)}" toolTip="Justify align"/>
        <!--- @private -->
        <s:Button id="increaseIndent" width="23" height="23" cornerRadius="0"
                  click="indent_clickHandler(event)"
                  skinClass="net.asciiworks.tlf.supportClasses.IconButtonSkin"
                  content="{Icons.getIcon(6)}" toolTip="Increase indent"/>
        <!--- @private -->
        <s:Button id="decreaseIndent" width="23" height="23" cornerRadius="0"
                  click="indent_clickHandler(event)"
                  skinClass="net.asciiworks.tlf.supportClasses.IconButtonSkin"
                  content="{Icons.getIcon(11)}" toolTip="Decrease indent"/>
        <!--- @private -->
        <s:ComboBox id="fontSize" width="50" cornerRadius="0" selectedItem="12"
                    change="fontSize_changeHandler(event)" toolTip="Font size" contentBackgroundColor="#FFFFFF"
                    dataProvider="{new ArrayCollection([6,7,8,9,10,11,12,13,14,15,16,18,20,22,24,26,28,32,36,40,44,48,54,60,66,72,80,88,96])}"/>
        <!--- @private -->
        <s:ComboBox id="fontFamily" width="100" cornerRadius="0" selectedIndex="0"
                    change="fontFamily_changeHandler(event)" toolTip="Font family" contentBackgroundColor="#FFFFFF">
            <s:dataProvider>
                <s:ArrayCollection>
                    <fx:Object>Arial</fx:Object>
                    <fx:Object>Courier</fx:Object>
                    <fx:Object>Courier New</fx:Object>
                    <fx:Object>Geneva</fx:Object>
                    <fx:Object>Georgia</fx:Object>
                    <fx:Object>Helvetica</fx:Object>
                    <fx:Object>Times New Roman</fx:Object>
                    <fx:Object>Times</fx:Object>
                    <fx:Object>Verdana</fx:Object>
                </s:ArrayCollection>
            </s:dataProvider>
        </s:ComboBox>
        <!--- @private -->
        <mx:ColorPicker id="colorPicker" height="23" color="0x000000"
                        change="colorPicker_changeHandler(event)" toolTip="Text color"/>
        <!--- @private -->
        <supportClasses:ColorList id="colorList" width="50" height="23" visible="false"
                                  includeInLayout="false"
                                  skinClass="net.asciiworks.tlf.supportClasses.ColorListSkin"
                                  itemRenderer="net.asciiworks.tlf.supportClasses.ColorListItemRenderer"
                                  selectedIndex="0" change="colorPicker_changeHandler(event)"
                                  toolTip="Text color"/>
        <!--- @private -->
        <supportClasses:ContentDropDownList width="23" height="23" cornerRadius="0"
                                            submit="link_submitHandler(event)"
                                            skinClass="net.asciiworks.tlf.supportClasses.LinkDropDownListSkin"
                                            content="{Icons.getIcon(21)}" toolTip="Link"/>
        <!--- @private -->
        <s:Button width="23" height="23" cornerRadius="0" click="unlink_clickHandler(event)"
                  skinClass="net.asciiworks.tlf.supportClasses.IconButtonSkin"
                  content="{Icons.getIcon(22)}" toolTip="Remove link"/>
        <!--- @private -->
        <supportClasses:ContentDropDownList width="23" height="23" cornerRadius="0"
                                            submit="image_submitHandler(event)"
                                            skinClass="net.asciiworks.tlf.supportClasses.ImageDropDownListSkin"
                                            content="{Icons.getIcon(20)}" toolTip="Insert image"
											contentBackgroundColor="#FFFFFF"/>
    </s:Group>

    <!--- @private -->
    <s:Scroller id="scroller" width="100%">
        <!--- @private -->
        <s:RichEditableText id="display" left="0" right="0" height="100%"
                            change="dispatchEvent(new Event('textFlowChanged'));updateHeight();"
                            selectionChange="display_selectionChangeHandler(event)"
                            creationComplete="display.setFocus();"
                            keyDown="display_keyDownHandler(event)"/>
    </s:Scroller>

</s:Group>
